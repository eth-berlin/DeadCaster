"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SignedCallDataPack_instances, _SignedCallDataPack_encode;
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeSignableCall = exports.SignedCallDataPack = exports.signedCallEIP712Params = void 0;
const cbor = __importStar(require("cborg"));
const ethers_1 = require("ethers");
const DEFAULT_GAS_PRICE = 1; // Default gas params are assigned in the web3 gateway.
const DEFAULT_GAS_LIMIT = 30000000;
const DEFAULT_VALUE = 0;
const DEFAULT_NONCE_RANGE = 20;
const DEFAULT_BLOCK_RANGE = 4000;
const DEFAULT_DATA = '0x';
const zeroAddress = () => `0x${'0'.repeat(40)}`;
class SignedCallCache {
    constructor() {
        // for each signer, we cache the signature of the hash of each SignableCall
        this.cachedSignatures = new Map();
        // for each ChainId, we cache the base block number to make the same leash
        this.cachedLeashes = new Map();
    }
    clear() {
        this.cachedSignatures.clear();
        this.cachedLeashes.clear();
    }
    cache(address, chainId, call, hash, signature) {
        if (!this.cachedSignatures.has(address))
            this.cachedSignatures.set(address, new Map());
        this.cachedSignatures.get(address).set(hash, signature);
        this.cachedLeashes.set(chainId, {
            nonce: call.leash.nonce,
            block_number: call.leash.blockNumber,
            block_hash: call.leash.blockHash,
            block_range: call.leash.blockRange,
        });
    }
    get(address, hash) {
        var _a;
        return (_a = this.cachedSignatures.get(address)) === null || _a === void 0 ? void 0 : _a.get(hash);
    }
    getLeash(chainId) {
        return this.cachedLeashes.get(chainId);
    }
}
const _cache = new SignedCallCache();
function signedCallEIP712Params(chainId) {
    return {
        domain: {
            name: 'oasis-runtime-sdk/evm: signed query',
            version: '1.0.0',
            chainId,
        },
        types: {
            Call: [
                { name: 'from', type: 'address' },
                { name: 'to', type: 'address' },
                { name: 'gasLimit', type: 'uint64' },
                { name: 'gasPrice', type: 'uint256' },
                { name: 'value', type: 'uint256' },
                { name: 'data', type: 'bytes' },
                { name: 'leash', type: 'Leash' },
            ],
            Leash: [
                { name: 'nonce', type: 'uint64' },
                { name: 'blockNumber', type: 'uint64' },
                { name: 'blockHash', type: 'bytes32' },
                { name: 'blockRange', type: 'uint64' },
            ],
        },
    };
}
exports.signedCallEIP712Params = signedCallEIP712Params;
/**
 * Parameters that define a signed call that shall be
 * CBOR-encoded and sent as the call's `data` field.
 */
class SignedCallDataPack {
    static make(call, signer, overrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const leash = yield makeLeash(signer, overrides === null || overrides === void 0 ? void 0 : overrides.leash);
            return new SignedCallDataPack(leash, yield signCall(makeSignableCall(call, leash), signer, {
                chainId: overrides === null || overrides === void 0 ? void 0 : overrides.chainId,
            }), call.data ? parseBytesLike(call.data) : undefined);
        });
    }
    constructor(leash, 
    /** A signature over the call and leash as generated by `signCall`. */
    signature, 
    /**
     * An oasis-sdk `Call` without the optional fields.
     *
     * After encryption, `body` would be encrypted and this field would contain a
     * `format` field. The runtime would decode the data as a `types::transaction::Call`.
     **/
    data) {
        this.leash = leash;
        this.signature = signature;
        this.data = data;
        _SignedCallDataPack_instances.add(this);
    }
    encode() {
        return __classPrivateFieldGet(this, _SignedCallDataPack_instances, "m", _SignedCallDataPack_encode).call(this, this.data ? { body: this.data } : undefined);
    }
    /** Encodes the data pack after encrypting the signed call data. */
    encryptEncode(cipher) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.data)
                return __classPrivateFieldGet(this, _SignedCallDataPack_instances, "m", _SignedCallDataPack_encode).call(this, yield cipher.encryptEnvelope(this.data));
            return this.encode();
        });
    }
}
exports.SignedCallDataPack = SignedCallDataPack;
_SignedCallDataPack_instances = new WeakSet(), _SignedCallDataPack_encode = function _SignedCallDataPack_encode(data) {
    return ethers_1.ethers.hexlify(cbor.encode({
        data: data ? data : undefined,
        leash: this.leash,
        signature: this.signature,
    }));
};
function parseBytesLike(data) {
    if (Array.isArray(data))
        return new Uint8Array(data);
    return ethers_1.ethers.getBytesCopy(data);
}
function stringifyBytesLike(data) {
    if (Array.isArray(data))
        return ethers_1.ethers.hexlify(new Uint8Array(data));
    return ethers_1.ethers.hexlify(data);
}
function makeLeash(signer, overrides) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        // simply invalidate signedCall caches if overrided nonce or block are provided
        if ((overrides === null || overrides === void 0 ? void 0 : overrides.nonce) !== undefined || (overrides === null || overrides === void 0 ? void 0 : overrides.block) !== undefined) {
            _cache.clear();
        }
        let nonceP;
        if (overrides === null || overrides === void 0 ? void 0 : overrides.nonce) {
            nonceP = overrides.nonce;
        }
        else if ('getNonce' in signer) {
            // Ethers v6 has 'getNonce'
            nonceP = signer.getNonce('pending');
        }
        else {
            // Ethers v5 doesn't, so use `getTransactionCount`
            const addr = yield signer.getAddress();
            nonceP = signer.provider.getTransactionCount(addr, 'pending');
        }
        let blockP;
        if ((overrides === null || overrides === void 0 ? void 0 : overrides.block) !== undefined) {
            blockP = overrides.block;
        }
        else {
            if (!signer.provider)
                throw new Error('`sapphire.wrap`ped signer was not connected to a provider');
            const latestBlock = yield signer.provider.getBlock('latest');
            if (!latestBlock)
                throw new Error('unable to get latest block');
            blockP = signer.provider.getBlock(latestBlock.number - 2);
        }
        const [nonce, block] = yield Promise.all([nonceP, blockP]);
        const blockRange = (_a = overrides === null || overrides === void 0 ? void 0 : overrides.blockRange) !== null && _a !== void 0 ? _a : DEFAULT_BLOCK_RANGE;
        // check whether we should use cached leashes
        if ((overrides === null || overrides === void 0 ? void 0 : overrides.nonce) === undefined && (overrides === null || overrides === void 0 ? void 0 : overrides.block) === undefined) {
            if (!signer.provider)
                throw new Error('`sapphire.wrap`ped signer was not connected to a provider');
            const { chainId } = yield signer.provider.getNetwork();
            const cachedLeash = _cache.getLeash(BigInt(chainId));
            if (cachedLeash !== undefined) {
                // this happens only if neither overried nonce nor block are provided
                // so the pendingNonce and latestBlock are compared with the cachedLeash
                if (cachedLeash.nonce > nonce &&
                    cachedLeash.block_number + blockRange > block.number + 2) {
                    // the cached leash can be still re-usable
                    return cachedLeash;
                }
                else {
                    // the cached leash has been outdated
                    _cache.clear();
                }
            }
        }
        return {
            nonce: (overrides === null || overrides === void 0 ? void 0 : overrides.nonce) ? overrides.nonce : nonce + DEFAULT_NONCE_RANGE,
            block_number: block.number,
            block_hash: ethers_1.ethers.getBytesCopy(block.hash),
            block_range: blockRange,
        };
    });
}
function makeSignableCall(call, leash) {
    var _a, _b, _c, _d, _e;
    return {
        from: call.from,
        to: (_a = call.to) !== null && _a !== void 0 ? _a : zeroAddress(),
        gasLimit: Number(BigInt((_c = (_b = call.gasLimit) !== null && _b !== void 0 ? _b : call.gasLimit) !== null && _c !== void 0 ? _c : DEFAULT_GAS_LIMIT)),
        gasPrice: BigInt((_d = call.gasPrice) !== null && _d !== void 0 ? _d : DEFAULT_GAS_PRICE),
        value: BigInt((_e = call.value) !== null && _e !== void 0 ? _e : DEFAULT_VALUE),
        data: call.data ? stringifyBytesLike(call.data) : DEFAULT_DATA,
        leash: {
            nonce: leash.nonce,
            blockNumber: leash.block_number,
            blockHash: leash.block_hash,
            blockRange: leash.block_range,
        },
    };
}
exports.makeSignableCall = makeSignableCall;
function signCall(call, signer, overrides) {
    return __awaiter(this, void 0, void 0, function* () {
        const address = yield signer.getAddress();
        let chainId;
        if (overrides === null || overrides === void 0 ? void 0 : overrides.chainId) {
            chainId = BigInt(overrides.chainId);
        }
        else if (signer.provider) {
            ({ chainId } = yield signer.provider.getNetwork());
        }
        else {
            throw new Error('must either connect provider or provide manual chainId override');
        }
        const { domain, types } = signedCallEIP712Params(Number(chainId));
        const upgradedDomain = upgradeDomain(domain);
        const upgradedCall = upgradeCall(call);
        const hash = ethers_1.ethers.TypedDataEncoder.hash(upgradedDomain, types, upgradedCall);
        let signature = _cache.get(address, hash);
        if (signature !== undefined)
            return signature;
        signature = ethers_1.ethers.getBytes('_signTypedData' in signer
            ? yield signer._signTypedData(upgradedDomain, types, upgradedCall)
            : yield signer.signTypedData(upgradedDomain, types, upgradedCall));
        _cache.cache(address, BigInt(chainId), call, hash, signature);
        return signature;
    });
}
function upgradeDomain(domain) {
    const x = Object.assign(Object.assign({}, domain), { chainId: domain.chainId ? (0, ethers_1.toBeHex)(domain.chainId) : undefined });
    if (domain.salt) {
        x['salt'] = parseBytesLike(domain.salt);
    }
    return x;
}
function upgradeCall(call) {
    const big2int = (b) => {
        if (b === undefined || b === null)
            return undefined;
        if (typeof b === 'string')
            return b;
        if (b instanceof BigInt)
            return (0, ethers_1.toBeHex)(b.toString());
        return ethers_1.ethers.toQuantity(b);
    };
    return Object.assign(Object.assign({}, call), { gasPrice: big2int(call.gasPrice), value: big2int(call.value), data: call.data ? ethers_1.ethers.getBytes(call.data) : undefined });
}
//# sourceMappingURL=signed_calls.js.map