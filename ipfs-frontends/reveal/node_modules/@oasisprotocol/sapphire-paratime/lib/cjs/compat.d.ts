import { Provider, Signer } from 'ethers';
import { Ethers5Signer, Ethers5Provider, EIP1193Provider } from './interfaces.js';
import { AbstractKeyFetcher } from './calldatapublickey.js';
interface SapphireWrapOptions {
    fetcher: AbstractKeyFetcher;
}
declare const SAPPHIRE_PROP = "sapphire";
export type SapphireAnnex = {
    [SAPPHIRE_PROP]: SapphireWrapOptions;
};
/**
 * Wraps an upstream ethers/web3/EIP-1193 provider to speak the Sapphire format.
 *
 * @param upstream The upstream web3 provider. Try something like one of the following:
 * ```
 * ethers.providers.Web3Provider(window.ethereum)
 * ethers.Wallet(privateKey)
 * ethers.getDefaultProvider(NETWORKS.testnet.defaultGateway)
 * window.ethereum
 * a Web3 gateway URL
 * ```
 */
export declare function wrap<U extends EIP1193Provider>(upstream: U, options?: SapphireWrapOptions): U & SapphireAnnex;
export declare function wrap<U extends Ethers5Provider>(upstream: U, options?: SapphireWrapOptions): U & SapphireAnnex;
export declare function wrap<U extends Ethers5Signer>(upstream: U, options?: SapphireWrapOptions): U & SapphireAnnex;
export declare function wrapEthersSigner<P extends Ethers5Signer>(upstream: P, options?: SapphireWrapOptions): P & SapphireAnnex;
export declare function wrapEthersProvider<P extends Provider | Ethers5Provider>(provider: P, options?: SapphireWrapOptions, signer?: Ethers5Signer | Signer): P & SapphireAnnex;
export {};
//# sourceMappingURL=compat.d.ts.map