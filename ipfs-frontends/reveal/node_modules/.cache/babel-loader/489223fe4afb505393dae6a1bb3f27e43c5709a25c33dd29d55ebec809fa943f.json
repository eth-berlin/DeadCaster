{"ast":null,"code":"// Copyright (c) 2019 Oasis Labs Inc. <info@oasislabs.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// @ts-expect-error TODO: missing types\nvar aes = require('bsaes');\nvar uint32 = require('uint32');\n// @ts-expect-error TODO: missing types\nvar unsafe = require('bsaes/unsafe');\nconst KeySize = 32;\nconst NonceSize = 15;\nconst TagSize = 16;\nconst stkSize = 16;\nconst rounds = 16;\nconst blockSize = 16;\nconst tweakSize = 16;\nconst prefixADBlock = 0x02;\nconst prefixADFinal = 0x06;\nconst prefixMsgBlock = 0x00;\nconst prefixMsgFinal = 0x04;\nconst prefixTag = 0x01;\nconst prefixShift = 4;\n\n/**\n * @param {Uint8Array} dst\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n * @param {number} n\n */\nfunction xorBytes(dst, a, b, n) {\n  for (let i = 0; i < n; i++) {\n    dst[i] = a[i] ^ b[i];\n  }\n}\n\n//\n// TWEAKEY routines\n//\n\nconst rcons = new Uint8Array([0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72]);\n\n/**\n * @param {Uint8Array} t\n */\nfunction h(t) {\n  const tmp = new Uint8Array([t[1], t[6], t[11], t[12], t[5], t[10], t[15], t[0], t[9], t[14], t[3], t[4], t[13], t[2], t[7], t[8]]);\n  t.set(tmp);\n}\n\n/**\n * @param {Uint8Array} t\n */\nfunction lfsr2(t) {\n  for (let i = 0; i < stkSize; i++) {\n    const x = t[i];\n    const x7 = x >> 7;\n    const x5 = x >> 5 & 1;\n    t[i] = x << 1 | x7 ^ x5;\n  }\n}\n\n/**\n * @param {Uint8Array} t\n */\nfunction lfsr3(t) {\n  for (let i = 0; i < stkSize; i++) {\n    const x = t[i];\n    const x0 = x & 1;\n    const x6 = x >> 6 & 1;\n    t[i] = x >> 1 | (x0 ^ x6) << 7;\n  }\n}\n\n/**\n * @param {Uint8Array} t\n * @param {number} i\n */\nfunction xorRC(t, i) {\n  t[0] ^= 1;\n  t[1] ^= 2;\n  t[2] ^= 4;\n  t[3] ^= 8;\n  t[4] ^= rcons[i];\n  t[5] ^= rcons[i];\n  t[6] ^= rcons[i];\n  t[7] ^= rcons[i];\n}\n\n/**\n * @param {Uint8Array} key\n * @param {Uint8Array[]} derivedKs\n */\nfunction stkDeriveK(key, derivedKs) {\n  let tk2 = key.subarray(16, 32);\n  let tk3 = key.subarray(0, 16);\n  xorBytes(derivedKs[0], tk2, tk3, stkSize);\n  xorRC(derivedKs[0], 0);\n  for (let i = 1; i <= rounds; i++) {\n    lfsr2(tk2);\n    h(tk2);\n    lfsr3(tk3);\n    h(tk3);\n    xorBytes(derivedKs[i], tk2, tk3, stkSize);\n    xorRC(derivedKs[i], i);\n  }\n}\n\n/**\n * @param {Uint8Array[]} stks\n * @param {Uint8Array[]} derivedKs\n * @param {Uint8Array} tweak\n */\nfunction deriveSubTweakKeys(stks, derivedKs, tweak) {\n  let tk1 = new Uint8Array(tweak);\n  xorBytes(stks[0], derivedKs[0], tk1, stkSize);\n  for (let i = 1; i <= rounds; i++) {\n    h(tk1);\n    xorBytes(stks[i], derivedKs[i], tk1, stkSize);\n  }\n}\nfunction newStks() {\n  let stks = [];\n  for (let i = 0; i <= rounds; i++) {\n    stks.push(new Uint8Array(16));\n  }\n  return stks;\n}\n\n//\n// Deoxys-BC-384\n//\n\nclass implCt32 {\n  /**\n   * @param {Uint8Array} ciphertext\n   * @param {Uint8Array[]} derivedKs\n   * @param {Uint8Array} tweak\n   * @param {Uint8Array} plaintext\n   */\n  static bcEncrypt(ciphertext, derivedKs, tweak, plaintext) {\n    let stks = newStks();\n    deriveSubTweakKeys(stks, derivedKs, tweak);\n    let q = aes.newQ(),\n      stk = aes.newQ();\n    aes.load4xU32(q, plaintext);\n    aes.load4xU32(stk, stks[0]);\n    aes.addRoundKey(q, stk);\n    for (let i = 1; i <= rounds; i++) {\n      aes.subBytes(q);\n      aes.shiftRows(q);\n      aes.mixColumns(q);\n      aes.load4xU32(stk, stks[i]);\n      aes.addRoundKey(q, stk);\n    }\n    aes.store4xU32(ciphertext, q);\n  }\n\n  /**\n   * @param {Uint8Array} ciphertext\n   * @param {Uint8Array[]} derivedKs\n   * @param {Uint8Array[]} tweaks\n   * @param {Uint8Array} nonce\n   */\n  static bcKeystreamx2(ciphertext, derivedKs, tweaks, nonce) {\n    let stks = [newStks(), newStks()];\n    for (let i = 0; i < 2; i++) {\n      deriveSubTweakKeys(stks[i], derivedKs, tweaks[i]);\n    }\n    let q = aes.newQ(),\n      stk = aes.newQ();\n    aes.rkeyOrtho(q, nonce);\n    aes.load8xU32(stk, stks[0][0], stks[1][0]);\n    aes.addRoundKey(q, stk);\n    for (let i = 1; i <= rounds; i++) {\n      aes.subBytes(q);\n      aes.shiftRows(q);\n      aes.mixColumns(q);\n      aes.load8xU32(stk, stks[0][i], stks[1][i]);\n      aes.addRoundKey(q, stk);\n    }\n    aes.store8xU32(ciphertext.subarray(0, 16), ciphertext.subarray(16, 32), q);\n  }\n  /**\n   * @param {Uint8Array} tag\n   * @param {Uint8Array[]} derivedKs\n   * @param {Uint8Array} tweak\n   * @param {Uint8Array} plaintext\n   */\n  static bcTagx1(tag, derivedKs, tweak, plaintext) {\n    let stks = newStks();\n    deriveSubTweakKeys(stks, derivedKs, tweak);\n    let q = aes.newQ(),\n      stk = aes.newQ();\n    aes.load4xU32(q, plaintext);\n    aes.load4xU32(stk, stks[0]);\n    aes.addRoundKey(q, stk);\n    for (let i = 1; i <= rounds; i++) {\n      aes.subBytes(q);\n      aes.shiftRows(q);\n      aes.mixColumns(q);\n      aes.load4xU32(stk, stks[i]);\n      aes.addRoundKey(q, stk);\n    }\n    const tagView = new DataView(tag.buffer);\n    let tag0 = tagView.getUint32(0, true);\n    let tag1 = tagView.getUint32(4, true);\n    let tag2 = tagView.getUint32(8, true);\n    let tag3 = tagView.getUint32(12, true);\n    aes.ortho(q);\n    tag0 = uint32.xor(tag0, q[0]);\n    tag1 = uint32.xor(tag1, q[2]);\n    tag2 = uint32.xor(tag2, q[4]);\n    tag3 = uint32.xor(tag3, q[6]);\n    tagView.setUint32(0, tag0, true);\n    tagView.setUint32(4, tag1, true);\n    tagView.setUint32(8, tag2, true);\n    tagView.setUint32(12, tag3, true);\n  }\n\n  /**\n   * @param {Uint8Array} tag\n   * @param {Uint8Array[]} derivedKs\n   * @param {Uint8Array[]} tweaks\n   * @param {Uint8Array} plaintext\n   */\n  static bcTagx2(tag, derivedKs, tweaks, plaintext) {\n    let stks = [newStks(), newStks()];\n    for (let i = 0; i < 2; i++) {\n      deriveSubTweakKeys(stks[i], derivedKs, tweaks[i]);\n    }\n    let q = aes.newQ(),\n      stk = aes.newQ();\n    aes.load8xU32(q, plaintext.subarray(0, 16), plaintext.subarray(16, 32));\n    aes.load8xU32(stk, stks[0][0], stks[1][0]);\n    aes.addRoundKey(q, stk);\n    for (let i = 1; i <= rounds; i++) {\n      aes.subBytes(q);\n      aes.shiftRows(q);\n      aes.mixColumns(q);\n      aes.load8xU32(stk, stks[0][i], stks[1][i]);\n      aes.addRoundKey(q, stk);\n    }\n    const tagView = new DataView(tag.buffer);\n    let tag0 = tagView.getUint32(0, true);\n    let tag1 = tagView.getUint32(4, true);\n    let tag2 = tagView.getUint32(8, true);\n    let tag3 = tagView.getUint32(12, true);\n    aes.ortho(q);\n    tag0 = uint32.xor(tag0, q[0], q[1]);\n    tag1 = uint32.xor(tag1, q[2], q[3]);\n    tag2 = uint32.xor(tag2, q[4], q[5]);\n    tag3 = uint32.xor(tag3, q[6], q[7]);\n    tagView.setUint32(0, tag0, true);\n    tagView.setUint32(4, tag1, true);\n    tagView.setUint32(8, tag2, true);\n    tagView.setUint32(12, tag3, true);\n  }\n}\nclass implUnsafeVartime {\n  /**\n   * @param {Uint8Array} ciphertext\n   * @param {Uint8Array[]} derivedKs\n   * @param {Uint8Array} tweak\n   * @param {Uint8Array} plaintext\n   */\n  static bcEncrypt(ciphertext, derivedKs, tweak, plaintext) {\n    let stks = newStks();\n    deriveSubTweakKeys(stks, derivedKs, tweak);\n    const plainView = new DataView(plaintext.buffer);\n    let s0 = plainView.getUint32(0 + plaintext.byteOffset, false);\n    let s1 = plainView.getUint32(4 + plaintext.byteOffset, false);\n    let s2 = plainView.getUint32(8 + plaintext.byteOffset, false);\n    let s3 = plainView.getUint32(12 + plaintext.byteOffset, false);\n    const stksView = new DataView(stks[0].buffer);\n    s0 = uint32.xor(s0, stksView.getUint32(0 + stks[0].byteOffset, false));\n    s1 = uint32.xor(s1, stksView.getUint32(4 + stks[0].byteOffset, false));\n    s2 = uint32.xor(s2, stksView.getUint32(8 + stks[0].byteOffset, false));\n    s3 = uint32.xor(s3, stksView.getUint32(12 + stks[0].byteOffset, false));\n    for (let i = 1; i <= rounds; i++) {\n      [s0, s1, s2, s3] = unsafe.aesencVartime(s0, s1, s2, s3, stks[i]);\n    }\n    const cipherView = new DataView(ciphertext.buffer);\n    cipherView.setUint32(0 + ciphertext.byteOffset, s0, false);\n    cipherView.setUint32(4 + ciphertext.byteOffset, s1, false);\n    cipherView.setUint32(8 + ciphertext.byteOffset, s2, false);\n    cipherView.setUint32(12 + ciphertext.byteOffset, s3, false);\n  }\n  /**\n   * @param {Uint8Array} ciphertext\n   * @param {Uint8Array[]} derivedKs\n   * @param {Uint8Array[]} tweaks\n   * @param {Uint8Array} nonce\n   */\n  static bcKeystreamx2(ciphertext, derivedKs, tweaks, nonce) {\n    this.bcEncrypt(ciphertext.subarray(0, 16), derivedKs, tweaks[0], nonce);\n    this.bcEncrypt(ciphertext.subarray(16, 32), derivedKs, tweaks[1], nonce);\n  }\n  /**\n   * @param {Uint8Array} tag\n   * @param {Uint8Array[]} derivedKs\n   * @param {Uint8Array} tweak\n   * @param {Uint8Array} plaintext\n   */\n  static bcTagx1(tag, derivedKs, tweak, plaintext) {\n    let tmp = new Uint8Array(blockSize);\n    this.bcEncrypt(tmp, derivedKs, tweak, plaintext);\n    xorBytes(tag, tag, tmp, blockSize);\n  }\n  /**\n  * @param {Uint8Array} tag\n  * @param {Uint8Array[]} derivedKs\n  * @param {Uint8Array[]} tweaks\n  * @param {Uint8Array} plaintext\n  */\n  static bcTagx2(tag, derivedKs, tweaks, plaintext) {\n    let tmp = new Uint8Array(2 * blockSize);\n    this.bcEncrypt(tmp.subarray(0, 16), derivedKs, tweaks[0], plaintext.subarray(0, 16));\n    this.bcEncrypt(tmp.subarray(16, 32), derivedKs, tweaks[1], plaintext.subarray(16, 32));\n    xorBytes(tag, tag, tmp.subarray(0, 16), blockSize);\n    xorBytes(tag, tag, tmp.subarray(16, 32), blockSize);\n  }\n}\n\n//\n// Put it all together\n//\n\n/**\n * @param {Uint8Array} out\n * @param {number} prefix\n * @param {number} blockNr\n */\nfunction encodeTagTweak(out, prefix, blockNr) {\n  out.set(new Uint8Array(12));\n  new DataView(out.buffer).setUint32(12 + out.byteOffset, blockNr, false);\n  out[0] = prefix << prefixShift;\n}\n\n/**\n * @param {Uint8Array} out\n * @param {Uint8Array} tag\n * @param {number} blockNr\n */\nfunction encodeEncTweak(out, tag, blockNr) {\n  var tmp = new Uint8Array(4);\n  new DataView(tmp.buffer).setUint32(0, blockNr, false);\n  out.set(tag);\n  out[0] |= 0x80;\n  xorBytes(out.subarray(12, 16), out.subarray(12, 16), tmp, 4);\n}\nfunction newTweaks() {\n  let tweaks = [];\n  for (let i = 0; i < 2; i++) {\n    tweaks.push(new Uint8Array(tweakSize));\n  }\n  return tweaks;\n}\n\n/**\n * @param {typeof implUnsafeVartime | typeof implCt32} impl\n * @param {Uint8Array[]} derivedKs\n * @param {Uint8Array} nonce\n * @param {Uint8Array} dst\n * @param {Uint8Array} ad\n * @param {Uint8Array} msg\n */\nfunction e(impl, derivedKs, nonce, dst, ad, msg) {\n  let tweaks = newTweaks();\n  let i = 0,\n    j = 0;\n\n  // Associated data.\n  let adLen = ad.length;\n  let auth = new Uint8Array(TagSize);\n  for (i = 0; adLen >= 2 * blockSize; i += 2) {\n    encodeTagTweak(tweaks[0], prefixADBlock, i);\n    encodeTagTweak(tweaks[1], prefixADBlock, i + 1);\n    impl.bcTagx2(auth, derivedKs, tweaks, ad.subarray(i * blockSize, (i + 2) * blockSize));\n    adLen -= 2 * blockSize;\n  }\n  for (; adLen >= blockSize; i++) {\n    encodeTagTweak(tweaks[0], prefixADBlock, i);\n    impl.bcTagx1(auth, derivedKs, tweaks[0], ad.subarray(i * blockSize, (i + 1) * blockSize));\n    adLen -= blockSize;\n  }\n  if (adLen > 0) {\n    encodeTagTweak(tweaks[0], prefixADFinal, i);\n    let aStar = new Uint8Array(blockSize);\n    aStar.set(ad.subarray(ad.length - adLen));\n    aStar[adLen] = 0x80;\n    impl.bcTagx1(auth, derivedKs, tweaks[0], aStar);\n  }\n\n  // Message authentication and tag generation.\n  let msgLen = msg.length;\n  for (j = 0; msgLen >= 2 * blockSize; j += 2) {\n    encodeTagTweak(tweaks[0], prefixMsgBlock, j);\n    encodeTagTweak(tweaks[1], prefixMsgBlock, j + 1);\n    impl.bcTagx2(auth, derivedKs, tweaks, msg.subarray(j * blockSize, (j + 2) * blockSize));\n    msgLen -= 2 * blockSize;\n  }\n  for (; msgLen >= blockSize; j++) {\n    encodeTagTweak(tweaks[0], prefixMsgBlock, j);\n    impl.bcTagx1(auth, derivedKs, tweaks[0], msg.subarray(j * blockSize, (j + 1) * blockSize));\n    msgLen -= blockSize;\n  }\n  if (msgLen > 0) {\n    encodeTagTweak(tweaks[0], prefixMsgFinal, j);\n    let mStar = new Uint8Array(blockSize);\n    mStar.set(msg.subarray(msg.length - msgLen));\n    mStar[msgLen] = 0x80;\n    impl.bcTagx1(auth, derivedKs, tweaks[0], mStar);\n  }\n\n  // Generate the tag.\n  let encNonce = new Uint8Array(blockSize);\n  encNonce.set(nonce, 1);\n  encNonce[0] = prefixTag << prefixShift;\n  impl.bcEncrypt(auth, derivedKs, encNonce, auth);\n\n  // Message encryption.\n  encNonce[0] = 0;\n  msgLen = msg.length;\n  let encBlks = new Uint8Array(2 * blockSize);\n  for (j = 0; msgLen >= 2 * blockSize; j += 2) {\n    encodeEncTweak(tweaks[0], auth, j);\n    encodeEncTweak(tweaks[1], auth, j + 1);\n    impl.bcKeystreamx2(encBlks, derivedKs, tweaks, encNonce);\n    xorBytes(dst.subarray(j * blockSize, (j + 2) * blockSize), msg.subarray(j * blockSize, (j + 2) * blockSize), encBlks, 2 * blockSize);\n    msgLen -= 2 * blockSize;\n  }\n  for (; msgLen >= blockSize; j++) {\n    encodeEncTweak(tweaks[0], auth, j);\n    impl.bcEncrypt(encBlks, derivedKs, tweaks[0], encNonce);\n    xorBytes(dst.subarray(j * blockSize, (j + 1) * blockSize), msg.subarray(j * blockSize, (j + 1) * blockSize), encBlks, blockSize);\n    msgLen -= blockSize;\n  }\n  if (msgLen > 0) {\n    encodeEncTweak(tweaks[0], auth, j);\n    impl.bcEncrypt(encBlks, derivedKs, tweaks[0], encNonce);\n    xorBytes(dst.subarray(j * blockSize, msg.length), msg.subarray(j * blockSize), encBlks, msgLen);\n  }\n\n  // Write the tag to the tail.\n  dst.set(auth, msg.length);\n}\n\n/**\n * @param {typeof implUnsafeVartime | typeof implCt32} impl\n * @param {Uint8Array[]} derivedKs\n * @param {Uint8Array} nonce\n * @param {Uint8Array} dst\n * @param {Uint8Array} ad\n * @param {Uint8Array} ct\n */\nfunction d(impl, derivedKs, nonce, dst, ad, ct) {\n  let ctLen = ct.length - TagSize;\n  const ciphertext = ct.subarray(0, ctLen);\n  const tag = ct.subarray(ctLen);\n\n  // Message decryption.\n  let j = 0;\n  let decTweaks = newTweaks();\n  let decNonce = new Uint8Array(blockSize);\n  decNonce.set(nonce, 1);\n  let decBlks = new Uint8Array(2 * blockSize);\n  for (j = 0; ctLen >= 2 * blockSize; j += 2) {\n    encodeEncTweak(decTweaks[0], tag, j);\n    encodeEncTweak(decTweaks[1], tag, j + 1);\n    impl.bcKeystreamx2(decBlks, derivedKs, decTweaks, decNonce);\n    xorBytes(dst.subarray(j * blockSize, (j + 2) * blockSize), ciphertext.subarray(j * blockSize, (j + 2) * blockSize), decBlks, 2 * blockSize);\n    ctLen -= 2 * blockSize;\n  }\n  for (; ctLen >= blockSize; j++) {\n    encodeEncTweak(decTweaks[0], tag, j);\n    impl.bcEncrypt(decBlks, derivedKs, decTweaks[0], decNonce);\n    xorBytes(dst.subarray(j * blockSize, (j + 1) * blockSize), ciphertext.subarray(j * blockSize, (j + 1) * blockSize), decBlks, blockSize);\n    ctLen -= blockSize;\n  }\n  if (ctLen > 0) {\n    encodeEncTweak(decTweaks[0], tag, j);\n    impl.bcEncrypt(decBlks, derivedKs, decTweaks[0], decNonce);\n    xorBytes(dst.subarray(j * blockSize), ciphertext.subarray(j * blockSize), decBlks, ctLen);\n  }\n\n  // Associated data.\n  let i = 0;\n  let adLen = ad.length;\n  let tweaks = newTweaks();\n  let auth = new Uint8Array(TagSize);\n  for (i = 0; adLen >= 2 * blockSize; i += 2) {\n    encodeTagTweak(tweaks[0], prefixADBlock, i);\n    encodeTagTweak(tweaks[1], prefixADBlock, i + 1);\n    impl.bcTagx2(auth, derivedKs, tweaks, ad.subarray(i * blockSize, (i + 2) * blockSize));\n    adLen -= 2 * blockSize;\n  }\n  for (; adLen >= blockSize; i++) {\n    encodeTagTweak(tweaks[0], prefixADBlock, i);\n    impl.bcTagx1(auth, derivedKs, tweaks[0], ad.subarray(i * blockSize, (i + 1) * blockSize));\n    adLen -= blockSize;\n  }\n  if (adLen > 0) {\n    encodeTagTweak(tweaks[0], prefixADFinal, i);\n    let aStar = new Uint8Array(blockSize);\n    aStar.set(ad.subarray(ad.length - adLen));\n    aStar[adLen] = 0x80;\n    impl.bcTagx1(auth, derivedKs, tweaks[0], aStar);\n  }\n\n  // Message authentication and tag generation.\n  let msgLen = dst.length;\n  for (j = 0; msgLen >= 2 * blockSize; j += 2) {\n    encodeTagTweak(tweaks[0], prefixMsgBlock, j);\n    encodeTagTweak(tweaks[1], prefixMsgBlock, j + 1);\n    impl.bcTagx2(auth, derivedKs, tweaks, dst.subarray(j * blockSize, (j + 2) * blockSize));\n    msgLen -= 2 * blockSize;\n  }\n  for (; msgLen >= blockSize; j++) {\n    encodeTagTweak(tweaks[0], prefixMsgBlock, j);\n    impl.bcTagx1(auth, derivedKs, tweaks[0], dst.subarray(j * blockSize, (j + 1) * blockSize));\n    msgLen -= blockSize;\n  }\n  if (msgLen > 0) {\n    encodeTagTweak(tweaks[0], prefixMsgFinal, j);\n    let mStar = new Uint8Array(blockSize);\n    mStar.set(dst.subarray(dst.length - msgLen));\n    mStar[msgLen] = 0x80;\n    impl.bcTagx1(auth, derivedKs, tweaks[0], mStar);\n  }\n  decNonce[0] = prefixTag << prefixShift;\n  impl.bcEncrypt(auth, derivedKs, decNonce, auth);\n\n  // crypto.timingSafeEqual is not implemented on typed arrays.\n  if (auth.length != tag.length) {\n    return false;\n  }\n  let eql = true;\n  for (i = 0; i < auth.length; i++) {\n    // @ts-expect-error TODO: should this return a boolean\n    eql &= !(auth[i] ^ tag[i]);\n  }\n  return eql;\n}\n\n// The AEAD implementation.\n//\n// As much as possible (as long as the key does not change), instances should\n// be reused as deriving the K contribution of the Sub-Tweak Key is relatively\n// expensive.\nclass AEAD {\n  /**\n   * @param {Uint8Array} key\n   * @param {boolean} useUnsafeVartime\n   */\n  constructor(key, useUnsafeVartime = false) {\n    if (key.length != KeySize) {\n      throw ErrKeySize;\n    }\n\n    /** @type {typeof implUnsafeVartime | typeof implCt32} */\n    this.impl = useUnsafeVartime ? implUnsafeVartime : implCt32;\n    this.derivedKs = newStks();\n    stkDeriveK(key, this.derivedKs);\n  }\n\n  /**\n   * @param {Uint8Array} nonce\n   * @param {Uint8Array | null} plaintext\n   * @param {Uint8Array | null} associatedData\n   */\n  encrypt(nonce, plaintext = null, associatedData = null) {\n    if (nonce.length != NonceSize) {\n      throw ErrNonceSize;\n    }\n    if (plaintext == null) {\n      plaintext = zeroBuffer;\n    }\n    if (associatedData == null) {\n      associatedData = zeroBuffer;\n    }\n    let dst = new Uint8Array(plaintext.length + TagSize);\n    e(this.impl, this.derivedKs, nonce, dst, associatedData, plaintext);\n    return dst;\n  }\n\n  /**\n   * @param {Uint8Array} nonce\n   * @param {Uint8Array} ciphertext\n   * @param {Uint8Array | null} associatedData\n   */\n  decrypt(nonce, ciphertext, associatedData = null) {\n    if (nonce.length != NonceSize) {\n      throw ErrNonceSize;\n    }\n    if (ciphertext.length < TagSize) {\n      throw ErrOpen;\n    }\n    if (associatedData == null) {\n      associatedData = zeroBuffer;\n    }\n    let dst = new Uint8Array(ciphertext.length - TagSize);\n    if (!d(this.impl, this.derivedKs, nonce, dst, associatedData, ciphertext)) {\n      dst.set(new Uint8Array(dst.length));\n      throw ErrOpen;\n    }\n    return dst;\n  }\n}\nconst zeroBuffer = new Uint8Array(0);\nconst ErrKeySize = 'deoxysii: invalid key size';\nconst ErrNonceSize = 'deoxysii: invalid nonce size';\nconst ErrOpen = 'deoxysii: message authentication failure';\nmodule.exports = {\n  KeySize: KeySize,\n  NonceSize: NonceSize,\n  TagSize: TagSize,\n  ErrNonceSize: ErrNonceSize,\n  ErrKeySize: ErrKeySize,\n  ErrOpen: ErrOpen,\n  AEAD: AEAD\n};","map":{"version":3,"names":["aes","require","uint32","unsafe","KeySize","NonceSize","TagSize","stkSize","rounds","blockSize","tweakSize","prefixADBlock","prefixADFinal","prefixMsgBlock","prefixMsgFinal","prefixTag","prefixShift","xorBytes","dst","a","b","n","i","rcons","Uint8Array","h","t","tmp","set","lfsr2","x","x7","x5","lfsr3","x0","x6","xorRC","stkDeriveK","key","derivedKs","tk2","subarray","tk3","deriveSubTweakKeys","stks","tweak","tk1","newStks","push","implCt32","bcEncrypt","ciphertext","plaintext","q","newQ","stk","load4xU32","addRoundKey","subBytes","shiftRows","mixColumns","store4xU32","bcKeystreamx2","tweaks","nonce","rkeyOrtho","load8xU32","store8xU32","bcTagx1","tag","tagView","DataView","buffer","tag0","getUint32","tag1","tag2","tag3","ortho","xor","setUint32","bcTagx2","implUnsafeVartime","plainView","s0","byteOffset","s1","s2","s3","stksView","aesencVartime","cipherView","encodeTagTweak","out","prefix","blockNr","encodeEncTweak","newTweaks","e","impl","ad","msg","j","adLen","length","auth","aStar","msgLen","mStar","encNonce","encBlks","d","ct","ctLen","decTweaks","decNonce","decBlks","eql","AEAD","constructor","useUnsafeVartime","ErrKeySize","encrypt","associatedData","ErrNonceSize","zeroBuffer","decrypt","ErrOpen","module","exports"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@oasisprotocol/deoxysii/deoxysii.js"],"sourcesContent":["// Copyright (c) 2019 Oasis Labs Inc. <info@oasislabs.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// @ts-expect-error TODO: missing types\nvar aes = require('bsaes');\nvar uint32 = require('uint32');\n// @ts-expect-error TODO: missing types\nvar unsafe = require('bsaes/unsafe');\n\nconst KeySize = 32;\nconst NonceSize = 15;\nconst TagSize = 16;\n\nconst stkSize = 16;\nconst rounds = 16;\nconst blockSize = 16;\nconst tweakSize = 16;\n\nconst prefixADBlock = 0x02;\nconst prefixADFinal = 0x06;\nconst prefixMsgBlock = 0x00;\nconst prefixMsgFinal = 0x04;\nconst prefixTag = 0x01;\nconst prefixShift = 4;\n\n/**\n * @param {Uint8Array} dst\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n * @param {number} n\n */\nfunction xorBytes(dst, a, b, n) {\n\tfor (let i = 0; i < n; i++) {\n\t\tdst[i] = a[i] ^ b[i];\n\t}\n}\n\n//\n// TWEAKEY routines\n//\n\nconst rcons = new Uint8Array([\n\t0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a,\n\t0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,\n\t0x72\n]);\n\n/**\n * @param {Uint8Array} t\n */\nfunction h(t) {\n\tconst tmp = new Uint8Array([\n\t\tt[1], t[6], t[11], t[12], t[5], t[10], t[15], t[0], t[9], t[14], t[3], t[4], t[13], t[2], t[7], t[8]\n\t]);\n\tt.set(tmp);\n}\n\n/**\n * @param {Uint8Array} t\n */\nfunction lfsr2(t) {\n\tfor (let i = 0; i < stkSize; i++) {\n\t\tconst x = t[i];\n\n\t\tconst x7 = x >> 7;\n\t\tconst x5 = (x >> 5) & 1;\n\t\tt[i] = (x << 1) | (x7 ^ x5);\n\t}\n}\n\n/**\n * @param {Uint8Array} t\n */\nfunction lfsr3(t) {\n\tfor (let i = 0; i < stkSize; i++) {\n\t\tconst x = t[i];\n\n\t\tconst x0 = x & 1;\n\t\tconst x6 = (x >> 6) & 1;\n\t\tt[i] = (x >> 1) | ((x0 ^ x6) << 7);\n\t}\n}\n\n/**\n * @param {Uint8Array} t\n * @param {number} i\n */\nfunction xorRC(t, i) {\n\tt[0] ^= 1;\n\tt[1] ^= 2;\n\tt[2] ^= 4;\n\tt[3] ^= 8;\n\tt[4] ^= rcons[i];\n\tt[5] ^= rcons[i];\n\tt[6] ^= rcons[i];\n\tt[7] ^= rcons[i];\n}\n\n/**\n * @param {Uint8Array} key\n * @param {Uint8Array[]} derivedKs\n */\nfunction stkDeriveK(key, derivedKs) {\n\tlet tk2 = key.subarray(16, 32);\n\tlet tk3\t= key.subarray(0, 16);\n\n\txorBytes(derivedKs[0], tk2, tk3, stkSize);\n\txorRC(derivedKs[0], 0);\n\n\tfor (let i = 1; i <= rounds; i++) {\n\t\tlfsr2(tk2);\n\t\th(tk2);\n\t\tlfsr3(tk3);\n\t\th(tk3);\n\n\t\txorBytes(derivedKs[i], tk2, tk3, stkSize);\n\t\txorRC(derivedKs[i], i);\n\t}\n}\n\n/**\n * @param {Uint8Array[]} stks\n * @param {Uint8Array[]} derivedKs\n * @param {Uint8Array} tweak\n */\nfunction deriveSubTweakKeys(stks, derivedKs, tweak) {\n\tlet tk1 = new Uint8Array(tweak);\n\n\txorBytes(stks[0], derivedKs[0], tk1, stkSize);\n\n\tfor (let i = 1; i <= rounds; i++) {\n\t\th(tk1);\n\t\txorBytes(stks[i], derivedKs[i], tk1, stkSize);\n\t}\n}\n\nfunction newStks() {\n\tlet stks = [];\n\tfor (let i = 0; i <= rounds; i++) {\n\t\tstks.push(new Uint8Array(16));\n\t}\n\treturn stks;\n}\n\n//\n// Deoxys-BC-384\n//\n\nclass implCt32 {\n\t/**\n\t * @param {Uint8Array} ciphertext\n\t * @param {Uint8Array[]} derivedKs\n\t * @param {Uint8Array} tweak\n\t * @param {Uint8Array} plaintext\n\t */\n\tstatic bcEncrypt(ciphertext, derivedKs, tweak, plaintext) {\n\t\tlet stks = newStks();\n\t\tderiveSubTweakKeys(stks, derivedKs, tweak);\n\n\t\tlet q = aes.newQ(), stk = aes.newQ();\n\t\taes.load4xU32(q, plaintext);\n\t\taes.load4xU32(stk, stks[0]);\n\t\taes.addRoundKey(q, stk);\n\n\t\tfor (let i = 1; i <= rounds; i++) {\n\t\t\taes.subBytes(q);\n\t\t\taes.shiftRows(q);\n\t\t\taes.mixColumns(q);\n\n\t\t\taes.load4xU32(stk, stks[i]);\n\t\t\taes.addRoundKey(q, stk);\n\t\t}\n\n\t\taes.store4xU32(ciphertext, q);\n\t}\n\n\t/**\n\t * @param {Uint8Array} ciphertext\n\t * @param {Uint8Array[]} derivedKs\n\t * @param {Uint8Array[]} tweaks\n\t * @param {Uint8Array} nonce\n\t */\n\tstatic bcKeystreamx2(ciphertext, derivedKs, tweaks, nonce) {\n\t\tlet stks = [ newStks(), newStks() ];\n\t\tfor (let i = 0; i < 2; i++) {\n\t\t\tderiveSubTweakKeys(stks[i], derivedKs, tweaks[i]);\n\t\t}\n\n\t\tlet q = aes.newQ(), stk = aes.newQ();\n\t\taes.rkeyOrtho(q, nonce);\n\t\taes.load8xU32(stk, stks[0][0], stks[1][0]);\n\t\taes.addRoundKey(q, stk);\n\n\t\tfor (let i = 1; i <= rounds; i++) {\n\t\t\taes.subBytes(q);\n\t\t\taes.shiftRows(q);\n\t\t\taes.mixColumns(q);\n\n\t\t\taes.load8xU32(stk, stks[0][i], stks[1][i]);\n\t\t\taes.addRoundKey(q, stk);\n\t\t}\n\t\taes.store8xU32(ciphertext.subarray(0, 16), ciphertext.subarray(16, 32), q);\n\t}\n\t/**\n\t * @param {Uint8Array} tag\n\t * @param {Uint8Array[]} derivedKs\n\t * @param {Uint8Array} tweak\n\t * @param {Uint8Array} plaintext\n\t */\n\tstatic bcTagx1(tag, derivedKs, tweak, plaintext) {\n\t\tlet stks = newStks();\n\t\tderiveSubTweakKeys(stks, derivedKs, tweak);\n\n\t\tlet q = aes.newQ(), stk = aes.newQ();\n\t\taes.load4xU32(q, plaintext);\n\t\taes.load4xU32(stk, stks[0]);\n\t\taes.addRoundKey(q, stk);\n\n\t\tfor (let i = 1; i <= rounds; i++) {\n\t\t\taes.subBytes(q);\n\t\t\taes.shiftRows(q);\n\t\t\taes.mixColumns(q);\n\n\t\t\taes.load4xU32(stk, stks[i]);\n\t\t\taes.addRoundKey(q, stk);\n\t\t}\n\n\t\tconst tagView = new DataView(tag.buffer);\n\t\tlet tag0 = tagView.getUint32(0, true);\n\t\tlet tag1 = tagView.getUint32(4, true);\n\t\tlet tag2 = tagView.getUint32(8, true);\n\t\tlet tag3 = tagView.getUint32(12, true);\n\n\t\taes.ortho(q);\n\t\ttag0 = uint32.xor(tag0, q[0]);\n\t\ttag1 = uint32.xor(tag1, q[2]);\n\t\ttag2 = uint32.xor(tag2, q[4]);\n\t\ttag3 = uint32.xor(tag3, q[6]);\n\n\t\ttagView.setUint32(0, tag0, true);\n\t\ttagView.setUint32(4, tag1, true);\n\t\ttagView.setUint32(8, tag2, true);\n\t\ttagView.setUint32(12, tag3, true);\n\t}\n\n\t/**\n\t * @param {Uint8Array} tag\n\t * @param {Uint8Array[]} derivedKs\n\t * @param {Uint8Array[]} tweaks\n\t * @param {Uint8Array} plaintext\n\t */\n\tstatic bcTagx2(tag, derivedKs, tweaks, plaintext) {\n\t\tlet stks = [ newStks(), newStks() ];\n\t\tfor (let i = 0; i < 2; i++) {\n\t\t\tderiveSubTweakKeys(stks[i], derivedKs, tweaks[i]);\n\t\t}\n\n\t\tlet q = aes.newQ(), stk = aes.newQ();\n\t\taes.load8xU32(q, plaintext.subarray(0, 16), plaintext.subarray(16, 32));\n\t\taes.load8xU32(stk, stks[0][0], stks[1][0]);\n\t\taes.addRoundKey(q, stk);\n\n\t\tfor (let i = 1; i <= rounds; i++) {\n\t\t\taes.subBytes(q);\n\t\t\taes.shiftRows(q);\n\t\t\taes.mixColumns(q);\n\n\t\t\taes.load8xU32(stk, stks[0][i], stks[1][i]);\n\t\t\taes.addRoundKey(q, stk);\n\t\t}\n\n\t\tconst tagView = new DataView(tag.buffer);\n\t\tlet tag0 = tagView.getUint32(0, true);\n\t\tlet tag1 = tagView.getUint32(4, true);\n\t\tlet tag2 = tagView.getUint32(8, true);\n\t\tlet tag3 = tagView.getUint32(12, true);\n\n\t\taes.ortho(q);\n\t\ttag0 = uint32.xor(tag0, q[0], q[1]);\n\t\ttag1 = uint32.xor(tag1, q[2], q[3]);\n\t\ttag2 = uint32.xor(tag2, q[4], q[5]);\n\t\ttag3 = uint32.xor(tag3, q[6], q[7]);\n\n\t\ttagView.setUint32(0, tag0, true);\n\t\ttagView.setUint32(4, tag1, true);\n\t\ttagView.setUint32(8, tag2, true);\n\t\ttagView.setUint32(12, tag3, true);\n\t}\n}\n\nclass implUnsafeVartime {\n\t/**\n\t * @param {Uint8Array} ciphertext\n\t * @param {Uint8Array[]} derivedKs\n\t * @param {Uint8Array} tweak\n\t * @param {Uint8Array} plaintext\n\t */\n\tstatic bcEncrypt(ciphertext, derivedKs, tweak, plaintext) {\n\t\tlet stks = newStks();\n\t\tderiveSubTweakKeys(stks, derivedKs, tweak);\n\n\t\tconst plainView = new DataView(plaintext.buffer);\n\t\tlet s0 = plainView.getUint32(0 + plaintext.byteOffset, false);\n\t\tlet s1 = plainView.getUint32(4 + plaintext.byteOffset, false);\n\t\tlet s2 = plainView.getUint32(8 + plaintext.byteOffset, false);\n\t\tlet s3 = plainView.getUint32(12 + plaintext.byteOffset, false);\n\n\n\t\tconst stksView = new DataView(stks[0].buffer);\n\t\ts0 = uint32.xor(s0, stksView.getUint32(0 + stks[0].byteOffset, false));\n\t\ts1 = uint32.xor(s1, stksView.getUint32(4 + stks[0].byteOffset, false));\n\t\ts2 = uint32.xor(s2, stksView.getUint32(8 + stks[0].byteOffset, false));\n\t\ts3 = uint32.xor(s3, stksView.getUint32(12 + stks[0].byteOffset, false));\n\n\t\tfor (let i = 1; i <= rounds; i++) {\n\t\t\t[s0, s1, s2, s3] = unsafe.aesencVartime(s0, s1, s2, s3, stks[i]);\n\t\t}\n\n\t\tconst cipherView = new DataView(ciphertext.buffer);\n\t\tcipherView.setUint32(0 + ciphertext.byteOffset, s0, false);\n\t\tcipherView.setUint32(4 + ciphertext.byteOffset, s1, false);\n\t\tcipherView.setUint32(8 + ciphertext.byteOffset, s2, false);\n\t\tcipherView.setUint32(12 + ciphertext.byteOffset, s3, false);\n\t}\n\t/**\n\t * @param {Uint8Array} ciphertext\n\t * @param {Uint8Array[]} derivedKs\n\t * @param {Uint8Array[]} tweaks\n\t * @param {Uint8Array} nonce\n\t */\n\tstatic bcKeystreamx2(ciphertext, derivedKs, tweaks, nonce) {\n\t\tthis.bcEncrypt(ciphertext.subarray(0, 16), derivedKs, tweaks[0], nonce);\n\t\tthis.bcEncrypt(ciphertext.subarray(16, 32), derivedKs, tweaks[1], nonce);\n\t}\n\t/**\n\t * @param {Uint8Array} tag\n\t * @param {Uint8Array[]} derivedKs\n\t * @param {Uint8Array} tweak\n\t * @param {Uint8Array} plaintext\n\t */\n\tstatic bcTagx1(tag, derivedKs, tweak, plaintext) {\n\t\tlet tmp = new Uint8Array(blockSize);\n\t\tthis.bcEncrypt(tmp, derivedKs, tweak, plaintext);\n\t\txorBytes(tag, tag, tmp, blockSize);\n\t}\n\t/**\n * @param {Uint8Array} tag\n * @param {Uint8Array[]} derivedKs\n * @param {Uint8Array[]} tweaks\n * @param {Uint8Array} plaintext\n */\n\tstatic bcTagx2(tag, derivedKs, tweaks, plaintext) {\n\t\tlet tmp = new Uint8Array(2*blockSize);\n\t\tthis.bcEncrypt(tmp.subarray(0, 16), derivedKs, tweaks[0], plaintext.subarray(0, 16));\n\t\tthis.bcEncrypt(tmp.subarray(16, 32), derivedKs, tweaks[1], plaintext.subarray(16, 32));\n\t\txorBytes(tag, tag, tmp.subarray(0, 16), blockSize);\n\t\txorBytes(tag, tag, tmp.subarray(16, 32), blockSize);\n\t}\n}\n\n//\n// Put it all together\n//\n\n/**\n * @param {Uint8Array} out\n * @param {number} prefix\n * @param {number} blockNr\n */\nfunction encodeTagTweak(out, prefix, blockNr) {\n\tout.set(new Uint8Array(12));\n\tnew DataView(out.buffer).setUint32(12 + out.byteOffset, blockNr, false);\n\tout[0] = prefix << prefixShift;\n}\n\n/**\n * @param {Uint8Array} out\n * @param {Uint8Array} tag\n * @param {number} blockNr\n */\nfunction encodeEncTweak(out, tag, blockNr) {\n\tvar tmp = new Uint8Array(4);\n\tnew DataView(tmp.buffer).setUint32(0, blockNr, false);\n\n\tout.set(tag)\n\tout[0] |= 0x80;\n\n\txorBytes(out.subarray(12, 16), out.subarray(12, 16), tmp, 4);\n}\n\nfunction newTweaks() {\n\tlet tweaks = [];\n\tfor (let i = 0; i < 2; i++) {\n\t\ttweaks.push(new Uint8Array(tweakSize));\n\t}\n\treturn tweaks;\n}\n\n/**\n * @param {typeof implUnsafeVartime | typeof implCt32} impl\n * @param {Uint8Array[]} derivedKs\n * @param {Uint8Array} nonce\n * @param {Uint8Array} dst\n * @param {Uint8Array} ad\n * @param {Uint8Array} msg\n */\nfunction e(impl, derivedKs, nonce, dst, ad, msg) {\n\tlet tweaks = newTweaks();\n\tlet i = 0, j = 0;\n\n\t// Associated data.\n\tlet adLen = ad.length;\n\tlet auth = new Uint8Array(TagSize);\n\tfor (i = 0; adLen >= 2*blockSize; i += 2) {\n\t\tencodeTagTweak(tweaks[0], prefixADBlock, i);\n\t\tencodeTagTweak(tweaks[1], prefixADBlock, i+1);\n\t\timpl.bcTagx2(auth, derivedKs, tweaks, ad.subarray(i*blockSize, (i+2)*blockSize));\n\n\t\tadLen -= 2*blockSize;\n\t}\n\tfor (; adLen >= blockSize; i++) {\n\t\tencodeTagTweak(tweaks[0], prefixADBlock, i)\n\t\timpl.bcTagx1(auth, derivedKs, tweaks[0], ad.subarray(i*blockSize, (i+1)*blockSize));\n\n\t\tadLen -= blockSize;\n\t}\n\tif (adLen > 0) {\n\t\tencodeTagTweak(tweaks[0], prefixADFinal, i);\n\n\t\tlet aStar = new Uint8Array(blockSize);\n\t\taStar.set(ad.subarray(ad.length - adLen));\n\t\taStar[adLen] = 0x80;\n\n\t\timpl.bcTagx1(auth, derivedKs, tweaks[0], aStar);\n\t}\n\n\t// Message authentication and tag generation.\n\tlet msgLen = msg.length;\n\tfor (j = 0; msgLen >= 2*blockSize; j += 2) {\n\t\tencodeTagTweak(tweaks[0], prefixMsgBlock, j);\n\t\tencodeTagTweak(tweaks[1], prefixMsgBlock, j+1);\n\t\timpl.bcTagx2(auth, derivedKs, tweaks, msg.subarray(j*blockSize, (j+2)*blockSize));\n\n\t\tmsgLen -= 2*blockSize;\n\t}\n\tfor (; msgLen >= blockSize; j++) {\n\t\tencodeTagTweak(tweaks[0], prefixMsgBlock, j);\n\t\timpl.bcTagx1(auth, derivedKs, tweaks[0], msg.subarray(j*blockSize, (j+1)*blockSize));\n\n\t\tmsgLen -= blockSize;\n\t}\n\tif (msgLen > 0) {\n\t\tencodeTagTweak(tweaks[0], prefixMsgFinal, j);\n\n\t\tlet mStar = new Uint8Array(blockSize);\n\t\tmStar.set(msg.subarray(msg.length - msgLen));\n\t\tmStar[msgLen] = 0x80;\n\n\t\timpl.bcTagx1(auth, derivedKs, tweaks[0], mStar);\n\t}\n\n\t// Generate the tag.\n\tlet encNonce = new Uint8Array(blockSize);\n\tencNonce.set(nonce, 1);\n\tencNonce[0] = prefixTag << prefixShift;\n\timpl.bcEncrypt(auth, derivedKs, encNonce, auth);\n\n\t// Message encryption.\n\tencNonce[0] = 0;\n\tmsgLen = msg.length;\n\tlet encBlks = new Uint8Array(2*blockSize);\n\tfor (j = 0; msgLen >= 2*blockSize; j += 2) {\n\t\tencodeEncTweak(tweaks[0], auth, j);\n\t\tencodeEncTweak(tweaks[1], auth, j+1);\n\n\t\timpl.bcKeystreamx2(encBlks, derivedKs, tweaks, encNonce);\n\t\txorBytes(dst.subarray(j*blockSize, (j+2)*blockSize), msg.subarray(j*blockSize, (j+2)*blockSize), encBlks, 2*blockSize);\n\n\t\tmsgLen -= 2*blockSize;\n\t}\n\tfor (; msgLen >= blockSize; j++) {\n\t\tencodeEncTweak(tweaks[0], auth, j);\n\t\timpl.bcEncrypt(encBlks, derivedKs, tweaks[0], encNonce);\n\t\txorBytes(dst.subarray(j*blockSize, (j+1)*blockSize), msg.subarray(j*blockSize, (j+1)*blockSize), encBlks, blockSize);\n\n\t\tmsgLen -= blockSize;\n\t}\n\tif (msgLen > 0) {\n\t\tencodeEncTweak(tweaks[0], auth, j);\n\n\t\timpl.bcEncrypt(encBlks, derivedKs, tweaks[0], encNonce);\n\t\txorBytes(dst.subarray(j*blockSize, msg.length), msg.subarray(j*blockSize), encBlks, msgLen);\n\t}\n\n\t// Write the tag to the tail.\n\tdst.set(auth, msg.length);\n}\n\n/**\n * @param {typeof implUnsafeVartime | typeof implCt32} impl\n * @param {Uint8Array[]} derivedKs\n * @param {Uint8Array} nonce\n * @param {Uint8Array} dst\n * @param {Uint8Array} ad\n * @param {Uint8Array} ct\n */\nfunction d(impl, derivedKs, nonce, dst, ad, ct) {\n\tlet ctLen = ct.length - TagSize;\n\tconst ciphertext = ct.subarray(0, ctLen);\n\tconst tag = ct.subarray(ctLen);\n\n\t// Message decryption.\n\tlet j = 0;\n\tlet decTweaks = newTweaks();\n\tlet decNonce = new Uint8Array(blockSize);\n\tdecNonce.set(nonce, 1);\n\tlet decBlks = new Uint8Array(2*blockSize);\n\tfor (j = 0; ctLen >= 2*blockSize; j+=2) {\n\t\tencodeEncTweak(decTweaks[0], tag, j);\n\t\tencodeEncTweak(decTweaks[1], tag, j+1);\n\n\t\timpl.bcKeystreamx2(decBlks, derivedKs, decTweaks, decNonce);\n\t\txorBytes(dst.subarray(j*blockSize, (j+2)*blockSize), ciphertext.subarray(j*blockSize, (j+2)*blockSize), decBlks, 2*blockSize);\n\n\t\tctLen -= 2*blockSize;\n\t}\n\tfor (; ctLen >= blockSize; j++) {\n\t\tencodeEncTweak(decTweaks[0], tag, j);\n\n\t\timpl.bcEncrypt(decBlks, derivedKs, decTweaks[0], decNonce);\n\t\txorBytes(dst.subarray(j*blockSize, (j+1)*blockSize), ciphertext.subarray(j*blockSize, (j+1)*blockSize), decBlks, blockSize);\n\n\t\tctLen -= blockSize;\n\t}\n\tif (ctLen > 0) {\n\t\tencodeEncTweak(decTweaks[0], tag, j);\n\n\t\timpl.bcEncrypt(decBlks, derivedKs, decTweaks[0], decNonce);\n\t\txorBytes(dst.subarray(j*blockSize), ciphertext.subarray(j*blockSize), decBlks, ctLen);\n\t}\n\n\t// Associated data.\n\tlet i = 0;\n\tlet adLen = ad.length;\n\tlet tweaks = newTweaks();\n\tlet auth = new Uint8Array(TagSize);\n\tfor (i = 0; adLen >= 2*blockSize; i += 2) {\n\t\tencodeTagTweak(tweaks[0], prefixADBlock, i);\n\t\tencodeTagTweak(tweaks[1], prefixADBlock, i+1);\n\t\timpl.bcTagx2(auth, derivedKs, tweaks, ad.subarray(i*blockSize, (i+2)*blockSize));\n\n\t\tadLen -= 2*blockSize;\n\t}\n\tfor (; adLen >= blockSize; i++) {\n\t\tencodeTagTweak(tweaks[0], prefixADBlock, i)\n\t\timpl.bcTagx1(auth, derivedKs, tweaks[0], ad.subarray(i*blockSize, (i+1)*blockSize));\n\n\t\tadLen -= blockSize;\n\t}\n\tif (adLen > 0) {\n\t\tencodeTagTweak(tweaks[0], prefixADFinal, i);\n\n\t\tlet aStar = new Uint8Array(blockSize);\n\n\t\taStar.set(ad.subarray(ad.length - adLen));\n\t\taStar[adLen] = 0x80;\n\n\t\timpl.bcTagx1(auth, derivedKs, tweaks[0], aStar);\n\t}\n\n\t// Message authentication and tag generation.\n\tlet msgLen = dst.length;\n\tfor (j = 0; msgLen >= 2*blockSize; j += 2) {\n\t\tencodeTagTweak(tweaks[0], prefixMsgBlock, j);\n\t\tencodeTagTweak(tweaks[1], prefixMsgBlock, j+1);\n\t\timpl.bcTagx2(auth, derivedKs, tweaks, dst.subarray(j*blockSize, (j+2)*blockSize));\n\n\t\tmsgLen -= 2*blockSize;\n\t}\n\tfor (; msgLen >= blockSize; j++) {\n\t\tencodeTagTweak(tweaks[0], prefixMsgBlock, j);\n\t\timpl.bcTagx1(auth, derivedKs, tweaks[0], dst.subarray(j*blockSize, (j+1)*blockSize));\n\n\t\tmsgLen -= blockSize;\n\t}\n\tif (msgLen > 0) {\n\t\tencodeTagTweak(tweaks[0], prefixMsgFinal, j);\n\n\t\tlet mStar = new Uint8Array(blockSize);\n\t\tmStar.set(dst.subarray(dst.length - msgLen));\n\t\tmStar[msgLen] = 0x80;\n\n\t\timpl.bcTagx1(auth, derivedKs, tweaks[0], mStar);\n\t}\n\n\tdecNonce[0] = prefixTag << prefixShift;\n\timpl.bcEncrypt(auth, derivedKs, decNonce, auth);\n\n\t// crypto.timingSafeEqual is not implemented on typed arrays.\n\tif (auth.length != tag.length) {\n\t\treturn false;\n\t}\n\tlet eql = true;\n\tfor (i = 0; i < auth.length; i++) {\n\t\t// @ts-expect-error TODO: should this return a boolean\n\t\teql &= !(auth[i] ^ tag[i]);\n\t}\n\n\treturn eql;\n}\n\n// The AEAD implementation.\n//\n// As much as possible (as long as the key does not change), instances should\n// be reused as deriving the K contribution of the Sub-Tweak Key is relatively\n// expensive.\nclass AEAD {\n\t/**\n\t * @param {Uint8Array} key\n\t * @param {boolean} useUnsafeVartime\n\t */\n\tconstructor(key, useUnsafeVartime = false) {\n\t\tif (key.length != KeySize) {\n\t\t\tthrow ErrKeySize;\n\t\t}\n\n\t\t/** @type {typeof implUnsafeVartime | typeof implCt32} */\n\t\tthis.impl = useUnsafeVartime ? implUnsafeVartime : implCt32\n\t\tthis.derivedKs = newStks();\n\t\tstkDeriveK(key, this.derivedKs);\n\t}\n\n\t/**\n\t * @param {Uint8Array} nonce\n\t * @param {Uint8Array | null} plaintext\n\t * @param {Uint8Array | null} associatedData\n\t */\n\tencrypt(nonce, plaintext = null, associatedData = null) {\n\t\tif (nonce.length != NonceSize) {\n\t\t\tthrow ErrNonceSize;\n\t\t}\n\n\t\tif (plaintext == null) {\n\t\t\tplaintext = zeroBuffer;\n\t\t}\n\t\tif (associatedData == null) {\n\t\t\tassociatedData = zeroBuffer;\n\t\t}\n\n\t\tlet dst = new Uint8Array(plaintext.length + TagSize);\n\t\te(this.impl, this.derivedKs, nonce, dst, associatedData, plaintext);\n\n\t\treturn dst;\n\t}\n\n\t/**\n\t * @param {Uint8Array} nonce\n\t * @param {Uint8Array} ciphertext\n\t * @param {Uint8Array | null} associatedData\n\t */\n\tdecrypt(nonce, ciphertext, associatedData = null) {\n\t\tif (nonce.length != NonceSize) {\n\t\t\tthrow ErrNonceSize;\n\t\t}\n\t\tif (ciphertext.length < TagSize) {\n\t\t\tthrow ErrOpen;\n\t\t}\n\n\t\tif (associatedData == null) {\n\t\t\tassociatedData = zeroBuffer;\n\t\t}\n\n\t\tlet dst = new Uint8Array(ciphertext.length - TagSize);\n\t\tif (!d(this.impl, this.derivedKs, nonce, dst, associatedData, ciphertext)) {\n\t\t\tdst.set(new Uint8Array(dst.length));\n\t\t\tthrow ErrOpen;\n\t\t}\n\n\t\treturn dst;\n\t}\n}\n\nconst zeroBuffer = new Uint8Array(0);\n\nconst ErrKeySize = 'deoxysii: invalid key size';\nconst ErrNonceSize = 'deoxysii: invalid nonce size';\nconst ErrOpen = 'deoxysii: message authentication failure'\n\nmodule.exports = {\n\tKeySize: KeySize,\n\tNonceSize: NonceSize,\n\tTagSize: TagSize,\n\n\tErrNonceSize: ErrNonceSize,\n\tErrKeySize: ErrKeySize,\n\tErrOpen: ErrOpen,\n\n\tAEAD: AEAD,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}