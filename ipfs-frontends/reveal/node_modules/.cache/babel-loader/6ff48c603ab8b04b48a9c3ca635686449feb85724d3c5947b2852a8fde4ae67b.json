{"ast":null,"code":"// Copyright (c) 2016 Thomas Pornin <pornin@bolet.org>\n// Copyright (c) 2017 Yawning Angel <yawning at schwanenlied dot me>\n// Copyright (c) 2019 Oasis Labs Inc. <info@oasislabs.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar uint32 = require('uint32');\nconst rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];\nconst oddsMask = uint32.fromBytesBigEndian(0x55, 0x55, 0x55, 0x55);\nconst evensMask = uint32.fromBytesBigEndian(0xaa, 0xaa, 0xaa, 0xaa);\nconst cl4 = uint32.fromBytesBigEndian(0x33, 0x33, 0x33, 0x33);\nconst ch4 = uint32.fromBytesBigEndian(0xcc, 0xcc, 0xcc, 0xcc);\nconst cl8 = uint32.fromBytesBigEndian(0x0f, 0x0f, 0x0f, 0x0f);\nconst ch8 = uint32.fromBytesBigEndian(0xf0, 0xf0, 0xf0, 0xf0);\nconst shiftRowsMask0 = uint32.fromBytesBigEndian(0x00, 0x00, 0x00, 0xff);\nconst shiftRowsMask1 = uint32.fromBytesBigEndian(0x00, 0x00, 0xfc, 0x00);\nconst shiftRowsMask2 = uint32.fromBytesBigEndian(0x00, 0x00, 0x03, 0x00);\nconst shiftRowsMask3 = uint32.fromBytesBigEndian(0x00, 0xf0, 0x00, 0x00);\nconst shiftRowsMask4 = uint32.fromBytesBigEndian(0x00, 0x0f, 0x00, 0x00);\nconst shiftRowsMask5 = uint32.fromBytesBigEndian(0xc0, 0x00, 0x00, 0x00);\nconst shiftRowsMask6 = uint32.fromBytesBigEndian(0x3f, 0x00, 0x00, 0x00);\nfunction newQ() {\n  return new Uint32Array(8); // q\n}\n\n// AddRoundKey\nfunction addRoundKey(q, sk) {\n  q[0] = uint32.xor(q[0], sk[0]);\n  q[1] = uint32.xor(q[1], sk[1]);\n  q[2] = uint32.xor(q[2], sk[2]);\n  q[3] = uint32.xor(q[3], sk[3]);\n  q[4] = uint32.xor(q[4], sk[4]);\n  q[5] = uint32.xor(q[5], sk[5]);\n  q[6] = uint32.xor(q[6], sk[6]);\n  q[7] = uint32.xor(q[7], sk[7]);\n}\n\n// SubBytes\nfunction subBytes(q) {\n  // This S-box implementation is a straightforward translation of\n  // the circuit described by Boyar and Peralta in \"A new\n  // combinational logic minimization technique with applications\n  // to cryptology\" (https://eprint.iacr.org/2009/191.pdf).\n  //\n  // Note that variables x* (input) and s* (output) are numbered\n  // in \"reverse\" order (x0 is the high bit, x7 is the low bit).\n\n  const x0 = q[7];\n  const x1 = q[6];\n  const x2 = q[5];\n  const x3 = q[4];\n  const x4 = q[3];\n  const x5 = q[2];\n  const x6 = q[1];\n  const x7 = q[0];\n\n  //\n  // Top linear transformation.\n  //\n  const y14 = uint32.xor(x3, x5);\n  const y13 = uint32.xor(x0, x6);\n  const y9 = uint32.xor(x0, x3);\n  const y8 = uint32.xor(x0, x5);\n  const t0 = uint32.xor(x1, x2);\n  const y1 = uint32.xor(t0, x7);\n  const y4 = uint32.xor(y1, x3);\n  const y12 = uint32.xor(y13, y14);\n  const y2 = uint32.xor(y1, x0);\n  const y5 = uint32.xor(y1, x6);\n  const y3 = uint32.xor(y5, y8);\n  const t1 = uint32.xor(x4, y12);\n  const y15 = uint32.xor(t1, x5);\n  const y20 = uint32.xor(t1, x1);\n  const y6 = uint32.xor(y15, x7);\n  const y10 = uint32.xor(y15, t0);\n  const y11 = uint32.xor(y20, y9);\n  const y7 = uint32.xor(x7, y11);\n  const y17 = uint32.xor(y10, y11);\n  const y19 = uint32.xor(y10, y8);\n  const y16 = uint32.xor(t0, y11);\n  const y21 = uint32.xor(y13, y16);\n  const y18 = uint32.xor(x0, y16);\n\n  //\n  // Non-linear section.\n  //\n  const t2 = uint32.and(y12, y15);\n  const t3 = uint32.and(y3, y6);\n  const t4 = uint32.xor(t3, t2);\n  const t5 = uint32.and(y4, x7);\n  const t6 = uint32.xor(t5, t2);\n  const t7 = uint32.and(y13, y16);\n  const t8 = uint32.and(y5, y1);\n  const t9 = uint32.xor(t8, t7);\n  const t10 = uint32.and(y2, y7);\n  const t11 = uint32.xor(t10, t7);\n  const t12 = uint32.and(y9, y11);\n  const t13 = uint32.and(y14, y17);\n  const t14 = uint32.xor(t13, t12);\n  const t15 = uint32.and(y8, y10);\n  const t16 = uint32.xor(t15, t12);\n  const t17 = uint32.xor(t4, t14);\n  const t18 = uint32.xor(t6, t16);\n  const t19 = uint32.xor(t9, t14);\n  const t20 = uint32.xor(t11, t16);\n  const t21 = uint32.xor(t17, y20);\n  const t22 = uint32.xor(t18, y19);\n  const t23 = uint32.xor(t19, y21);\n  const t24 = uint32.xor(t20, y18);\n  const t25 = uint32.xor(t21, t22);\n  const t26 = uint32.and(t21, t23);\n  const t27 = uint32.xor(t24, t26);\n  const t28 = uint32.and(t25, t27);\n  const t29 = uint32.xor(t28, t22);\n  const t30 = uint32.xor(t23, t24);\n  const t31 = uint32.xor(t22, t26);\n  const t32 = uint32.and(t31, t30);\n  const t33 = uint32.xor(t32, t24);\n  const t34 = uint32.xor(t23, t33);\n  const t35 = uint32.xor(t27, t33);\n  const t36 = uint32.and(t24, t35);\n  const t37 = uint32.xor(t36, t34);\n  const t38 = uint32.xor(t27, t36);\n  const t39 = uint32.and(t29, t38);\n  const t40 = uint32.xor(t25, t39);\n  const t41 = uint32.xor(t40, t37);\n  const t42 = uint32.xor(t29, t33);\n  const t43 = uint32.xor(t29, t40);\n  const t44 = uint32.xor(t33, t37);\n  const t45 = uint32.xor(t42, t41);\n  const z0 = uint32.and(t44, y15);\n  const z1 = uint32.and(t37, y6);\n  const z2 = uint32.and(t33, x7);\n  const z3 = uint32.and(t43, y16);\n  const z4 = uint32.and(t40, y1);\n  const z5 = uint32.and(t29, y7);\n  const z6 = uint32.and(t42, y11);\n  const z7 = uint32.and(t45, y17);\n  const z8 = uint32.and(t41, y10);\n  const z9 = uint32.and(t44, y12);\n  const z10 = uint32.and(t37, y3);\n  const z11 = uint32.and(t33, y4);\n  const z12 = uint32.and(t43, y13);\n  const z13 = uint32.and(t40, y5);\n  const z14 = uint32.and(t29, y2);\n  const z15 = uint32.and(t42, y9);\n  const z16 = uint32.and(t45, y14);\n  const z17 = uint32.and(t41, y8);\n\n  //\n  // Bottom linear transformation.\n  //\n  const t46 = uint32.xor(z15, z16);\n  const t47 = uint32.xor(z10, z11);\n  const t48 = uint32.xor(z5, z13);\n  const t49 = uint32.xor(z9, z10);\n  const t50 = uint32.xor(z2, z12);\n  const t51 = uint32.xor(z2, z5);\n  const t52 = uint32.xor(z7, z8);\n  const t53 = uint32.xor(z0, z3);\n  const t54 = uint32.xor(z6, z7);\n  const t55 = uint32.xor(z16, z17);\n  const t56 = uint32.xor(z12, t48);\n  const t57 = uint32.xor(t50, t53);\n  const t58 = uint32.xor(z4, t46);\n  const t59 = uint32.xor(z3, t54);\n  const t60 = uint32.xor(t46, t57);\n  const t61 = uint32.xor(z14, t57);\n  const t62 = uint32.xor(t52, t58);\n  const t63 = uint32.xor(t49, t58);\n  const t64 = uint32.xor(z4, t59);\n  const t65 = uint32.xor(t61, t62);\n  const t66 = uint32.xor(z1, t63);\n  const s0 = uint32.xor(t59, t63);\n  const s6 = uint32.xor(t56, uint32.not(t62));\n  const s7 = uint32.xor(t48, uint32.not(t60));\n  const t67 = uint32.xor(t64, t65);\n  const s3 = uint32.xor(t53, t66);\n  const s4 = uint32.xor(t51, t66);\n  const s5 = uint32.xor(t47, t65);\n  const s1 = uint32.xor(t64, uint32.not(s3));\n  const s2 = uint32.xor(t55, uint32.not(t67));\n  q[7] = s0;\n  q[6] = s1;\n  q[5] = s2;\n  q[4] = s3;\n  q[3] = s4;\n  q[2] = s5;\n  q[1] = s6;\n  q[0] = s7;\n}\n\n// ShiftRows\nfunction shiftRows(q) {\n  for (let i = 0; i < 8; i++) {\n    const x = q[i];\n    q[i] = uint32.or(uint32.and(x, shiftRowsMask0), uint32.shiftRight(uint32.and(x, shiftRowsMask1), 2), uint32.shiftLeft(uint32.and(x, shiftRowsMask2), 6), uint32.shiftRight(uint32.and(x, shiftRowsMask3), 4), uint32.shiftLeft(uint32.and(x, shiftRowsMask4), 4), uint32.shiftRight(uint32.and(x, shiftRowsMask5), 6), uint32.shiftLeft(uint32.and(x, shiftRowsMask6), 2));\n  }\n}\n\n// MixColumns\nfunction mixColumns(q) {\n  const q0 = q[0];\n  const q1 = q[1];\n  const q2 = q[2];\n  const q3 = q[3];\n  const q4 = q[4];\n  const q5 = q[5];\n  const q6 = q[6];\n  const q7 = q[7];\n  const r0 = uint32.or(uint32.shiftRight(q0, 8), uint32.shiftLeft(q0, 24));\n  const r1 = uint32.or(uint32.shiftRight(q1, 8), uint32.shiftLeft(q1, 24));\n  const r2 = uint32.or(uint32.shiftRight(q2, 8), uint32.shiftLeft(q2, 24));\n  const r3 = uint32.or(uint32.shiftRight(q3, 8), uint32.shiftLeft(q3, 24));\n  const r4 = uint32.or(uint32.shiftRight(q4, 8), uint32.shiftLeft(q4, 24));\n  const r5 = uint32.or(uint32.shiftRight(q5, 8), uint32.shiftLeft(q5, 24));\n  const r6 = uint32.or(uint32.shiftRight(q6, 8), uint32.shiftLeft(q6, 24));\n  const r7 = uint32.or(uint32.shiftRight(q7, 8), uint32.shiftLeft(q7, 24));\n  q[0] = uint32.xor(q7, r7, r0, uint32.rotateRight(uint32.xor(q0, r0), 16));\n  q[1] = uint32.xor(q0, r0, q7, r7, r1, uint32.rotateRight(uint32.xor(q1, r1), 16));\n  q[2] = uint32.xor(q1, r1, r2, uint32.rotateRight(uint32.xor(q2, r2), 16));\n  q[3] = uint32.xor(q2, r2, q7, r7, r3, uint32.rotateRight(uint32.xor(q3, r3), 16));\n  q[4] = uint32.xor(q3, r3, q7, r7, r4, uint32.rotateRight(uint32.xor(q4, r4), 16));\n  q[5] = uint32.xor(q4, r4, r5, uint32.rotateRight(uint32.xor(q5, r5), 16));\n  q[6] = uint32.xor(q5, r5, r6, uint32.rotateRight(uint32.xor(q6, r6), 16));\n  q[7] = uint32.xor(q6, r6, r7, uint32.rotateRight(uint32.xor(q7, r7), 16));\n}\nfunction load4xU32(q, src) {\n  const srcView = new DataView(src.buffer);\n  q[0] = srcView.getUint32(0 + src.byteOffset, true);\n  q[2] = srcView.getUint32(4 + src.byteOffset, true);\n  q[4] = srcView.getUint32(8 + src.byteOffset, true);\n  q[6] = srcView.getUint32(12 + src.byteOffset, true);\n  q[1] = 0;\n  q[3] = 0;\n  q[5] = 0;\n  q[7] = 0;\n  ortho(q);\n}\nfunction load8xU32(q, src0, src1) {\n  const src0View = new DataView(src0.buffer);\n  const src1View = new DataView(src1.buffer);\n  q[0] = src0View.getUint32(0 + src0.byteOffset, true);\n  q[2] = src0View.getUint32(4 + src0.byteOffset, true);\n  q[4] = src0View.getUint32(8 + src0.byteOffset, true);\n  q[6] = src0View.getUint32(12 + src0.byteOffset, true);\n  q[1] = src1View.getUint32(0 + src1.byteOffset, true);\n  q[3] = src1View.getUint32(4 + src1.byteOffset, true);\n  q[5] = src1View.getUint32(8 + src1.byteOffset, true);\n  q[7] = src1View.getUint32(12 + src1.byteOffset, true);\n  ortho(q);\n}\nfunction store4xU32(dst, q) {\n  ortho(q);\n  const dstView = new DataView(dst.buffer);\n  dstView.setUint32(0 + dst.byteOffset, q[0], true);\n  dstView.setUint32(4 + dst.byteOffset, q[2], true);\n  dstView.setUint32(8 + dst.byteOffset, q[4], true);\n  dstView.setUint32(12 + dst.byteOffset, q[6], true);\n}\nfunction store8xU32(dst0, dst1, q) {\n  ortho(q);\n  const dst0View = new DataView(dst0.buffer);\n  const dst1View = new DataView(dst1.buffer);\n  dst0View.setUint32(0 + dst0.byteOffset, q[0], true);\n  dst0View.setUint32(4 + dst0.byteOffset, q[2], true);\n  dst0View.setUint32(8 + dst0.byteOffset, q[4], true);\n  dst0View.setUint32(12 + dst0.byteOffset, q[6], true);\n  dst1View.setUint32(0 + dst1.byteOffset, q[1], true);\n  dst1View.setUint32(4 + dst1.byteOffset, q[3], true);\n  dst1View.setUint32(8 + dst1.byteOffset, q[5], true);\n  dst1View.setUint32(12 + dst1.byteOffset, q[7], true);\n}\nfunction ortho(q) {\n  for (let i = 0; i < 8; i += 2) {\n    const q0 = q[i];\n    const q1 = q[i + 1];\n    q[i] = uint32.or(uint32.and(q0, oddsMask), uint32.shiftLeft(uint32.and(q1, oddsMask), 1));\n    q[i + 1] = uint32.or(uint32.shiftRight(uint32.and(q0, evensMask), 1), uint32.and(q1, evensMask));\n  }\n  for (let i = 0; i < 8; i += 4) {\n    const q0 = q[i];\n    const q1 = q[i + 1];\n    const q2 = q[i + 2];\n    const q3 = q[i + 3];\n    q[i] = uint32.or(uint32.and(q0, cl4), uint32.shiftLeft(uint32.and(q2, cl4), 2));\n    q[i + 2] = uint32.or(uint32.shiftRight(uint32.and(q0, ch4), 2), uint32.and(q2, ch4));\n    q[i + 1] = uint32.or(uint32.and(q1, cl4), uint32.shiftLeft(uint32.and(q3, cl4), 2));\n    q[i + 3] = uint32.or(uint32.shiftRight(uint32.and(q1, ch4), 2), uint32.and(q3, ch4));\n  }\n  for (let i = 0; i < 4; i++) {\n    const q0 = q[i];\n    const q4 = q[i + 4];\n    q[i] = uint32.or(uint32.and(q0, cl8), uint32.shiftLeft(uint32.and(q4, cl8), 4));\n    q[i + 4] = uint32.or(uint32.shiftRight(uint32.and(q0, ch8), 4), uint32.and(q4, ch8));\n  }\n}\nfunction rkeyOrtho(q, key) {\n  const keyView = new DataView(key.buffer);\n  for (let i = 0; i < 4; i++) {\n    const x = keyView.getUint32(i * 4 + key.byteOffset, true);\n    q[i * 2] = x;\n    q[i * 2 + 1] = x;\n  }\n  ortho(q);\n  for (let i = 0, j = 0; i < 4; i = i + 1, j = j + 2) {\n    let x = uint32.or(uint32.and(q[j + 0], oddsMask), uint32.and(q[j + 1], evensMask));\n    let y = x;\n    x = uint32.and(x, oddsMask);\n    q[j] = uint32.or(x, uint32.shiftLeft(x, 1));\n    y = uint32.and(y, evensMask);\n    q[j + 1] = uint32.or(y, uint32.shiftRight(y, 1));\n  }\n}\nfunction skeyExpand(skey, numRounds, compSkey) {\n  const n = (numRounds + 1) * 4;\n  for (let u = 0, v = 0; u < n; u = u + 1, v = v + 2) {\n    let x = compSkey[u];\n    let y = compSkey[u];\n    x = uint32.and(x, oddsMask);\n    skey[v] = uint32.or(x, uint32.shiftLeft(x, 1));\n    y = uint32.and(y, evensMask);\n    skey[v + 1] = uint32.or(y, uint32.shiftRight(y, 1));\n  }\n}\n\n//\n// ECB-AES (example/testing), and associated package private helpers.\n//\n\nfunction _subWord(x) {\n  let q = new Uint32Array([x, x, x, x, x, x, x, x]);\n  ortho(q);\n  subBytes(q);\n  ortho(q);\n  return q[0];\n}\nfunction keySched(compSkey, key) {\n  let numRounds = 0;\n  const keyLen = key.byteLength;\n  switch (keyLen) {\n    case 16:\n      numRounds = 10;\n      break;\n    case 24:\n      numRounds = 12;\n      break;\n    case 32:\n      numRounds = 14;\n      break;\n    default:\n      throw 'aes: invalid key length';\n  }\n  let skey = new Uint32Array(120);\n  let tmp = 0;\n  const nk = keyLen / 4;\n  const nkf = (numRounds + 1) * 4;\n  const keyView = new DataView(key.buffer);\n  for (let i = 0; i < nk; i++) {\n    tmp = keyView.getUint32(i * 4 + key.byteOffset, true);\n    skey[i * 2] = tmp;\n    skey[i * 2 + 1] = tmp;\n  }\n  for (let i = nk, j = 0, k = 0; i < nkf; i++) {\n    if (j == 0) {\n      tmp = uint32.or(uint32.shiftLeft(tmp, 24), uint32.shiftRight(tmp, 8));\n      tmp = uint32.xor(_subWord(tmp), uint32.fromBytesBigEndian(0x00, 0x00, 0x00, rcon[k]));\n    } else if (nk > 6 && j == 4) {\n      tmp = _subWord(tmp);\n    }\n    tmp = uint32.xor(tmp, skey[(i - nk) * 2]);\n    skey[i * 2] = tmp;\n    skey[i * 2 + 1] = tmp;\n    j++;\n    if (j == nk) {\n      j = 0;\n      k++;\n    }\n  }\n  for (let i = 0; i < nkf; i += 4) {\n    let stmp = skey.slice(i * 2, i * 2 + 8);\n    ortho(stmp);\n    for (let j = 0; j < 8; j++) {\n      skey[i * 2 + j] = stmp[j];\n    }\n  }\n  for (let i = 0, j = 0; i < nkf; i = i + 1, j = j + 2) {\n    compSkey[i] = uint32.or(uint32.and(skey[j], oddsMask), uint32.and(skey[j + 1], evensMask));\n  }\n  return numRounds;\n}\nfunction _encrypt(numRounds, skey, q) {\n  addRoundKey(q, skey);\n  for (let u = 1; u < numRounds; u++) {\n    subBytes(q);\n    shiftRows(q);\n    mixColumns(q);\n    addRoundKey(q, skey.slice(u * 8, u * 8 + 8));\n  }\n  subBytes(q);\n  shiftRows(q);\n  addRoundKey(q, skey.slice(numRounds * 8, numRounds * 8 + 8));\n}\nclass ECB {\n  constructor(key) {\n    let skey = new Uint32Array(60);\n    this.numRounds = keySched(skey, key);\n    this.skeyExpanded = new Uint32Array(120);\n    skeyExpand(this.skeyExpanded, this.numRounds, skey);\n  }\n  encrypt(dst, src) {\n    let q = newQ();\n    load4xU32(q, src);\n    _encrypt(this.numRounds, this.skeyExpanded, q);\n    store4xU32(dst, q);\n  }\n  encrypt2x(dst0, dst1, src0, src1) {\n    let q = newQ();\n    load8xU32(q, src0, src1);\n    _encrypt(this.numRounds, this.skeyExpanded, q);\n    store8xU32(dst0, dst1, q);\n  }\n}\nmodule.exports = {\n  // ECB-AES, probably shouldn't be used for more than testing.\n  ECB: ECB,\n  // Implementation internals, exposed for the purpose of constructing\n  // things based on the AES round function.\n  newQ,\n  load4xU32,\n  load8xU32,\n  store4xU32,\n  store8xU32,\n  ortho,\n  rkeyOrtho,\n  addRoundKey,\n  subBytes,\n  shiftRows,\n  mixColumns,\n  skeyExpand,\n  keySched\n};","map":{"version":3,"names":["uint32","require","rcon","oddsMask","fromBytesBigEndian","evensMask","cl4","ch4","cl8","ch8","shiftRowsMask0","shiftRowsMask1","shiftRowsMask2","shiftRowsMask3","shiftRowsMask4","shiftRowsMask5","shiftRowsMask6","newQ","Uint32Array","addRoundKey","q","sk","xor","subBytes","x0","x1","x2","x3","x4","x5","x6","x7","y14","y13","y9","y8","t0","y1","y4","y12","y2","y5","y3","t1","y15","y20","y6","y10","y11","y7","y17","y19","y16","y21","y18","t2","and","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","t31","t32","t33","t34","t35","t36","t37","t38","t39","t40","t41","t42","t43","t44","t45","z0","z1","z2","z3","z4","z5","z6","z7","z8","z9","z10","z11","z12","z13","z14","z15","z16","z17","t46","t47","t48","t49","t50","t51","t52","t53","t54","t55","t56","t57","t58","t59","t60","t61","t62","t63","t64","t65","t66","s0","s6","not","s7","t67","s3","s4","s5","s1","s2","shiftRows","i","x","or","shiftRight","shiftLeft","mixColumns","q0","q1","q2","q3","q4","q5","q6","q7","r0","r1","r2","r3","r4","r5","r6","r7","rotateRight","load4xU32","src","srcView","DataView","buffer","getUint32","byteOffset","ortho","load8xU32","src0","src1","src0View","src1View","store4xU32","dst","dstView","setUint32","store8xU32","dst0","dst1","dst0View","dst1View","rkeyOrtho","key","keyView","j","y","skeyExpand","skey","numRounds","compSkey","n","u","v","_subWord","keySched","keyLen","byteLength","tmp","nk","nkf","k","stmp","slice","_encrypt","ECB","constructor","skeyExpanded","encrypt","encrypt2x","module","exports"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/bsaes/aes.js"],"sourcesContent":["// Copyright (c) 2016 Thomas Pornin <pornin@bolet.org>\n// Copyright (c) 2017 Yawning Angel <yawning at schwanenlied dot me>\n// Copyright (c) 2019 Oasis Labs Inc. <info@oasislabs.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar uint32 = require('uint32');\n\nconst rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];\nconst oddsMask = uint32.fromBytesBigEndian(0x55, 0x55, 0x55, 0x55);\nconst evensMask = uint32.fromBytesBigEndian(0xaa, 0xaa, 0xaa, 0xaa);\nconst cl4 = uint32.fromBytesBigEndian(0x33, 0x33, 0x33, 0x33);\nconst ch4 = uint32.fromBytesBigEndian(0xcc, 0xcc, 0xcc, 0xcc);\nconst cl8 = uint32.fromBytesBigEndian(0x0f, 0x0f, 0x0f, 0x0f);\nconst ch8 = uint32.fromBytesBigEndian(0xf0, 0xf0, 0xf0, 0xf0);\n\nconst shiftRowsMask0 = uint32.fromBytesBigEndian(0x00, 0x00, 0x00, 0xff);\nconst shiftRowsMask1 = uint32.fromBytesBigEndian(0x00, 0x00, 0xfc, 0x00);\nconst shiftRowsMask2 = uint32.fromBytesBigEndian(0x00, 0x00, 0x03, 0x00);\nconst shiftRowsMask3 = uint32.fromBytesBigEndian(0x00, 0xf0, 0x00, 0x00);\nconst shiftRowsMask4 = uint32.fromBytesBigEndian(0x00, 0x0f, 0x00, 0x00);\nconst shiftRowsMask5 = uint32.fromBytesBigEndian(0xc0, 0x00, 0x00, 0x00);\nconst shiftRowsMask6 = uint32.fromBytesBigEndian(0x3f, 0x00, 0x00, 0x00);\n\nfunction newQ() {\n\treturn new Uint32Array(8); // q\n}\n\n// AddRoundKey\nfunction addRoundKey(q, sk) {\n\tq[0] = uint32.xor(q[0], sk[0])\n\tq[1] = uint32.xor(q[1], sk[1])\n\tq[2] = uint32.xor(q[2], sk[2])\n\tq[3] = uint32.xor(q[3], sk[3])\n\tq[4] = uint32.xor(q[4], sk[4])\n\tq[5] = uint32.xor(q[5], sk[5])\n\tq[6] = uint32.xor(q[6], sk[6])\n\tq[7] = uint32.xor(q[7], sk[7])\n}\n\n// SubBytes\nfunction subBytes(q) {\n\t// This S-box implementation is a straightforward translation of\n\t// the circuit described by Boyar and Peralta in \"A new\n\t// combinational logic minimization technique with applications\n\t// to cryptology\" (https://eprint.iacr.org/2009/191.pdf).\n\t//\n\t// Note that variables x* (input) and s* (output) are numbered\n\t// in \"reverse\" order (x0 is the high bit, x7 is the low bit).\n\n\tconst x0 = q[7];\n\tconst x1 = q[6];\n\tconst x2 = q[5];\n\tconst x3 = q[4];\n\tconst x4 = q[3];\n\tconst x5 = q[2];\n\tconst x6 = q[1];\n\tconst x7 = q[0];\n\n\t//\n\t// Top linear transformation.\n\t//\n\tconst y14 = uint32.xor(x3, x5);\n\tconst y13 = uint32.xor(x0, x6);\n\tconst y9 = uint32.xor(x0, x3);\n\tconst y8 = uint32.xor(x0, x5);\n\tconst t0 = uint32.xor(x1, x2);\n\tconst y1 = uint32.xor(t0, x7);\n\tconst y4 = uint32.xor(y1, x3);\n\tconst y12 = uint32.xor(y13, y14);\n\tconst y2 = uint32.xor(y1, x0);\n\tconst y5 = uint32.xor(y1, x6);\n\tconst y3 = uint32.xor(y5, y8);\n\tconst t1 = uint32.xor(x4, y12);\n\tconst y15 = uint32.xor(t1, x5);\n\tconst y20 = uint32.xor(t1, x1);\n\tconst y6 = uint32.xor(y15, x7);\n\tconst y10 = uint32.xor(y15, t0);\n\tconst y11 = uint32.xor(y20, y9);\n\tconst y7 = uint32.xor(x7, y11);\n\tconst y17 = uint32.xor(y10, y11);\n\tconst y19 = uint32.xor(y10, y8);\n\tconst y16 = uint32.xor(t0, y11);\n\tconst y21 = uint32.xor(y13, y16);\n\tconst y18 = uint32.xor(x0, y16);\n\n\t//\n\t// Non-linear section.\n\t//\n\tconst t2 = uint32.and(y12, y15);\n\tconst t3 = uint32.and(y3, y6);\n\tconst t4 = uint32.xor(t3, t2);\n\tconst t5 = uint32.and(y4, x7);\n\tconst t6 = uint32.xor(t5, t2);\n\tconst t7 = uint32.and(y13, y16);\n\tconst t8 = uint32.and(y5, y1);\n\tconst t9 = uint32.xor(t8, t7);\n\tconst t10 = uint32.and(y2, y7);\n\tconst t11 = uint32.xor(t10, t7);\n\tconst t12 = uint32.and(y9, y11);\n\tconst t13 = uint32.and(y14, y17);\n\tconst t14 = uint32.xor(t13, t12);\n\tconst t15 = uint32.and(y8, y10);\n\tconst t16 = uint32.xor(t15, t12);\n\tconst t17 = uint32.xor(t4, t14);\n\tconst t18 = uint32.xor(t6, t16);\n\tconst t19 = uint32.xor(t9, t14);\n\tconst t20 = uint32.xor(t11, t16);\n\tconst t21 = uint32.xor(t17, y20);\n\tconst t22 = uint32.xor(t18, y19);\n\tconst t23 = uint32.xor(t19, y21);\n\tconst t24 = uint32.xor(t20, y18);\n\n\tconst t25 = uint32.xor(t21, t22);\n\tconst t26 = uint32.and(t21, t23);\n\tconst t27 = uint32.xor(t24, t26);\n\tconst t28 = uint32.and(t25, t27);\n\tconst t29 = uint32.xor(t28, t22);\n\tconst t30 = uint32.xor(t23, t24);\n\tconst t31 = uint32.xor(t22, t26);\n\tconst t32 = uint32.and(t31, t30);\n\tconst t33 = uint32.xor(t32, t24);\n\tconst t34 = uint32.xor(t23, t33);\n\tconst t35 = uint32.xor(t27, t33);\n\tconst t36 = uint32.and(t24, t35);\n\tconst t37 = uint32.xor(t36, t34);\n\tconst t38 = uint32.xor(t27, t36);\n\tconst t39 = uint32.and(t29, t38);\n\tconst t40 = uint32.xor(t25, t39);\n\n\tconst t41 = uint32.xor(t40, t37);\n\tconst t42 = uint32.xor(t29, t33);\n\tconst t43 = uint32.xor(t29, t40);\n\tconst t44 = uint32.xor(t33, t37);\n\tconst t45 = uint32.xor(t42, t41);\n\tconst z0 = uint32.and(t44, y15);\n\tconst z1 = uint32.and(t37, y6);\n\tconst z2 = uint32.and(t33, x7);\n\tconst z3 = uint32.and(t43, y16);\n\tconst z4 = uint32.and(t40, y1);\n\tconst z5 = uint32.and(t29, y7);\n\tconst z6 = uint32.and(t42, y11);\n\tconst z7 = uint32.and(t45, y17);\n\tconst z8 = uint32.and(t41, y10);\n\tconst z9 = uint32.and(t44, y12);\n\tconst z10 = uint32.and(t37, y3);\n\tconst z11 = uint32.and(t33, y4);\n\tconst z12 = uint32.and(t43, y13);\n\tconst z13 = uint32.and(t40, y5);\n\tconst z14 = uint32.and(t29, y2);\n\tconst z15 = uint32.and(t42, y9);\n\tconst z16 = uint32.and(t45, y14);\n\tconst z17 = uint32.and(t41, y8);\n\n\t//\n\t// Bottom linear transformation.\n\t//\n\tconst t46 = uint32.xor(z15, z16);\n\tconst t47 = uint32.xor(z10, z11);\n\tconst t48 = uint32.xor(z5, z13);\n\tconst t49 = uint32.xor(z9, z10);\n\tconst t50 = uint32.xor(z2, z12);\n\tconst t51 = uint32.xor(z2, z5);\n\tconst t52 = uint32.xor(z7, z8);\n\tconst t53 = uint32.xor(z0, z3);\n\tconst t54 = uint32.xor(z6, z7);\n\tconst t55 = uint32.xor(z16, z17);\n\tconst t56 = uint32.xor(z12, t48);\n\tconst t57 = uint32.xor(t50, t53);\n\tconst t58 = uint32.xor(z4, t46);\n\tconst t59 = uint32.xor(z3, t54);\n\tconst t60 = uint32.xor(t46, t57);\n\tconst t61 = uint32.xor(z14, t57);\n\tconst t62 = uint32.xor(t52, t58);\n\tconst t63 = uint32.xor(t49, t58);\n\tconst t64 = uint32.xor(z4, t59);\n\tconst t65 = uint32.xor(t61, t62);\n\tconst t66 = uint32.xor(z1, t63);\n\tconst s0 = uint32.xor(t59, t63);\n\tconst s6 = uint32.xor(t56, uint32.not(t62));\n\tconst s7 = uint32.xor(t48, uint32.not(t60));\n\tconst t67 = uint32.xor(t64, t65);\n\tconst s3 = uint32.xor(t53, t66);\n\tconst s4 = uint32.xor(t51, t66);\n\tconst s5 = uint32.xor(t47, t65);\n\tconst s1 = uint32.xor(t64, uint32.not(s3));\n\tconst s2 = uint32.xor(t55, uint32.not(t67));\n\n\tq[7] = s0;\n\tq[6] = s1;\n\tq[5] = s2;\n\tq[4] = s3;\n\tq[3] = s4;\n\tq[2] = s5;\n\tq[1] = s6;\n\tq[0] = s7;\n}\n\n// ShiftRows\nfunction shiftRows(q) {\n\tfor (let i = 0; i < 8; i++) {\n\t\tconst x = q[i];\n\n\t\tq[i] = uint32.or(\n\t\t\tuint32.and(x, shiftRowsMask0),\n\t\t\tuint32.shiftRight(uint32.and(x, shiftRowsMask1), 2),\n\t\t\tuint32.shiftLeft(uint32.and(x, shiftRowsMask2), 6),\n\t\t\tuint32.shiftRight(uint32.and(x, shiftRowsMask3), 4),\n\t\t\tuint32.shiftLeft(uint32.and(x, shiftRowsMask4), 4),\n\t\t\tuint32.shiftRight(uint32.and(x, shiftRowsMask5), 6),\n\t\t\tuint32.shiftLeft(uint32.and(x, shiftRowsMask6), 2)\n\t\t);\n\t}\n}\n\n// MixColumns\nfunction mixColumns(q) {\n\tconst q0 = q[0];\n\tconst q1 = q[1];\n\tconst q2 = q[2];\n\tconst q3 = q[3];\n\tconst q4 = q[4];\n\tconst q5 = q[5];\n\tconst q6 = q[6];\n\tconst q7 = q[7];\n\n\tconst r0 = uint32.or(uint32.shiftRight(q0, 8), uint32.shiftLeft(q0, 24));\n\tconst r1 = uint32.or(uint32.shiftRight(q1, 8), uint32.shiftLeft(q1, 24));\n\tconst r2 = uint32.or(uint32.shiftRight(q2, 8), uint32.shiftLeft(q2, 24));\n\tconst r3 = uint32.or(uint32.shiftRight(q3, 8), uint32.shiftLeft(q3, 24));\n\tconst r4 = uint32.or(uint32.shiftRight(q4, 8), uint32.shiftLeft(q4, 24));\n\tconst r5 = uint32.or(uint32.shiftRight(q5, 8), uint32.shiftLeft(q5, 24));\n\tconst r6 = uint32.or(uint32.shiftRight(q6, 8), uint32.shiftLeft(q6, 24));\n\tconst r7 = uint32.or(uint32.shiftRight(q7, 8), uint32.shiftLeft(q7, 24));\n\n\tq[0] = uint32.xor(q7, r7, r0, uint32.rotateRight(uint32.xor(q0, r0), 16));\n\tq[1] = uint32.xor(q0, r0, q7, r7, r1, uint32.rotateRight(uint32.xor(q1, r1), 16));\n\tq[2] = uint32.xor(q1, r1, r2, uint32.rotateRight(uint32.xor(q2, r2), 16));\n\tq[3] = uint32.xor(q2, r2, q7, r7, r3, uint32.rotateRight(uint32.xor(q3, r3), 16));\n\tq[4] = uint32.xor(q3, r3, q7, r7, r4, uint32.rotateRight(uint32.xor(q4, r4), 16));\n\tq[5] = uint32.xor(q4, r4, r5, uint32.rotateRight(uint32.xor(q5, r5), 16));\n\tq[6] = uint32.xor(q5, r5, r6, uint32.rotateRight(uint32.xor(q6, r6), 16));\n\tq[7] = uint32.xor(q6, r6, r7, uint32.rotateRight(uint32.xor(q7, r7), 16));\n}\n\nfunction load4xU32(q, src) {\n\tconst srcView = new DataView(src.buffer);\n\tq[0] = srcView.getUint32(0 + src.byteOffset, true);\n\tq[2] = srcView.getUint32(4 + src.byteOffset, true);\n\tq[4] = srcView.getUint32(8 + src.byteOffset, true);\n\tq[6] = srcView.getUint32(12 + src.byteOffset, true);\n\tq[1] = 0;\n\tq[3] = 0;\n\tq[5] = 0;\n\tq[7] = 0;\n\tortho(q)\n}\n\nfunction load8xU32(q, src0, src1) {\n\tconst src0View = new DataView(src0.buffer);\n\tconst src1View = new DataView(src1.buffer);\n\tq[0] = src0View.getUint32(0 + src0.byteOffset, true);\n\tq[2] = src0View.getUint32(4 + src0.byteOffset, true);\n\tq[4] = src0View.getUint32(8 + src0.byteOffset, true);\n\tq[6] = src0View.getUint32(12 + src0.byteOffset, true);\n\tq[1] = src1View.getUint32(0 + src1.byteOffset, true);\n\tq[3] = src1View.getUint32(4 + src1.byteOffset, true);\n\tq[5] = src1View.getUint32(8 + src1.byteOffset, true);\n\tq[7] = src1View.getUint32(12 + src1.byteOffset, true);\n\tortho(q)\n}\n\nfunction store4xU32(dst, q) {\n\tortho(q);\n\tconst dstView = new DataView(dst.buffer);\n\tdstView.setUint32(0 + dst.byteOffset, q[0], true);\n\tdstView.setUint32(4 + dst.byteOffset, q[2], true);\n\tdstView.setUint32(8 + dst.byteOffset, q[4], true);\n\tdstView.setUint32(12 + dst.byteOffset, q[6], true);\n}\n\nfunction store8xU32(dst0, dst1, q) {\n\tortho(q);\n\tconst dst0View = new DataView(dst0.buffer);\n\tconst dst1View = new DataView(dst1.buffer);\n\tdst0View.setUint32(0 + dst0.byteOffset, q[0], true);\n\tdst0View.setUint32(4 + dst0.byteOffset, q[2], true);\n\tdst0View.setUint32(8 + dst0.byteOffset, q[4], true);\n\tdst0View.setUint32(12 + dst0.byteOffset, q[6], true);\n\tdst1View.setUint32(0 + dst1.byteOffset, q[1], true);\n\tdst1View.setUint32(4 + dst1.byteOffset, q[3], true);\n\tdst1View.setUint32(8 + dst1.byteOffset, q[5], true);\n\tdst1View.setUint32(12 + dst1.byteOffset, q[7], true);\n}\n\nfunction ortho(q) {\n\tfor (let i = 0; i < 8; i += 2) {\n\t\tconst q0 = q[i];\n\t\tconst q1 = q[i+1];\n\n\t\tq[i] = uint32.or(uint32.and(q0, oddsMask), uint32.shiftLeft(uint32.and(q1, oddsMask), 1));\n\t\tq[i+1] = uint32.or(uint32.shiftRight(uint32.and(q0, evensMask), 1), uint32.and(q1, evensMask));\n\t}\n\n\tfor (let i = 0; i < 8; i += 4) {\n\t\tconst q0 = q[i]\n\t\tconst q1 = q[i+1];\n\t\tconst q2 = q[i+2];\n\t\tconst q3 = q[i+3];\n\n\t\tq[i] = uint32.or(uint32.and(q0, cl4), uint32.shiftLeft(uint32.and(q2, cl4), 2));\n\t\tq[i+2] = uint32.or(uint32.shiftRight(uint32.and(q0, ch4), 2), uint32.and(q2, ch4));\n\t\tq[i+1] = uint32.or(uint32.and(q1, cl4), uint32.shiftLeft(uint32.and(q3, cl4), 2));\n\t\tq[i+3] = uint32.or(uint32.shiftRight(uint32.and(q1, ch4), 2), uint32.and(q3, ch4));\n\t}\n\n\tfor (let i = 0; i < 4; i++) {\n\t\tconst q0 = q[i];\n\t\tconst q4 = q[i+4];\n\n\t\tq[i] = uint32.or(uint32.and(q0, cl8), uint32.shiftLeft(uint32.and(q4, cl8), 4));\n\t\tq[i+4] = uint32.or(uint32.shiftRight(uint32.and(q0, ch8), 4), uint32.and(q4, ch8));\n\t}\n}\n\nfunction rkeyOrtho(q, key) {\n\tconst keyView = new DataView(key.buffer);\n\tfor (let i = 0; i < 4; i++) {\n\t\tconst x = keyView.getUint32(i*4 + key.byteOffset, true);\n\t\tq[i*2] = x;\n\t\tq[i*2+1] = x;\n\t}\n\tortho(q);\n\n\tfor (let i = 0, j = 0; i < 4; i = i + 1, j = j + 2) {\n\t\tlet x = uint32.or(uint32.and(q[j+0], oddsMask), uint32.and(q[j+1], evensMask))\n\t\tlet y = x;\n\n\t\tx = uint32.and(x, oddsMask);\n\t\tq[j] = uint32.or(x, uint32.shiftLeft(x, 1));\n\t\ty = uint32.and(y, evensMask);\n\t\tq[j+1] = uint32.or(y, uint32.shiftRight(y, 1));\n\t}\n}\n\nfunction skeyExpand(skey, numRounds, compSkey) {\n\tconst n = (numRounds + 1) * 4;\n\n\tfor (let u = 0, v = 0; u < n; u = u + 1, v = v + 2) {\n\t\tlet x = compSkey[u];\n\t\tlet y = compSkey[u];\n\n\t\tx = uint32.and(x, oddsMask);\n\t\tskey[v] = uint32.or(x, uint32.shiftLeft(x, 1));\n\t\ty = uint32.and(y, evensMask);\n\t\tskey[v+1] = uint32.or(y, uint32.shiftRight(y, 1));\n\t}\n}\n\n//\n// ECB-AES (example/testing), and associated package private helpers.\n//\n\nfunction _subWord(x) {\n\tlet q = new\tUint32Array([x, x, x, x, x, x, x, x]);\n\tortho(q);\n\tsubBytes(q);\n\tortho(q);\n\treturn q[0];\n}\n\nfunction keySched(compSkey, key) {\n\tlet numRounds = 0;\n\tconst keyLen = key.byteLength;\n\tswitch (keyLen) {\n\tcase 16:\n\t\tnumRounds = 10;\n\t\tbreak;\n\tcase 24:\n\t\tnumRounds = 12;\n\t\tbreak;\n\tcase 32:\n\t\tnumRounds = 14;\n\t\tbreak;\n\tdefault:\n\t\tthrow 'aes: invalid key length';\n\t}\n\n\tlet skey = new Uint32Array(120);\n\tlet tmp = 0;\n\tconst nk = keyLen / 4;\n\tconst nkf = (numRounds + 1) * 4;\n\tconst keyView = new DataView(key.buffer);\n\tfor (let i = 0; i < nk; i++) {\n\t\ttmp = keyView.getUint32(i*4 + key.byteOffset, true);\n\t\tskey[i*2] = tmp;\n\t\tskey[i*2+1] = tmp;\n\t}\n\tfor (let i = nk, j = 0, k = 0; i < nkf; i++) {\n\t\tif (j == 0) {\n\t\t\ttmp = uint32.or(uint32.shiftLeft(tmp, 24), uint32.shiftRight(tmp, 8));\n\t\t\ttmp = uint32.xor(_subWord(tmp), uint32.fromBytesBigEndian(0x00, 0x00, 0x00, rcon[k]));\n\t\t} else if (nk > 6 && j == 4) {\n\t\t\ttmp = _subWord(tmp);\n\t\t}\n\t\ttmp = uint32.xor(tmp, skey[(i-nk)*2]);\n\t\tskey[i*2] = tmp;\n\t\tskey[i*2+1] = tmp;\n\t\tj++;\n\t\tif (j == nk) {\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t}\n\t}\n\tfor (let i = 0; i < nkf; i += 4) {\n\t\tlet stmp = skey.slice(i*2, i*2+8);\n\t\tortho(stmp);\n\t\tfor (let j = 0; j < 8; j++) {\n\t\t\tskey[i*2+j] = stmp[j];\n\t\t}\n\t}\n\tfor (let i = 0, j = 0; i < nkf; i = i + 1, j = j + 2) {\n\t\tcompSkey[i] = uint32.or(uint32.and(skey[j], oddsMask), uint32.and(skey[j+1], evensMask));\n\t}\n\treturn numRounds;\n}\n\nfunction _encrypt(numRounds, skey, q) {\n\taddRoundKey(q, skey);\n\tfor (let u = 1; u < numRounds; u++) {\n\t\tsubBytes(q);\n\t\tshiftRows(q);\n\t\tmixColumns(q);\n\t\taddRoundKey(q, skey.slice(u*8, u*8+8));\n\t}\n\tsubBytes(q);\n\tshiftRows(q);\n\taddRoundKey(q, skey.slice(numRounds*8, numRounds*8+8));\n}\n\nclass ECB {\n\tconstructor(key) {\n\t\tlet skey = new Uint32Array(60);\n\n\t\tthis.numRounds = keySched(skey, key);\n\t\tthis.skeyExpanded = new Uint32Array(120);\n\t\tskeyExpand(this.skeyExpanded, this.numRounds, skey);\n\t}\n\n\tencrypt(dst, src) {\n\t\tlet q = newQ();\n\n\t\tload4xU32(q, src);\n\t\t_encrypt(this.numRounds, this.skeyExpanded, q);\n\t\tstore4xU32(dst, q);\n\t}\n\n\tencrypt2x(dst0, dst1, src0, src1) {\n\t\tlet q = newQ();\n\n\t\tload8xU32(q, src0, src1);\n\t\t_encrypt(this.numRounds, this.skeyExpanded, q);\n\t\tstore8xU32(dst0, dst1, q);\n\t}\n}\n\nmodule.exports = {\n\t// ECB-AES, probably shouldn't be used for more than testing.\n\tECB: ECB,\n\n\t// Implementation internals, exposed for the purpose of constructing\n\t// things based on the AES round function.\n\tnewQ,\n\tload4xU32,\n\tload8xU32,\n\tstore4xU32,\n\tstore8xU32,\n\tortho,\n\trkeyOrtho,\n\taddRoundKey,\n\tsubBytes,\n\tshiftRows,\n\tmixColumns,\n\n\tskeyExpand,\n\tkeySched,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}