{"ast":null,"code":"import { Token, Type } from './token.js';\nimport * as uint from './0uint.js';\nexport function decodeTagCompact(_data, _pos, minor, _options) {\n  return new Token(Type.tag, minor, 1);\n}\nexport function decodeTag8(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint8(data, pos + 1, options), 2);\n}\nexport function decodeTag16(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint16(data, pos + 1, options), 3);\n}\nexport function decodeTag32(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint32(data, pos + 1, options), 5);\n}\nexport function decodeTag64(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint64(data, pos + 1, options), 9);\n}\nexport function encodeTag(buf, token) {\n  uint.encodeUintValue(buf, Type.tag.majorEncoded, token.value);\n}\nencodeTag.compareTokens = uint.encodeUint.compareTokens;\nencodeTag.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};","map":{"version":3,"names":["Token","Type","uint","decodeTagCompact","_data","_pos","minor","_options","tag","decodeTag8","data","pos","_minor","options","readUint8","decodeTag16","readUint16","decodeTag32","readUint32","decodeTag64","readUint64","encodeTag","buf","token","encodeUintValue","majorEncoded","value","compareTokens","encodeUint","encodedSize"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/cborg/esm/lib/6tag.js"],"sourcesContent":["import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nexport function decodeTagCompact(_data, _pos, minor, _options) {\n  return new Token(Type.tag, minor, 1);\n}\nexport function decodeTag8(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint8(data, pos + 1, options), 2);\n}\nexport function decodeTag16(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint16(data, pos + 1, options), 3);\n}\nexport function decodeTag32(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint32(data, pos + 1, options), 5);\n}\nexport function decodeTag64(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint64(data, pos + 1, options), 9);\n}\nexport function encodeTag(buf, token) {\n  uint.encodeUintValue(buf, Type.tag.majorEncoded, token.value);\n}\nencodeTag.compareTokens = uint.encodeUint.compareTokens;\nencodeTag.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};"],"mappings":"AAAA,SACEA,KAAK,EACLC,IAAI,QACC,YAAY;AACnB,OAAO,KAAKC,IAAI,MAAM,YAAY;AAClC,OAAO,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC7D,OAAO,IAAIP,KAAK,CAACC,IAAI,CAACO,GAAG,EAAEF,KAAK,EAAE,CAAC,CAAC;AACtC;AACA,OAAO,SAASG,UAAUA,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACrD,OAAO,IAAIb,KAAK,CAACC,IAAI,CAACO,GAAG,EAAEN,IAAI,CAACY,SAAS,CAACJ,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEE,OAAO,CAAC,EAAE,CAAC,CAAC;AACvE;AACA,OAAO,SAASE,WAAWA,CAACL,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACtD,OAAO,IAAIb,KAAK,CAACC,IAAI,CAACO,GAAG,EAAEN,IAAI,CAACc,UAAU,CAACN,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEE,OAAO,CAAC,EAAE,CAAC,CAAC;AACxE;AACA,OAAO,SAASI,WAAWA,CAACP,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACtD,OAAO,IAAIb,KAAK,CAACC,IAAI,CAACO,GAAG,EAAEN,IAAI,CAACgB,UAAU,CAACR,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEE,OAAO,CAAC,EAAE,CAAC,CAAC;AACxE;AACA,OAAO,SAASM,WAAWA,CAACT,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACtD,OAAO,IAAIb,KAAK,CAACC,IAAI,CAACO,GAAG,EAAEN,IAAI,CAACkB,UAAU,CAACV,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEE,OAAO,CAAC,EAAE,CAAC,CAAC;AACxE;AACA,OAAO,SAASQ,SAASA,CAACC,GAAG,EAAEC,KAAK,EAAE;EACpCrB,IAAI,CAACsB,eAAe,CAACF,GAAG,EAAErB,IAAI,CAACO,GAAG,CAACiB,YAAY,EAAEF,KAAK,CAACG,KAAK,CAAC;AAC/D;AACAL,SAAS,CAACM,aAAa,GAAGzB,IAAI,CAAC0B,UAAU,CAACD,aAAa;AACvDN,SAAS,CAACQ,WAAW,GAAG,SAASA,WAAWA,CAACN,KAAK,EAAE;EAClD,OAAOrB,IAAI,CAACsB,eAAe,CAACK,WAAW,CAACN,KAAK,CAACG,KAAK,CAAC;AACtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}