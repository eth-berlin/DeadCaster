{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _defineProperty from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldGet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { hashMessage, TypedDataEncoder } from \"../hash/index.js\";\nimport { AbstractSigner } from \"../providers/index.js\";\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\nvar _signingKey = /*#__PURE__*/new WeakMap();\nexport class BaseWallet extends AbstractSigner {\n  /**\n   *  Creates a new BaseWallet for %%privateKey%%, optionally\n   *  connected to %%provider%%.\n   *\n   *  If %%provider%% is not specified, only offline methods can\n   *  be used.\n   */\n  constructor(privateKey, provider) {\n    super(provider);\n    /**\n     *  The wallet address.\n     */\n    _defineProperty(this, \"address\", void 0);\n    _classPrivateFieldInitSpec(this, _signingKey, void 0);\n    assertArgument(privateKey && typeof privateKey.sign === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n    _classPrivateFieldSet(_signingKey, this, privateKey);\n    const address = computeAddress(this.signingKey.publicKey);\n    defineProperties(this, {\n      address\n    });\n  }\n  // Store private values behind getters to reduce visibility\n  // in console.log\n  /**\n   *  The [[SigningKey]] used for signing payloads.\n   */\n  get signingKey() {\n    return _classPrivateFieldGet(_signingKey, this);\n  }\n  /**\n   *  The private key for this wallet.\n   */\n  get privateKey() {\n    return this.signingKey.privateKey;\n  }\n  async getAddress() {\n    return this.address;\n  }\n  connect(provider) {\n    return new BaseWallet(_classPrivateFieldGet(_signingKey, this), provider);\n  }\n  async signTransaction(tx) {\n    // Replace any Addressable or ENS name with an address\n    const {\n      to,\n      from\n    } = await resolveProperties({\n      to: tx.to ? resolveAddress(tx.to, this.provider) : undefined,\n      from: tx.from ? resolveAddress(tx.from, this.provider) : undefined\n    });\n    if (to != null) {\n      tx.to = to;\n    }\n    if (from != null) {\n      tx.from = from;\n    }\n    if (tx.from != null) {\n      assertArgument(getAddress(tx.from) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\n      delete tx.from;\n    }\n    // Build the transaction\n    const btx = Transaction.from(tx);\n    btx.signature = this.signingKey.sign(btx.unsignedHash);\n    return btx.serialized;\n  }\n  async signMessage(message) {\n    return this.signMessageSync(message);\n  }\n  // @TODO: Add a secialized signTx and signTyped sync that enforces\n  // all parameters are known?\n  /**\n   *  Returns the signature for %%message%% signed with this wallet.\n   */\n  signMessageSync(message) {\n    return this.signingKey.sign(hashMessage(message)).serialized;\n  }\n  async signTypedData(domain, types, value) {\n    // Populate any ENS names\n    const populated = await TypedDataEncoder.resolveNames(domain, types, value, async name => {\n      // @TODO: this should use resolveName; addresses don't\n      //        need a provider\n      assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"resolveName\",\n        info: {\n          name\n        }\n      });\n      const address = await this.provider.resolveName(name);\n      assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n        value: name\n      });\n      return address;\n    });\n    return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n  }\n}","map":{"version":3,"names":["getAddress","resolveAddress","hashMessage","TypedDataEncoder","AbstractSigner","computeAddress","Transaction","defineProperties","resolveProperties","assert","assertArgument","_signingKey","WeakMap","BaseWallet","constructor","privateKey","provider","_defineProperty","_classPrivateFieldInitSpec","sign","_classPrivateFieldSet","address","signingKey","publicKey","_classPrivateFieldGet","connect","signTransaction","tx","to","from","undefined","btx","signature","unsignedHash","serialized","signMessage","message","signMessageSync","signTypedData","domain","types","value","populated","resolveNames","name","operation","info","resolveName","hash"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/ethers/src.ts/wallet/base-wallet.ts"],"sourcesContent":["import { getAddress, resolveAddress } from \"../address/index.js\";\nimport { hashMessage, TypedDataEncoder } from \"../hash/index.js\";\nimport { AbstractSigner } from \"../providers/index.js\";\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties, resolveProperties, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport type { SigningKey } from \"../crypto/index.js\";\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { Provider, TransactionRequest } from \"../providers/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\n\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\nexport class BaseWallet extends AbstractSigner {\n    /**\n     *  The wallet address.\n     */\n    readonly address!: string;\n\n    readonly #signingKey: SigningKey;\n\n    /**\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\n     *  connected to %%provider%%.\n     *\n     *  If %%provider%% is not specified, only offline methods can\n     *  be used.\n     */\n    constructor(privateKey: SigningKey, provider?: null | Provider) {\n        super(provider);\n\n        assertArgument(privateKey && typeof(privateKey.sign) === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n\n        this.#signingKey = privateKey;\n\n        const address = computeAddress(this.signingKey.publicKey);\n        defineProperties<BaseWallet>(this, { address });\n    }\n\n    // Store private values behind getters to reduce visibility\n    // in console.log\n\n    /**\n     *  The [[SigningKey]] used for signing payloads.\n     */\n    get signingKey(): SigningKey { return this.#signingKey; }\n\n    /**\n     *  The private key for this wallet.\n     */\n    get privateKey(): string { return this.signingKey.privateKey; }\n\n    async getAddress(): Promise<string> { return this.address; }\n\n    connect(provider: null | Provider): BaseWallet {\n        return new BaseWallet(this.#signingKey, provider);\n    }\n\n    async signTransaction(tx: TransactionRequest): Promise<string> {\n\n        // Replace any Addressable or ENS name with an address\n        const { to, from } = await resolveProperties({\n            to: (tx.to ? resolveAddress(tx.to, this.provider): undefined),\n            from: (tx.from ? resolveAddress(tx.from, this.provider): undefined)\n        });\n\n        if (to != null) { tx.to = to; }\n        if (from != null) { tx.from = from; }\n\n        if (tx.from != null) {\n            assertArgument(getAddress(<string>(tx.from)) === this.address,\n                \"transaction from address mismatch\", \"tx.from\", tx.from);\n            delete tx.from;\n        }\n\n        // Build the transaction\n        const btx = Transaction.from(<TransactionLike<string>>tx);\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\n\n        return btx.serialized;\n    }\n\n    async signMessage(message: string | Uint8Array): Promise<string> {\n        return this.signMessageSync(message);\n    }\n\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\n    // all parameters are known?\n    /**\n     *  Returns the signature for %%message%% signed with this wallet.\n     */\n    signMessageSync(message: string | Uint8Array): string {\n        return this.signingKey.sign(hashMessage(message)).serialized;\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n\n        // Populate any ENS names\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name: string) => {\n            // @TODO: this should use resolveName; addresses don't\n            //        need a provider\n\n            assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"resolveName\",\n                info: { name }\n            });\n\n            const address = await this.provider.resolveName(name);\n            assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n                value: name\n            });\n\n            return address;\n        });\n\n        return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}