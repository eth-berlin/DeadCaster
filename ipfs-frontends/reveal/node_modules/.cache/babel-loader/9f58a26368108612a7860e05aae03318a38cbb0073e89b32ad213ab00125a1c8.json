{"ast":null,"code":"import { Token, Type } from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nfunction toToken(_data, _pos, prefix, length) {\n  return new Token(Type.map, length, prefix);\n}\nexport function decodeMapCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeMap8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeMap16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeMap32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeMap64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${decodeErrPrefix} 64-bit integer map lengths not supported`);\n  }\n  return toToken(data, pos, 9, l);\n}\nexport function decodeMapIndefinite(data, pos, _minor, options) {\n  if (options.allowIndefinite === false) {\n    throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);\n  }\n  return toToken(data, pos, 1, Infinity);\n}\nexport function encodeMap(buf, token) {\n  uint.encodeUintValue(buf, Type.map.majorEncoded, token.value);\n}\nencodeMap.compareTokens = uint.encodeUint.compareTokens;\nencodeMap.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};","map":{"version":3,"names":["Token","Type","uint","decodeErrPrefix","toToken","_data","_pos","prefix","length","map","decodeMapCompact","data","pos","minor","_options","decodeMap8","_minor","options","readUint8","decodeMap16","readUint16","decodeMap32","readUint32","decodeMap64","l","readUint64","Error","decodeMapIndefinite","allowIndefinite","Infinity","encodeMap","buf","token","encodeUintValue","majorEncoded","value","compareTokens","encodeUint","encodedSize"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/cborg/esm/lib/5map.js"],"sourcesContent":["import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nfunction toToken(_data, _pos, prefix, length) {\n  return new Token(Type.map, length, prefix);\n}\nexport function decodeMapCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeMap8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeMap16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeMap32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeMap64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer map lengths not supported`);\n  }\n  return toToken(data, pos, 9, l);\n}\nexport function decodeMapIndefinite(data, pos, _minor, options) {\n  if (options.allowIndefinite === false) {\n    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);\n  }\n  return toToken(data, pos, 1, Infinity);\n}\nexport function encodeMap(buf, token) {\n  uint.encodeUintValue(buf, Type.map.majorEncoded, token.value);\n}\nencodeMap.compareTokens = uint.encodeUint.compareTokens;\nencodeMap.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};"],"mappings":"AAAA,SACEA,KAAK,EACLC,IAAI,QACC,YAAY;AACnB,OAAO,KAAKC,IAAI,MAAM,YAAY;AAClC,SAASC,eAAe,QAAQ,aAAa;AAC7C,SAASC,OAAOA,CAACC,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAC5C,OAAO,IAAIR,KAAK,CAACC,IAAI,CAACQ,GAAG,EAAED,MAAM,EAAED,MAAM,CAAC;AAC5C;AACA,OAAO,SAASG,gBAAgBA,CAACC,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC3D,OAAOV,OAAO,CAACO,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEC,KAAK,CAAC;AACrC;AACA,OAAO,SAASE,UAAUA,CAACJ,IAAI,EAAEC,GAAG,EAAEI,MAAM,EAAEC,OAAO,EAAE;EACrD,OAAOb,OAAO,CAACO,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEV,IAAI,CAACgB,SAAS,CAACP,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEK,OAAO,CAAC,CAAC;AACtE;AACA,OAAO,SAASE,WAAWA,CAACR,IAAI,EAAEC,GAAG,EAAEI,MAAM,EAAEC,OAAO,EAAE;EACtD,OAAOb,OAAO,CAACO,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEV,IAAI,CAACkB,UAAU,CAACT,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEK,OAAO,CAAC,CAAC;AACvE;AACA,OAAO,SAASI,WAAWA,CAACV,IAAI,EAAEC,GAAG,EAAEI,MAAM,EAAEC,OAAO,EAAE;EACtD,OAAOb,OAAO,CAACO,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEV,IAAI,CAACoB,UAAU,CAACX,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEK,OAAO,CAAC,CAAC;AACvE;AACA,OAAO,SAASM,WAAWA,CAACZ,IAAI,EAAEC,GAAG,EAAEI,MAAM,EAAEC,OAAO,EAAE;EACtD,MAAMO,CAAC,GAAGtB,IAAI,CAACuB,UAAU,CAACd,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEK,OAAO,CAAC;EACjD,IAAI,OAAOO,CAAC,KAAK,QAAQ,EAAE;IACzB,MAAM,IAAIE,KAAK,CAAC,GAAIvB,eAAe,2CAA4C,CAAC;EAClF;EACA,OAAOC,OAAO,CAACO,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEY,CAAC,CAAC;AACjC;AACA,OAAO,SAASG,mBAAmBA,CAAChB,IAAI,EAAEC,GAAG,EAAEI,MAAM,EAAEC,OAAO,EAAE;EAC9D,IAAIA,OAAO,CAACW,eAAe,KAAK,KAAK,EAAE;IACrC,MAAM,IAAIF,KAAK,CAAC,GAAIvB,eAAe,sCAAuC,CAAC;EAC7E;EACA,OAAOC,OAAO,CAACO,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEiB,QAAQ,CAAC;AACxC;AACA,OAAO,SAASC,SAASA,CAACC,GAAG,EAAEC,KAAK,EAAE;EACpC9B,IAAI,CAAC+B,eAAe,CAACF,GAAG,EAAE9B,IAAI,CAACQ,GAAG,CAACyB,YAAY,EAAEF,KAAK,CAACG,KAAK,CAAC;AAC/D;AACAL,SAAS,CAACM,aAAa,GAAGlC,IAAI,CAACmC,UAAU,CAACD,aAAa;AACvDN,SAAS,CAACQ,WAAW,GAAG,SAASA,WAAWA,CAACN,KAAK,EAAE;EAClD,OAAO9B,IAAI,CAAC+B,eAAe,CAACK,WAAW,CAACN,KAAK,CAACG,KAAK,CAAC;AACtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}