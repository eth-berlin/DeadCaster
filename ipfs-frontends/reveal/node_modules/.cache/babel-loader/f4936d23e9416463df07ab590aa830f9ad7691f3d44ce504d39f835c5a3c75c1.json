{"ast":null,"code":"import { Token, Type } from './token.js';\nimport { assertEnoughData, decodeErrPrefix } from './common.js';\nimport * as uint from './0uint.js';\nimport { encodeBytes } from './2bytes.js';\nimport { toString, slice } from './byte-utils.js';\nfunction toToken(data, pos, prefix, length, options) {\n  const totLength = prefix + length;\n  assertEnoughData(data, pos, totLength);\n  const tok = new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);\n  if (options.retainStringBytes === true) {\n    tok.byteValue = slice(data, pos + prefix, pos + totLength);\n  }\n  return tok;\n}\nexport function decodeStringCompact(data, pos, minor, options) {\n  return toToken(data, pos, 1, minor, options);\n}\nexport function decodeString8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options), options);\n}\nexport function decodeString16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options), options);\n}\nexport function decodeString32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options), options);\n}\nexport function decodeString64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);\n  }\n  return toToken(data, pos, 9, l, options);\n}\nexport const encodeString = encodeBytes;","map":{"version":3,"names":["Token","Type","assertEnoughData","decodeErrPrefix","uint","encodeBytes","toString","slice","toToken","data","pos","prefix","length","options","totLength","tok","string","retainStringBytes","byteValue","decodeStringCompact","minor","decodeString8","_minor","readUint8","decodeString16","readUint16","decodeString32","readUint32","decodeString64","l","readUint64","Error","encodeString"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/cborg/esm/lib/3string.js"],"sourcesContent":["import {\n  Token,\n  Type\n} from './token.js';\nimport {\n  assertEnoughData,\n  decodeErrPrefix\n} from './common.js';\nimport * as uint from './0uint.js';\nimport { encodeBytes } from './2bytes.js';\nimport {\n  toString,\n  slice\n} from './byte-utils.js';\nfunction toToken(data, pos, prefix, length, options) {\n  const totLength = prefix + length;\n  assertEnoughData(data, pos, totLength);\n  const tok = new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);\n  if (options.retainStringBytes === true) {\n    tok.byteValue = slice(data, pos + prefix, pos + totLength);\n  }\n  return tok;\n}\nexport function decodeStringCompact(data, pos, minor, options) {\n  return toToken(data, pos, 1, minor, options);\n}\nexport function decodeString8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options), options);\n}\nexport function decodeString16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options), options);\n}\nexport function decodeString32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options), options);\n}\nexport function decodeString64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer string lengths not supported`);\n  }\n  return toToken(data, pos, 9, l, options);\n}\nexport const encodeString = encodeBytes;"],"mappings":"AAAA,SACEA,KAAK,EACLC,IAAI,QACC,YAAY;AACnB,SACEC,gBAAgB,EAChBC,eAAe,QACV,aAAa;AACpB,OAAO,KAAKC,IAAI,MAAM,YAAY;AAClC,SAASC,WAAW,QAAQ,aAAa;AACzC,SACEC,QAAQ,EACRC,KAAK,QACA,iBAAiB;AACxB,SAASC,OAAOA,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACnD,MAAMC,SAAS,GAAGH,MAAM,GAAGC,MAAM;EACjCV,gBAAgB,CAACO,IAAI,EAAEC,GAAG,EAAEI,SAAS,CAAC;EACtC,MAAMC,GAAG,GAAG,IAAIf,KAAK,CAACC,IAAI,CAACe,MAAM,EAAEV,QAAQ,CAACG,IAAI,EAAEC,GAAG,GAAGC,MAAM,EAAED,GAAG,GAAGI,SAAS,CAAC,EAAEA,SAAS,CAAC;EAC5F,IAAID,OAAO,CAACI,iBAAiB,KAAK,IAAI,EAAE;IACtCF,GAAG,CAACG,SAAS,GAAGX,KAAK,CAACE,IAAI,EAAEC,GAAG,GAAGC,MAAM,EAAED,GAAG,GAAGI,SAAS,CAAC;EAC5D;EACA,OAAOC,GAAG;AACZ;AACA,OAAO,SAASI,mBAAmBA,CAACV,IAAI,EAAEC,GAAG,EAAEU,KAAK,EAAEP,OAAO,EAAE;EAC7D,OAAOL,OAAO,CAACC,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEU,KAAK,EAAEP,OAAO,CAAC;AAC9C;AACA,OAAO,SAASQ,aAAaA,CAACZ,IAAI,EAAEC,GAAG,EAAEY,MAAM,EAAET,OAAO,EAAE;EACxD,OAAOL,OAAO,CAACC,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEN,IAAI,CAACmB,SAAS,CAACd,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEG,OAAO,CAAC,EAAEA,OAAO,CAAC;AAC/E;AACA,OAAO,SAASW,cAAcA,CAACf,IAAI,EAAEC,GAAG,EAAEY,MAAM,EAAET,OAAO,EAAE;EACzD,OAAOL,OAAO,CAACC,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEN,IAAI,CAACqB,UAAU,CAAChB,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEG,OAAO,CAAC,EAAEA,OAAO,CAAC;AAChF;AACA,OAAO,SAASa,cAAcA,CAACjB,IAAI,EAAEC,GAAG,EAAEY,MAAM,EAAET,OAAO,EAAE;EACzD,OAAOL,OAAO,CAACC,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEN,IAAI,CAACuB,UAAU,CAAClB,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEG,OAAO,CAAC,EAAEA,OAAO,CAAC;AAChF;AACA,OAAO,SAASe,cAAcA,CAACnB,IAAI,EAAEC,GAAG,EAAEY,MAAM,EAAET,OAAO,EAAE;EACzD,MAAMgB,CAAC,GAAGzB,IAAI,CAAC0B,UAAU,CAACrB,IAAI,EAAEC,GAAG,GAAG,CAAC,EAAEG,OAAO,CAAC;EACjD,IAAI,OAAOgB,CAAC,KAAK,QAAQ,EAAE;IACzB,MAAM,IAAIE,KAAK,CAAC,GAAI5B,eAAe,8CAA+C,CAAC;EACrF;EACA,OAAOK,OAAO,CAACC,IAAI,EAAEC,GAAG,EAAE,CAAC,EAAEmB,CAAC,EAAEhB,OAAO,CAAC;AAC1C;AACA,OAAO,MAAMmB,YAAY,GAAG3B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}