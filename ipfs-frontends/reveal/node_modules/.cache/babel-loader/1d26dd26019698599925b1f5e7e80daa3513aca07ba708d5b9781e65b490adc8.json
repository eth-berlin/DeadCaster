{"ast":null,"code":"import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */BigInt(0);\nconst _1n = /* @__PURE__ */BigInt(1);\nconst _2n = /* @__PURE__ */BigInt(2);\nconst _7n = /* @__PURE__ */BigInt(7);\nconst _256n = /* @__PURE__ */BigInt(256);\nconst _0x71n = /* @__PURE__ */BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */BigInt(j)) - _1n;\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s) {\n  let rounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\nexport class Keccak extends Hash {\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(blockLen, suffix, outputLen) {\n    let enableXOF = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let rounds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 24;\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    this.pos = 0;\n    this.posOut = 0;\n    this.finished = false;\n    this.destroyed = false;\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data) {\n    exists(this);\n    const {\n      blockLen,\n      state\n    } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const {\n      state,\n      suffix,\n      pos,\n      blockLen\n    } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  writeInto(out) {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const {\n      blockLen\n    } = this;\n    for (let pos = 0, len = out.length; pos < len;) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out) {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes) {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to) {\n    const {\n      blockLen,\n      suffix,\n      outputLen,\n      rounds,\n      enableXOF\n    } = this;\n    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts(function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true);\n});\nexport const shake128 = /* @__PURE__ */genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */genShake(0x1f, 136, 256 / 8);","map":{"version":3,"names":["bytes","exists","number","output","rotlBH","rotlBL","rotlSH","rotlSL","split","Hash","u32","toBytes","wrapConstructor","wrapXOFConstructorWithOpts","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","h","l","s","rotlL","keccakP","rounds","arguments","length","undefined","B","Uint32Array","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","Keccak","constructor","blockLen","suffix","outputLen","enableXOF","pos","posOut","finished","destroyed","Error","state","Uint8Array","state32","keccak","update","data","len","take","Math","min","i","finish","writeInto","out","bufferOut","set","subarray","xofInto","xof","digestInto","destroy","digest","_cloneInto","to","gen","sha3_224","sha3_256","sha3_384","sha3_512","keccak_224","keccak_256","keccak_384","keccak_512","genShake","opts","dkLen","shake128","shake256"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@noble/hashes/src/sha3.ts"],"sourcesContent":["import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}