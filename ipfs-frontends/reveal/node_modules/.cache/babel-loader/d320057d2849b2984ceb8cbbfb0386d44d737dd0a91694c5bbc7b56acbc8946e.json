{"ast":null,"code":"import _defineProperty from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateMethodInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldSet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _classPrivateFieldGet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nvar _TokenString;\n/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */\nimport { defineProperties, getBigInt, getNumber, assert, assertPrivate, assertArgument } from \"../utils/index.js\";\nimport { id } from \"../hash/index.js\";\n;\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items) {\n  const result = new Set();\n  items.forEach(k => result.add(k));\n  return Object.freeze(result);\n}\nconst _kwVisibDeploy = \"external public payable override\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view override\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\nconst _kwOther = \"tuple returns\";\n// All Keywords\nconst _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n// Single character tokens\nconst SimpleTokens = {\n  \"(\": \"OPEN_PAREN\",\n  \")\": \"CLOSE_PAREN\",\n  \"[\": \"OPEN_BRACKET\",\n  \"]\": \"CLOSE_BRACKET\",\n  \",\": \"COMMA\",\n  \"@\": \"AT\"\n};\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\nvar _offset = /*#__PURE__*/new WeakMap();\nvar _tokens = /*#__PURE__*/new WeakMap();\nvar _TokenString_brand = /*#__PURE__*/new WeakSet();\nclass TokenString {\n  get offset() {\n    return _classPrivateFieldGet(_offset, this);\n  }\n  get length() {\n    return _classPrivateFieldGet(_tokens, this).length - _classPrivateFieldGet(_offset, this);\n  }\n  constructor(tokens) {\n    _classPrivateMethodInitSpec(this, _TokenString_brand);\n    _classPrivateFieldInitSpec(this, _offset, void 0);\n    _classPrivateFieldInitSpec(this, _tokens, void 0);\n    _classPrivateFieldSet(_offset, this, 0);\n    _classPrivateFieldSet(_tokens, this, tokens.slice());\n  }\n  clone() {\n    return new TokenString(_classPrivateFieldGet(_tokens, this));\n  }\n  reset() {\n    _classPrivateFieldSet(_offset, this, 0);\n  }\n  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n  popKeyword(allowed) {\n    const top = this.peek();\n    if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n      throw new Error(\"expected keyword \".concat(top.text));\n    }\n    return this.pop().text;\n  }\n  // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n  popType(type) {\n    if (this.peek().type !== type) {\n      const top = this.peek();\n      throw new Error(\"expected \".concat(type, \"; got \").concat(top.type, \" \").concat(JSON.stringify(top.text)));\n    }\n    return this.pop().text;\n  }\n  // Pops and returns a \"(\" TOKENS \")\"\n  popParen() {\n    const top = this.peek();\n    if (top.type !== \"OPEN_PAREN\") {\n      throw new Error(\"bad start\");\n    }\n    const result = _assertClassBrand(_TokenString_brand, this, _subTokenString).call(this, _classPrivateFieldGet(_offset, this) + 1, top.match + 1);\n    _classPrivateFieldSet(_offset, this, top.match + 1);\n    return result;\n  }\n  // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n  popParams() {\n    const top = this.peek();\n    if (top.type !== \"OPEN_PAREN\") {\n      throw new Error(\"bad start\");\n    }\n    const result = [];\n    while (_classPrivateFieldGet(_offset, this) < top.match - 1) {\n      const link = this.peek().linkNext;\n      result.push(_assertClassBrand(_TokenString_brand, this, _subTokenString).call(this, _classPrivateFieldGet(_offset, this) + 1, link));\n      _classPrivateFieldSet(_offset, this, link);\n    }\n    _classPrivateFieldSet(_offset, this, top.match + 1);\n    return result;\n  }\n  // Returns the top Token, throwing if out of tokens\n  peek() {\n    if (_classPrivateFieldGet(_offset, this) >= _classPrivateFieldGet(_tokens, this).length) {\n      throw new Error(\"out-of-bounds\");\n    }\n    return _classPrivateFieldGet(_tokens, this)[_classPrivateFieldGet(_offset, this)];\n  }\n  // Returns the next value, if it is a keyword in `allowed`\n  peekKeyword(allowed) {\n    const top = this.peekType(\"KEYWORD\");\n    return top != null && allowed.has(top) ? top : null;\n  }\n  // Returns the value of the next token if it is `type`\n  peekType(type) {\n    if (this.length === 0) {\n      return null;\n    }\n    const top = this.peek();\n    return top.type === type ? top.text : null;\n  }\n  // Returns the next token; throws if out of tokens\n  pop() {\n    var _this$offset, _this$offset2;\n    const result = this.peek();\n    _classPrivateFieldSet(_offset, this, (_this$offset = _classPrivateFieldGet(_offset, this), _this$offset2 = _this$offset++, _this$offset)), _this$offset2;\n    return result;\n  }\n  toString() {\n    const tokens = [];\n    for (let i = _classPrivateFieldGet(_offset, this); i < _classPrivateFieldGet(_tokens, this).length; i++) {\n      const token = _classPrivateFieldGet(_tokens, this)[i];\n      tokens.push(\"\".concat(token.type, \":\").concat(token.text));\n    }\n    return \"<TokenString \".concat(tokens.join(\" \"), \">\");\n  }\n}\n_TokenString = TokenString;\nfunction _subTokenString() {\n  let from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return new _TokenString(_classPrivateFieldGet(_tokens, this).slice(from, to).map(t => {\n    return Object.freeze(Object.assign({}, t, {\n      match: t.match - from,\n      linkBack: t.linkBack - from,\n      linkNext: t.linkNext - from\n    }));\n  }));\n}\nfunction lex(text) {\n  const tokens = [];\n  const throwError = message => {\n    const token = offset < text.length ? JSON.stringify(text[offset]) : \"$EOI\";\n    throw new Error(\"invalid token \".concat(token, \" at \").concat(offset, \": \").concat(message));\n  };\n  let brackets = [];\n  let commas = [];\n  let offset = 0;\n  while (offset < text.length) {\n    // Strip off any leading whitespace\n    let cur = text.substring(offset);\n    let match = cur.match(regexWhitespacePrefix);\n    if (match) {\n      offset += match[1].length;\n      cur = text.substring(offset);\n    }\n    const token = {\n      depth: brackets.length,\n      linkBack: -1,\n      linkNext: -1,\n      match: -1,\n      type: \"\",\n      text: \"\",\n      offset,\n      value: -1\n    };\n    tokens.push(token);\n    let type = SimpleTokens[cur[0]] || \"\";\n    if (type) {\n      token.type = type;\n      token.text = cur[0];\n      offset++;\n      if (type === \"OPEN_PAREN\") {\n        brackets.push(tokens.length - 1);\n        commas.push(tokens.length - 1);\n      } else if (type == \"CLOSE_PAREN\") {\n        if (brackets.length === 0) {\n          throwError(\"no matching open bracket\");\n        }\n        token.match = brackets.pop();\n        tokens[token.match].match = tokens.length - 1;\n        token.depth--;\n        token.linkBack = commas.pop();\n        tokens[token.linkBack].linkNext = tokens.length - 1;\n      } else if (type === \"COMMA\") {\n        token.linkBack = commas.pop();\n        tokens[token.linkBack].linkNext = tokens.length - 1;\n        commas.push(tokens.length - 1);\n      } else if (type === \"OPEN_BRACKET\") {\n        token.type = \"BRACKET\";\n      } else if (type === \"CLOSE_BRACKET\") {\n        // Remove the CLOSE_BRACKET\n        let suffix = tokens.pop().text;\n        if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n          const value = tokens.pop().text;\n          suffix = value + suffix;\n          tokens[tokens.length - 1].value = getNumber(value);\n        }\n        if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n          throw new Error(\"missing opening bracket\");\n        }\n        tokens[tokens.length - 1].text += suffix;\n      }\n      continue;\n    }\n    match = cur.match(regexIdPrefix);\n    if (match) {\n      token.text = match[1];\n      offset += token.text.length;\n      if (Keywords.has(token.text)) {\n        token.type = \"KEYWORD\";\n        continue;\n      }\n      if (token.text.match(regexType)) {\n        token.type = \"TYPE\";\n        continue;\n      }\n      token.type = \"ID\";\n      continue;\n    }\n    match = cur.match(regexNumberPrefix);\n    if (match) {\n      token.text = match[1];\n      token.type = \"NUMBER\";\n      offset += token.text.length;\n      continue;\n    }\n    throw new Error(\"unexpected token \".concat(JSON.stringify(cur[0]), \" at position \").concat(offset));\n  }\n  return new TokenString(tokens.map(t => Object.freeze(t)));\n}\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set, allowed) {\n  let included = [];\n  for (const key in allowed.keys()) {\n    if (set.has(key)) {\n      included.push(key);\n    }\n  }\n  if (included.length > 1) {\n    throw new Error(\"conflicting types: \".concat(included.join(\", \")));\n  }\n}\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n// ...the name with an optional type, returning the name\nfunction consumeName(type, tokens) {\n  if (tokens.peekKeyword(KwTypes)) {\n    const keyword = tokens.pop().text;\n    if (keyword !== type) {\n      throw new Error(\"expected \".concat(type, \", got \").concat(keyword));\n    }\n  }\n  return tokens.popType(\"ID\");\n}\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens, allowed) {\n  const keywords = new Set();\n  while (true) {\n    const keyword = tokens.peekType(\"KEYWORD\");\n    if (keyword == null || allowed && !allowed.has(keyword)) {\n      break;\n    }\n    tokens.pop();\n    if (keywords.has(keyword)) {\n      throw new Error(\"duplicate keywords: \".concat(JSON.stringify(keyword)));\n    }\n    keywords.add(keyword);\n  }\n  return Object.freeze(keywords);\n}\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens) {\n  let modifiers = consumeKeywords(tokens, KwVisib);\n  // Detect conflicting modifiers\n  allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n  allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n  // Process mutability states\n  if (modifiers.has(\"view\")) {\n    return \"view\";\n  }\n  if (modifiers.has(\"pure\")) {\n    return \"pure\";\n  }\n  if (modifiers.has(\"payable\")) {\n    return \"payable\";\n  }\n  if (modifiers.has(\"nonpayable\")) {\n    return \"nonpayable\";\n  }\n  // Process legacy `constant` last\n  if (modifiers.has(\"constant\")) {\n    return \"view\";\n  }\n  return \"nonpayable\";\n}\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens, allowIndexed) {\n  return tokens.popParams().map(t => ParamType.from(t, allowIndexed));\n}\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens) {\n  if (tokens.peekType(\"AT\")) {\n    tokens.pop();\n    if (tokens.peekType(\"NUMBER\")) {\n      return getBigInt(tokens.pop().text);\n    }\n    throw new Error(\"invalid gas\");\n  }\n  return null;\n}\nfunction consumeEoi(tokens) {\n  if (tokens.length) {\n    throw new Error(\"unexpected tokens at offset \".concat(tokens.offset, \": \").concat(tokens.toString()));\n  }\n}\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nfunction verifyBasicType(type) {\n  const match = type.match(regexType);\n  assertArgument(match, \"invalid type\", \"type\", type);\n  if (type === \"uint\") {\n    return \"uint256\";\n  }\n  if (type === \"int\") {\n    return \"int256\";\n  }\n  if (match[2]) {\n    // bytesXX\n    const length = parseInt(match[2]);\n    assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n  } else if (match[3]) {\n    // intXX or uintXX\n    const size = parseInt(match[3]);\n    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, \"invalid numeric width\", \"type\", type);\n  }\n  return type;\n}\n// Make the Fragment constructors effectively private\nconst _guard = {};\nconst internal = Symbol.for(\"_ethers_internal\");\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */\nvar _ParamType_brand = /*#__PURE__*/new WeakSet();\nexport class ParamType {\n  /**\n   *  @private\n   */\n  constructor(guard, name, type, baseType, indexed, _components, arrayLength, arrayChildren) {\n    _classPrivateMethodInitSpec(this, _ParamType_brand);\n    /**\n     *  The local name of the parameter (or ``\"\"`` if unbound)\n     */\n    _defineProperty(this, \"name\", void 0);\n    /**\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n     *  ``\"uint256[3][]\"``)\n     */\n    _defineProperty(this, \"type\", void 0);\n    /**\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n     */\n    _defineProperty(this, \"baseType\", void 0);\n    /**\n     *  True if the parameters is indexed.\n     *\n     *  For non-indexable types this is ``null``.\n     */\n    _defineProperty(this, \"indexed\", void 0);\n    /**\n     *  The components for the tuple.\n     *\n     *  For non-tuple types this is ``null``.\n     */\n    _defineProperty(this, \"components\", void 0);\n    /**\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\n     *\n     *  For non-array types this is ``null``.\n     */\n    _defineProperty(this, \"arrayLength\", void 0);\n    /**\n     *  The type of each child in the array.\n     *\n     *  For non-array types this is ``null``.\n     */\n    _defineProperty(this, \"arrayChildren\", void 0);\n    assertPrivate(guard, _guard, \"ParamType\");\n    Object.defineProperty(this, internal, {\n      value: ParamTypeInternal\n    });\n    if (_components) {\n      _components = Object.freeze(_components.slice());\n    }\n    if (baseType === \"array\") {\n      if (arrayLength == null || arrayChildren == null) {\n        throw new Error(\"\");\n      }\n    } else if (arrayLength != null || arrayChildren != null) {\n      throw new Error(\"\");\n    }\n    if (baseType === \"tuple\") {\n      if (_components == null) {\n        throw new Error(\"\");\n      }\n    } else if (_components != null) {\n      throw new Error(\"\");\n    }\n    defineProperties(this, {\n      name,\n      type,\n      baseType,\n      indexed,\n      components: _components,\n      arrayLength,\n      arrayChildren\n    });\n  }\n  /**\n   *  Return a string representation of this type.\n   *\n   *  For example,\n   *\n   *  ``sighash\" => \"(uint256,address)\"``\n   *\n   *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n   *\n   *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      const name = this.name || \"\";\n      if (this.isArray()) {\n        const result = JSON.parse(this.arrayChildren.format(\"json\"));\n        result.name = name;\n        result.type += \"[\".concat(this.arrayLength < 0 ? \"\" : String(this.arrayLength), \"]\");\n        return JSON.stringify(result);\n      }\n      const result = {\n        type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n        name\n      };\n      if (typeof this.indexed === \"boolean\") {\n        result.indexed = this.indexed;\n      }\n      if (this.isTuple()) {\n        result.components = this.components.map(c => JSON.parse(c.format(format)));\n      }\n      return JSON.stringify(result);\n    }\n    let result = \"\";\n    // Array\n    if (this.isArray()) {\n      result += this.arrayChildren.format(format);\n      result += \"[\".concat(this.arrayLength < 0 ? \"\" : String(this.arrayLength), \"]\");\n    } else {\n      if (this.isTuple()) {\n        result += \"(\" + this.components.map(comp => comp.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n      } else {\n        result += this.type;\n      }\n    }\n    if (format !== \"sighash\") {\n      if (this.indexed === true) {\n        result += \" indexed\";\n      }\n      if (format === \"full\" && this.name) {\n        result += \" \" + this.name;\n      }\n    }\n    return result;\n  }\n  /**\n   *  Returns true if %%this%% is an Array type.\n   *\n   *  This provides a type gaurd ensuring that [[arrayChildren]]\n   *  and [[arrayLength]] are non-null.\n   */\n  isArray() {\n    return this.baseType === \"array\";\n  }\n  /**\n   *  Returns true if %%this%% is a Tuple type.\n   *\n   *  This provides a type gaurd ensuring that [[components]]\n   *  is non-null.\n   */\n  isTuple() {\n    return this.baseType === \"tuple\";\n  }\n  /**\n   *  Returns true if %%this%% is an Indexable type.\n   *\n   *  This provides a type gaurd ensuring that [[indexed]]\n   *  is non-null.\n   */\n  isIndexable() {\n    return this.indexed != null;\n  }\n  /**\n   *  Walks the **ParamType** with %%value%%, calling %%process%%\n   *  on each type, destructing the %%value%% recursively.\n   */\n  walk(value, process) {\n    if (this.isArray()) {\n      if (!Array.isArray(value)) {\n        throw new Error(\"invalid array value\");\n      }\n      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n        throw new Error(\"array is wrong length\");\n      }\n      const _this = this;\n      return value.map(v => _this.arrayChildren.walk(v, process));\n    }\n    if (this.isTuple()) {\n      if (!Array.isArray(value)) {\n        throw new Error(\"invalid tuple value\");\n      }\n      if (value.length !== this.components.length) {\n        throw new Error(\"array is wrong length\");\n      }\n      const _this = this;\n      return value.map((v, i) => _this.components[i].walk(v, process));\n    }\n    return process(this.type, value);\n  }\n  /**\n   *  Walks the **ParamType** with %%value%%, asynchronously calling\n   *  %%process%% on each type, destructing the %%value%% recursively.\n   *\n   *  This can be used to resolve ENS naes by walking and resolving each\n   *  ``\"address\"`` type.\n   */\n  async walkAsync(value, process) {\n    const promises = [];\n    const result = [value];\n    _assertClassBrand(_ParamType_brand, this, _walkAsync).call(this, promises, value, process, value => {\n      result[0] = value;\n    });\n    if (promises.length) {\n      await Promise.all(promises);\n    }\n    return result[0];\n  }\n  /**\n   *  Creates a new **ParamType** for %%obj%%.\n   *\n   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n   *  otherwise the ``indexed`` keyword will throw an error.\n   */\n  static from(obj, allowIndexed) {\n    if (ParamType.isParamType(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return ParamType.from(lex(obj), allowIndexed);\n      } catch (error) {\n        assertArgument(false, \"invalid param type\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      let type = \"\",\n        baseType = \"\";\n      let comps = null;\n      if (consumeKeywords(obj, setify([\"tuple\"])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n        // Tuple\n        baseType = \"tuple\";\n        comps = obj.popParams().map(t => ParamType.from(t));\n        type = \"tuple(\".concat(comps.map(c => c.format()).join(\",\"), \")\");\n      } else {\n        // Normal\n        type = verifyBasicType(obj.popType(\"TYPE\"));\n        baseType = type;\n      }\n      // Check for Array\n      let arrayChildren = null;\n      let arrayLength = null;\n      while (obj.length && obj.peekType(\"BRACKET\")) {\n        const bracket = obj.pop(); //arrays[i];\n        arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n        arrayLength = bracket.value;\n        type += bracket.text;\n        baseType = \"array\";\n        comps = null;\n      }\n      let indexed = null;\n      const keywords = consumeKeywords(obj, KwModifiers);\n      if (keywords.has(\"indexed\")) {\n        if (!allowIndexed) {\n          throw new Error(\"\");\n        }\n        indexed = true;\n      }\n      const name = obj.peekType(\"ID\") ? obj.pop().text : \"\";\n      if (obj.length) {\n        throw new Error(\"leftover tokens\");\n      }\n      return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n    }\n    const name = obj.name;\n    assertArgument(!name || typeof name === \"string\" && name.match(regexId), \"invalid name\", \"obj.name\", name);\n    let indexed = obj.indexed;\n    if (indexed != null) {\n      assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n      indexed = !!indexed;\n    }\n    let type = obj.type;\n    let arrayMatch = type.match(regexArrayType);\n    if (arrayMatch) {\n      const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n      const arrayChildren = ParamType.from({\n        type: arrayMatch[1],\n        components: obj.components\n      });\n      return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n    }\n    if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\n      const comps = obj.components != null ? obj.components.map(c => ParamType.from(c)) : null;\n      const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n      // @TODO: use lexer to validate and normalize type\n      return tuple;\n    }\n    type = verifyBasicType(obj.type);\n    return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n  }\n  /**\n   *  Returns true if %%value%% is a **ParamType**.\n   */\n  static isParamType(value) {\n    return value && value[internal] === ParamTypeInternal;\n  }\n}\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */\nfunction _walkAsync(promises, value, process, setValue) {\n  if (this.isArray()) {\n    if (!Array.isArray(value)) {\n      throw new Error(\"invalid array value\");\n    }\n    if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n      throw new Error(\"array is wrong length\");\n    }\n    const childType = this.arrayChildren;\n    const result = value.slice();\n    result.forEach((value, index) => {\n      _assertClassBrand(_ParamType_brand, childType, _walkAsync).call(childType, promises, value, process, value => {\n        result[index] = value;\n      });\n    });\n    setValue(result);\n    return;\n  }\n  if (this.isTuple()) {\n    const components = this.components;\n    // Convert the object into an array\n    let result;\n    if (Array.isArray(value)) {\n      result = value.slice();\n    } else {\n      if (value == null || typeof value !== \"object\") {\n        throw new Error(\"invalid tuple value\");\n      }\n      result = components.map(param => {\n        if (!param.name) {\n          throw new Error(\"cannot use object value with unnamed components\");\n        }\n        if (!(param.name in value)) {\n          throw new Error(\"missing value for component \".concat(param.name));\n        }\n        return value[param.name];\n      });\n    }\n    if (result.length !== this.components.length) {\n      throw new Error(\"array is wrong length\");\n    }\n    result.forEach((value, index) => {\n      var _components$index;\n      _assertClassBrand(_ParamType_brand, _components$index = components[index], _walkAsync).call(_components$index, promises, value, process, value => {\n        result[index] = value;\n      });\n    });\n    setValue(result);\n    return;\n  }\n  const result = process(this.type, value);\n  if (result.then) {\n    promises.push(async function () {\n      setValue(await result);\n    }());\n  } else {\n    setValue(result);\n  }\n}\nexport class Fragment {\n  /**\n   *  @private\n   */\n  constructor(guard, type, inputs) {\n    /**\n     *  The type of the fragment.\n     */\n    _defineProperty(this, \"type\", void 0);\n    /**\n     *  The inputs for the fragment.\n     */\n    _defineProperty(this, \"inputs\", void 0);\n    assertPrivate(guard, _guard, \"Fragment\");\n    inputs = Object.freeze(inputs.slice());\n    defineProperties(this, {\n      type,\n      inputs\n    });\n  }\n  /**\n   *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n   *  ABI frgament type.\n   */\n  static from(obj) {\n    if (typeof obj === \"string\") {\n      // Try parsing JSON...\n      try {\n        Fragment.from(JSON.parse(obj));\n      } catch (e) {}\n      // ...otherwise, use the human-readable lexer\n      return Fragment.from(lex(obj));\n    }\n    if (obj instanceof TokenString) {\n      // Human-readable ABI (already lexed)\n      const type = obj.peekKeyword(KwTypes);\n      switch (type) {\n        case \"constructor\":\n          return ConstructorFragment.from(obj);\n        case \"error\":\n          return ErrorFragment.from(obj);\n        case \"event\":\n          return EventFragment.from(obj);\n        case \"fallback\":\n        case \"receive\":\n          return FallbackFragment.from(obj);\n        case \"function\":\n          return FunctionFragment.from(obj);\n        case \"struct\":\n          return StructFragment.from(obj);\n      }\n    } else if (typeof obj === \"object\") {\n      // JSON ABI\n      switch (obj.type) {\n        case \"constructor\":\n          return ConstructorFragment.from(obj);\n        case \"error\":\n          return ErrorFragment.from(obj);\n        case \"event\":\n          return EventFragment.from(obj);\n        case \"fallback\":\n        case \"receive\":\n          return FallbackFragment.from(obj);\n        case \"function\":\n          return FunctionFragment.from(obj);\n        case \"struct\":\n          return StructFragment.from(obj);\n      }\n      assert(false, \"unsupported type: \".concat(obj.type), \"UNSUPPORTED_OPERATION\", {\n        operation: \"Fragment.from\"\n      });\n    }\n    assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n  }\n  /**\n   *  Returns true if %%value%% is a [[ConstructorFragment]].\n   */\n  static isConstructor(value) {\n    return ConstructorFragment.isFragment(value);\n  }\n  /**\n   *  Returns true if %%value%% is an [[ErrorFragment]].\n   */\n  static isError(value) {\n    return ErrorFragment.isFragment(value);\n  }\n  /**\n   *  Returns true if %%value%% is an [[EventFragment]].\n   */\n  static isEvent(value) {\n    return EventFragment.isFragment(value);\n  }\n  /**\n   *  Returns true if %%value%% is a [[FunctionFragment]].\n   */\n  static isFunction(value) {\n    return FunctionFragment.isFragment(value);\n  }\n  /**\n   *  Returns true if %%value%% is a [[StructFragment]].\n   */\n  static isStruct(value) {\n    return StructFragment.isFragment(value);\n  }\n}\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */\nexport class NamedFragment extends Fragment {\n  /**\n   *  @private\n   */\n  constructor(guard, type, name, inputs) {\n    super(guard, type, inputs);\n    /**\n     *  The name of the fragment.\n     */\n    _defineProperty(this, \"name\", void 0);\n    assertArgument(typeof name === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n    inputs = Object.freeze(inputs.slice());\n    defineProperties(this, {\n      name\n    });\n  }\n}\nfunction joinParams(format, params) {\n  return \"(\" + params.map(p => p.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n}\n/**\n *  A Fragment which represents a //Custom Error//.\n */\nexport class ErrorFragment extends NamedFragment {\n  /**\n   *  @private\n   */\n  constructor(guard, name, inputs) {\n    super(guard, \"error\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: ErrorFragmentInternal\n    });\n  }\n  /**\n   *  The Custom Error selector.\n   */\n  get selector() {\n    return id(this.format(\"sighash\")).substring(0, 10);\n  }\n  /**\n   *  Returns a string representation of this fragment as %%format%%.\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"error\",\n        name: this.name,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format)))\n      });\n    }\n    const result = [];\n    if (format !== \"sighash\") {\n      result.push(\"error\");\n    }\n    result.push(this.name + joinParams(format, this.inputs));\n    return result.join(\" \");\n  }\n  /**\n   *  Returns a new **ErrorFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (ErrorFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      return ErrorFragment.from(lex(obj));\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"error\", obj);\n      const inputs = consumeParams(obj);\n      consumeEoi(obj);\n      return new ErrorFragment(_guard, name, inputs);\n    }\n    return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is an\n   *  **ErrorFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === ErrorFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents an Event.\n */\nexport class EventFragment extends NamedFragment {\n  /**\n   *  @private\n   */\n  constructor(guard, name, inputs, anonymous) {\n    super(guard, \"event\", name, inputs);\n    /**\n     *  Whether this event is anonymous.\n     */\n    _defineProperty(this, \"anonymous\", void 0);\n    Object.defineProperty(this, internal, {\n      value: EventFragmentInternal\n    });\n    defineProperties(this, {\n      anonymous\n    });\n  }\n  /**\n   *  The Event topic hash.\n   */\n  get topicHash() {\n    return id(this.format(\"sighash\"));\n  }\n  /**\n   *  Returns a string representation of this event as %%format%%.\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"event\",\n        anonymous: this.anonymous,\n        name: this.name,\n        inputs: this.inputs.map(i => JSON.parse(i.format(format)))\n      });\n    }\n    const result = [];\n    if (format !== \"sighash\") {\n      result.push(\"event\");\n    }\n    result.push(this.name + joinParams(format, this.inputs));\n    if (format !== \"sighash\" && this.anonymous) {\n      result.push(\"anonymous\");\n    }\n    return result.join(\" \");\n  }\n  /**\n   *  Return the topic hash for an event with %%name%% and %%params%%.\n   */\n  static getTopicHash(name, params) {\n    params = (params || []).map(p => ParamType.from(p));\n    const fragment = new EventFragment(_guard, name, params, false);\n    return fragment.topicHash;\n  }\n  /**\n   *  Returns a new **EventFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (EventFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return EventFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid event fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"event\", obj);\n      const inputs = consumeParams(obj, true);\n      const anonymous = !!consumeKeywords(obj, setify([\"anonymous\"])).has(\"anonymous\");\n      consumeEoi(obj);\n      return new EventFragment(_guard, name, inputs, anonymous);\n    }\n    return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(p => ParamType.from(p, true)) : [], !!obj.anonymous);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is an\n   *  **EventFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === EventFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents a constructor.\n */\nexport class ConstructorFragment extends Fragment {\n  /**\n   *  @private\n   */\n  constructor(guard, type, inputs, payable, gas) {\n    super(guard, type, inputs);\n    /**\n     *  Whether the constructor can receive an endowment.\n     */\n    _defineProperty(this, \"payable\", void 0);\n    /**\n     *  The recommended gas limit for deployment or ``null``.\n     */\n    _defineProperty(this, \"gas\", void 0);\n    Object.defineProperty(this, internal, {\n      value: ConstructorFragmentInternal\n    });\n    defineProperties(this, {\n      payable,\n      gas\n    });\n  }\n  /**\n   *  Returns a string representation of this constructor as %%format%%.\n   */\n  format(format) {\n    assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"format(sighash)\"\n    });\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"constructor\",\n        stateMutability: this.payable ? \"payable\" : \"undefined\",\n        payable: this.payable,\n        gas: this.gas != null ? this.gas : undefined,\n        inputs: this.inputs.map(i => JSON.parse(i.format(format)))\n      });\n    }\n    const result = [\"constructor\".concat(joinParams(format, this.inputs))];\n    if (this.payable) {\n      result.push(\"payable\");\n    }\n    if (this.gas != null) {\n      result.push(\"@\".concat(this.gas.toString()));\n    }\n    return result.join(\" \");\n  }\n  /**\n   *  Returns a new **ConstructorFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (ConstructorFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return ConstructorFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      consumeKeywords(obj, setify([\"constructor\"]));\n      const inputs = consumeParams(obj);\n      const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n      const gas = consumeGas(obj);\n      consumeEoi(obj);\n      return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n    }\n    return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is a\n   *  **ConstructorFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === ConstructorFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FallbackFragment extends Fragment {\n  constructor(guard, inputs, payable) {\n    super(guard, \"fallback\", inputs);\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    _defineProperty(this, \"payable\", void 0);\n    Object.defineProperty(this, internal, {\n      value: FallbackFragmentInternal\n    });\n    defineProperties(this, {\n      payable\n    });\n  }\n  /**\n   *  Returns a string representation of this fallback as %%format%%.\n   */\n  format(format) {\n    const type = this.inputs.length === 0 ? \"receive\" : \"fallback\";\n    if (format === \"json\") {\n      const stateMutability = this.payable ? \"payable\" : \"nonpayable\";\n      return JSON.stringify({\n        type,\n        stateMutability\n      });\n    }\n    return \"\".concat(type, \"()\").concat(this.payable ? \" payable\" : \"\");\n  }\n  /**\n   *  Returns a new **FallbackFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (FallbackFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return FallbackFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const errorObj = obj.toString();\n      const topIsValid = obj.peekKeyword(setify([\"fallback\", \"receive\"]));\n      assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n      const type = obj.popKeyword(setify([\"fallback\", \"receive\"]));\n      // receive()\n      if (type === \"receive\") {\n        const inputs = consumeParams(obj);\n        assertArgument(inputs.length === 0, \"receive cannot have arguments\", \"obj.inputs\", inputs);\n        consumeKeywords(obj, setify([\"payable\"]));\n        consumeEoi(obj);\n        return new FallbackFragment(_guard, [], true);\n      }\n      // fallback() [payable]\n      // fallback(bytes) [payable] returns (bytes)\n      let inputs = consumeParams(obj);\n      if (inputs.length) {\n        assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map(i => i.format(\"minimal\")).join(\", \"));\n      } else {\n        inputs = [ParamType.from(\"bytes\")];\n      }\n      const mutability = consumeMutability(obj);\n      assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n      if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n        const outputs = consumeParams(obj);\n        assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map(i => i.format(\"minimal\")).join(\", \"));\n      }\n      consumeEoi(obj);\n      return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n    }\n    if (obj.type === \"receive\") {\n      return new FallbackFragment(_guard, [], true);\n    }\n    if (obj.type === \"fallback\") {\n      const inputs = [ParamType.from(\"bytes\")];\n      const payable = obj.stateMutability === \"payable\";\n      return new FallbackFragment(_guard, inputs, payable);\n    }\n    assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is a\n   *  **FallbackFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === FallbackFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FunctionFragment extends NamedFragment {\n  /**\n   *  @private\n   */\n  constructor(guard, name, stateMutability, inputs, outputs, gas) {\n    super(guard, \"function\", name, inputs);\n    /**\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n     */\n    _defineProperty(this, \"constant\", void 0);\n    /**\n     *  The returned types for the result of calling this function.\n     */\n    _defineProperty(this, \"outputs\", void 0);\n    /**\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n     *  or ``pure``)\n     */\n    _defineProperty(this, \"stateMutability\", void 0);\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    _defineProperty(this, \"payable\", void 0);\n    /**\n     *  The recommended gas limit to send when calling this function.\n     */\n    _defineProperty(this, \"gas\", void 0);\n    Object.defineProperty(this, internal, {\n      value: FunctionFragmentInternal\n    });\n    outputs = Object.freeze(outputs.slice());\n    const constant = stateMutability === \"view\" || stateMutability === \"pure\";\n    const payable = stateMutability === \"payable\";\n    defineProperties(this, {\n      constant,\n      gas,\n      outputs,\n      payable,\n      stateMutability\n    });\n  }\n  /**\n   *  The Function selector.\n   */\n  get selector() {\n    return id(this.format(\"sighash\")).substring(0, 10);\n  }\n  /**\n   *  Returns a string representation of this function as %%format%%.\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"function\",\n        name: this.name,\n        constant: this.constant,\n        stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n        payable: this.payable,\n        gas: this.gas != null ? this.gas : undefined,\n        inputs: this.inputs.map(i => JSON.parse(i.format(format))),\n        outputs: this.outputs.map(o => JSON.parse(o.format(format)))\n      });\n    }\n    const result = [];\n    if (format !== \"sighash\") {\n      result.push(\"function\");\n    }\n    result.push(this.name + joinParams(format, this.inputs));\n    if (format !== \"sighash\") {\n      if (this.stateMutability !== \"nonpayable\") {\n        result.push(this.stateMutability);\n      }\n      if (this.outputs && this.outputs.length) {\n        result.push(\"returns\");\n        result.push(joinParams(format, this.outputs));\n      }\n      if (this.gas != null) {\n        result.push(\"@\".concat(this.gas.toString()));\n      }\n    }\n    return result.join(\" \");\n  }\n  /**\n   *  Return the selector for a function with %%name%% and %%params%%.\n   */\n  static getSelector(name, params) {\n    params = (params || []).map(p => ParamType.from(p));\n    const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\n    return fragment.selector;\n  }\n  /**\n   *  Returns a new **FunctionFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (FunctionFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return FunctionFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid function fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"function\", obj);\n      const inputs = consumeParams(obj);\n      const mutability = consumeMutability(obj);\n      let outputs = [];\n      if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n        outputs = consumeParams(obj);\n      }\n      const gas = consumeGas(obj);\n      consumeEoi(obj);\n      return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n    }\n    let stateMutability = obj.stateMutability;\n    // Use legacy Solidity ABI logic if stateMutability is missing\n    if (stateMutability == null) {\n      stateMutability = \"payable\";\n      if (typeof obj.constant === \"boolean\") {\n        stateMutability = \"view\";\n        if (!obj.constant) {\n          stateMutability = \"payable\";\n          if (typeof obj.payable === \"boolean\" && !obj.payable) {\n            stateMutability = \"nonpayable\";\n          }\n        }\n      } else if (typeof obj.payable === \"boolean\" && !obj.payable) {\n        stateMutability = \"nonpayable\";\n      }\n    }\n    // @TODO: verifyState for stateMutability (e.g. throw if\n    //        payable: false but stateMutability is \"nonpayable\")\n    return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is a\n   *  **FunctionFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === FunctionFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents a structure.\n */\nexport class StructFragment extends NamedFragment {\n  /**\n   *  @private\n   */\n  constructor(guard, name, inputs) {\n    super(guard, \"struct\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: StructFragmentInternal\n    });\n  }\n  /**\n   *  Returns a string representation of this struct as %%format%%.\n   */\n  format() {\n    throw new Error(\"@TODO\");\n  }\n  /**\n   *  Returns a new **StructFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (typeof obj === \"string\") {\n      try {\n        return StructFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"struct\", obj);\n      const inputs = consumeParams(obj);\n      consumeEoi(obj);\n      return new StructFragment(_guard, name, inputs);\n    }\n    return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n  }\n  // @TODO: fix this return type\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is a\n   *  **StructFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === StructFragmentInternal;\n  }\n}","map":{"version":3,"names":["defineProperties","getBigInt","getNumber","assert","assertPrivate","assertArgument","id","setify","items","result","Set","forEach","k","add","Object","freeze","_kwVisibDeploy","KwVisibDeploy","split","_kwVisib","KwVisib","_kwTypes","KwTypes","_kwModifiers","KwModifiers","_kwOther","_keywords","join","Keywords","SimpleTokens","regexWhitespacePrefix","RegExp","regexNumberPrefix","regexIdPrefix","regexId","regexType","_offset","WeakMap","_tokens","_TokenString_brand","WeakSet","TokenString","offset","_classPrivateFieldGet","length","constructor","tokens","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","slice","clone","reset","popKeyword","allowed","top","peek","type","has","text","Error","concat","pop","popType","JSON","stringify","popParen","_assertClassBrand","_subTokenString","call","match","popParams","link","linkNext","push","peekKeyword","peekType","_this$offset","_this$offset2","toString","i","token","_TokenString","from","arguments","undefined","to","map","t","assign","linkBack","lex","throwError","message","brackets","commas","cur","substring","depth","value","suffix","allowSingle","set","included","key","keys","consumeName","keyword","consumeKeywords","keywords","consumeMutability","modifiers","consumeParams","allowIndexed","ParamType","consumeGas","consumeEoi","regexArrayType","verifyBasicType","parseInt","size","_guard","internal","Symbol","for","ParamTypeInternal","ErrorFragmentInternal","EventFragmentInternal","ConstructorFragmentInternal","FallbackFragmentInternal","FunctionFragmentInternal","StructFragmentInternal","_ParamType_brand","guard","name","baseType","indexed","components","arrayLength","arrayChildren","_defineProperty","defineProperty","format","isArray","parse","String","isTuple","c","comp","isIndexable","walk","process","Array","_this","v","walkAsync","promises","_walkAsync","Promise","all","obj","isParamType","error","comps","bracket","arrayMatch","startsWith","tuple","setValue","childType","index","param","_components$index","then","Fragment","inputs","e","ConstructorFragment","ErrorFragment","EventFragment","FallbackFragment","FunctionFragment","StructFragment","operation","isConstructor","isFragment","isError","isEvent","isFunction","isStruct","NamedFragment","joinParams","params","p","selector","input","anonymous","topicHash","getTopicHash","fragment","payable","gas","stateMutability","errorObj","topIsValid","mutability","outputs","constant","o","getSelector"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/ethers/src.ts/abi/fragments.ts"],"sourcesContent":["/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */\n\nimport {\n    defineProperties, getBigInt, getNumber,\n    assert, assertPrivate, assertArgument\n} from \"../utils/index.js\";\nimport { id } from \"../hash/index.js\";\n\n/**\n *  A Type description in a [JSON ABI format](link-solc-jsonabi).\n */\nexport interface JsonFragmentType {\n    /**\n     *  The parameter name.\n     */\n    readonly name?: string;\n\n    /**\n     *  If the parameter is indexed.\n     */\n    readonly indexed?: boolean;\n\n    /**\n     *  The type of the parameter.\n     */\n    readonly type?: string;\n\n    /**\n     *  The internal Solidity type.\n     */\n    readonly internalType?: string;\n\n    /**\n     *  The components for a tuple.\n     */\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\n/**\n *  A fragment for a method, event or error in a [JSON ABI format](link-solc-jsonabi).\n */\nexport interface JsonFragment {\n    /**\n     *  The name of the error, event, function, etc.\n     */\n    readonly name?: string;\n\n    /**\n     *  The type of the fragment (e.g. ``event``, ``\"function\"``, etc.)\n     */\n    readonly type?: string;\n\n    /**\n     *  If the event is anonymous.\n     */\n    readonly anonymous?: boolean;\n\n    /**\n     *  If the function is payable.\n     */\n    readonly payable?: boolean;\n\n    /**\n     *  If the function is constant.\n     */\n    readonly constant?: boolean;\n\n    /**\n     *  The mutability state of the function.\n     */\n    readonly stateMutability?: string;\n\n    /**\n     *  The input parameters.\n     */\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n\n    /**\n     *  The output parameters.\n     */\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    /**\n     *  The gas limit to use when sending a transaction for this function.\n     */\n    readonly gas?: string;\n};\n\n/**\n *  The format to serialize the output as.\n *\n *  **``\"sighash\"``** - the bare formatting, used to compute the selector\n *  or topic hash; this format cannot be reversed (as it discards ``indexed``)\n *  so cannot by used to export an [[Interface]].\n *\n *  **``\"minimal\"``** - Human-Readable ABI with minimal spacing and without\n *  names, so it is compact, but will result in Result objects that cannot\n *  be accessed by name.\n *\n *  **``\"full\"``** - Full Human-Readable ABI, with readable spacing and names\n *  intact; this is generally the recommended format.\n *\n *  **``\"json\"``** - The [JSON ABI format](link-solc-jsonabi).\n */\nexport type FormatType = \"sighash\" | \"minimal\" | \"full\" | \"json\";\n\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items: Array<string>): ReadonlySet<string> {\n    const result: Set<string> = new Set();\n    items.forEach((k) => result.add(k));\n    return Object.freeze(result);\n}\n\nconst _kwVisibDeploy = \"external public payable override\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view override\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\n\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\n\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\n\nconst _kwOther = \"tuple returns\";\n\n// All Keywords\nconst _keywords = [ _kwTypes, _kwModifiers, _kwOther, _kwVisib ].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n\n// Single character tokens\nconst SimpleTokens: Record<string, string> = {\n  \"(\": \"OPEN_PAREN\", \")\": \"CLOSE_PAREN\",\n  \"[\": \"OPEN_BRACKET\", \"]\": \"CLOSE_BRACKET\",\n  \",\": \"COMMA\", \"@\": \"AT\"\n};\n\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\n\n/**\n *  @ignore:\n */\ntype Token = Readonly<{\n    // Type of token (e.g. TYPE, KEYWORD, NUMBER, etc)\n    type: string;\n\n    // Offset into the original source code\n    offset: number;\n\n    // Actual text content of the token\n    text: string;\n\n    // The parenthesis depth\n    depth: number;\n\n    // If a parenthesis, the offset (in tokens) that balances it\n    match: number;\n\n    // For parenthesis and commas, the offset (in tokens) to the\n    // previous/next parenthesis or comma in the list\n    linkBack: number;\n    linkNext: number;\n\n    // If a BRACKET, the value inside\n    value: number;\n}>;\n\nclass TokenString {\n    #offset: number;\n    #tokens: ReadonlyArray<Token>;\n\n    get offset(): number { return this.#offset; }\n    get length(): number { return this.#tokens.length - this.#offset; }\n\n    constructor(tokens: ReadonlyArray<Token>) {\n        this.#offset = 0;\n        this.#tokens = tokens.slice();\n    }\n\n    clone(): TokenString { return new TokenString(this.#tokens); }\n    reset(): void { this.#offset = 0; }\n\n    #subTokenString(from: number = 0, to: number = 0): TokenString {\n        return new TokenString(this.#tokens.slice(from, to).map((t) => {\n            return Object.freeze(Object.assign({ }, t, {\n                match: (t.match - from),\n                linkBack: (t.linkBack - from),\n                linkNext: (t.linkNext - from),\n            }));\n        }));\n    }\n\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n    popKeyword(allowed: ReadonlySet<string>): string {\n        const top = this.peek();\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) { throw new Error(`expected keyword ${ top.text }`); }\n        return this.pop().text;\n    }\n\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n    popType(type: string): string {\n        if (this.peek().type !== type) {\n            const top = this.peek();\n            throw new Error(`expected ${ type }; got ${ top.type } ${ JSON.stringify(top.text) }`);\n        }\n        return this.pop().text;\n    }\n\n    // Pops and returns a \"(\" TOKENS \")\"\n    popParen(): TokenString {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") { throw new Error(\"bad start\"); }\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n        this.#offset = top.match + 1;\n        return result;\n    }\n\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n    popParams(): Array<TokenString> {\n        const top = this.peek();\n\n        if (top.type !== \"OPEN_PAREN\") { throw new Error(\"bad start\"); }\n\n        const result: Array<TokenString> = [ ];\n\n        while(this.#offset < top.match - 1) {\n            const link = this.peek().linkNext;\n            result.push(this.#subTokenString(this.#offset + 1, link));\n            this.#offset = link;\n        }\n\n        this.#offset = top.match + 1;\n\n        return result;\n    }\n\n    // Returns the top Token, throwing if out of tokens\n    peek(): Token {\n        if (this.#offset >= this.#tokens.length) {\n            throw new Error(\"out-of-bounds\");\n        }\n        return this.#tokens[this.#offset];\n    }\n\n    // Returns the next value, if it is a keyword in `allowed`\n    peekKeyword(allowed: ReadonlySet<string>): null | string {\n        const top = this.peekType(\"KEYWORD\");\n        return (top != null && allowed.has(top)) ? top: null;\n    }\n\n    // Returns the value of the next token if it is `type`\n    peekType(type: string): null | string {\n        if (this.length === 0) { return null; }\n        const top = this.peek();\n        return (top.type === type) ? top.text: null;\n    }\n\n    // Returns the next token; throws if out of tokens\n    pop(): Token {\n        const result = this.peek();\n        this.#offset++;\n        return result;\n    }\n\n    toString(): string {\n        const tokens: Array<string> = [ ];\n        for (let i = this.#offset; i < this.#tokens.length; i++) {\n            const token = this.#tokens[i];\n            tokens.push(`${ token.type }:${ token.text }`);\n        }\n        return `<TokenString ${ tokens.join(\" \") }>`\n    }\n}\n\ntype Writeable<T> = { -readonly [P in keyof T]: T[P] };\n\nfunction lex(text: string): TokenString {\n    const tokens: Array<Token> = [ ];\n\n    const throwError = (message: string) => {\n        const token = (offset < text.length) ? JSON.stringify(text[offset]): \"$EOI\";\n        throw new Error(`invalid token ${ token } at ${ offset }: ${ message }`);\n    };\n\n    let brackets: Array<number> = [ ];\n    let commas: Array<number> = [ ];\n\n    let offset = 0;\n    while (offset < text.length) {\n\n        // Strip off any leading whitespace\n        let cur = text.substring(offset);\n        let match = cur.match(regexWhitespacePrefix);\n        if (match) {\n            offset += match[1].length;\n            cur = text.substring(offset);\n        }\n\n        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: \"\", text: \"\", offset, value: -1 };\n        tokens.push(token);\n\n        let type = (SimpleTokens[cur[0]] || \"\");\n        if (type) {\n            token.type = type;\n            token.text = cur[0];\n            offset++;\n\n            if (type === \"OPEN_PAREN\") {\n                brackets.push(tokens.length - 1);\n                commas.push(tokens.length - 1);\n\n            } else if (type == \"CLOSE_PAREN\") {\n                if (brackets.length === 0) { throwError(\"no matching open bracket\"); }\n\n                token.match = brackets.pop() as number;\n                (<Writeable<Token>>(tokens[token.match])).match = tokens.length - 1;\n                token.depth--;\n\n                token.linkBack = commas.pop() as number;\n                (<Writeable<Token>>(tokens[token.linkBack])).linkNext = tokens.length - 1;\n\n            } else if (type === \"COMMA\") {\n                token.linkBack = commas.pop() as number;\n                (<Writeable<Token>>(tokens[token.linkBack])).linkNext = tokens.length - 1;\n                commas.push(tokens.length - 1);\n\n            } else if (type === \"OPEN_BRACKET\") {\n                token.type = \"BRACKET\";\n\n            } else if (type === \"CLOSE_BRACKET\") {\n                // Remove the CLOSE_BRACKET\n                let suffix = (tokens.pop() as Token).text;\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n                    const value = (tokens.pop() as Token).text;\n                    suffix = value + suffix;\n                    (<Writeable<Token>>(tokens[tokens.length - 1])).value = getNumber(value);\n                }\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n                    throw new Error(\"missing opening bracket\");\n                }\n                (<Writeable<Token>>(tokens[tokens.length - 1])).text += suffix;\n            }\n\n            continue;\n        }\n\n        match = cur.match(regexIdPrefix);\n        if (match) {\n            token.text = match[1];\n            offset += token.text.length;\n\n            if (Keywords.has(token.text)) {\n                token.type = \"KEYWORD\";\n                continue;\n            }\n\n            if (token.text.match(regexType)) {\n                token.type = \"TYPE\";\n                continue;\n            }\n\n            token.type = \"ID\";\n            continue;\n        }\n\n        match = cur.match(regexNumberPrefix);\n        if (match) {\n            token.text = match[1];\n            token.type = \"NUMBER\";\n            offset += token.text.length;\n            continue;\n        }\n\n        throw new Error(`unexpected token ${ JSON.stringify(cur[0]) } at position ${ offset }`);\n    }\n\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\n}\n\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set: ReadonlySet<string>, allowed: ReadonlySet<string>): void {\n    let included: Array<string> = [ ];\n    for (const key in allowed.keys()) {\n        if (set.has(key)) { included.push(key); }\n    }\n    if (included.length > 1) { throw new Error(`conflicting types: ${ included.join(\", \") }`); }\n}\n\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n\n// ...the name with an optional type, returning the name\nfunction consumeName(type: string, tokens: TokenString): string {\n    if (tokens.peekKeyword(KwTypes)) {\n        const keyword = tokens.pop().text;\n        if (keyword !== type) {\n            throw new Error(`expected ${ type }, got ${ keyword }`);\n        }\n    }\n\n    return tokens.popType(\"ID\");\n}\n\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens: TokenString, allowed?: ReadonlySet<string>): ReadonlySet<string> {\n    const keywords: Set<string> = new Set();\n    while (true) {\n        const keyword = tokens.peekType(\"KEYWORD\");\n\n        if (keyword == null || (allowed && !allowed.has(keyword))) { break; }\n        tokens.pop();\n\n        if (keywords.has(keyword)) { throw new Error(`duplicate keywords: ${ JSON.stringify(keyword) }`); }\n        keywords.add(keyword);\n    }\n\n    return Object.freeze(keywords);\n}\n\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens: TokenString): \"payable\" | \"nonpayable\" | \"view\" | \"pure\" {\n    let modifiers = consumeKeywords(tokens, KwVisib);\n\n    // Detect conflicting modifiers\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n\n    // Process mutability states\n    if (modifiers.has(\"view\")) { return \"view\"; }\n    if (modifiers.has(\"pure\")) { return \"pure\"; }\n    if (modifiers.has(\"payable\")) { return \"payable\"; }\n    if (modifiers.has(\"nonpayable\")) { return \"nonpayable\"; }\n\n    // Process legacy `constant` last\n    if (modifiers.has(\"constant\")) { return \"view\"; }\n\n    return \"nonpayable\";\n}\n\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens: TokenString, allowIndexed?: boolean): Array<ParamType> {\n    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));\n}\n\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens: TokenString): null | bigint {\n    if (tokens.peekType(\"AT\")) {\n        tokens.pop();\n        if (tokens.peekType(\"NUMBER\")) {\n            return getBigInt(tokens.pop().text);\n        }\n        throw new Error(\"invalid gas\");\n    }\n    return null;\n}\n\nfunction consumeEoi(tokens: TokenString): void {\n    if (tokens.length) {\n        throw new Error(`unexpected tokens at offset ${ tokens.offset }: ${ tokens.toString() }`);\n    }\n}\n\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nfunction verifyBasicType(type: string): string {\n    const match = type.match(regexType);\n    assertArgument(match, \"invalid type\", \"type\", type);\n    if (type === \"uint\") { return \"uint256\"; }\n    if (type === \"int\") { return \"int256\"; }\n\n    if (match[2]) {\n        // bytesXX\n        const length = parseInt(match[2]);\n        assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n\n    } else if (match[3]) {\n        // intXX or uintXX\n        const size = parseInt(match[3] as string);\n        assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid numeric width\", \"type\", type);\n    }\n\n    return type;\n}\n\n// Make the Fragment constructors effectively private\nconst _guard = { };\n\n\n/**\n *  When [walking](ParamType-walk) a [[ParamType]], this is called\n *  on each component.\n */\nexport type ParamTypeWalkFunc = (type: string, value: any) => any;\n\n/**\n *  When [walking asynchronously](ParamType-walkAsync) a [[ParamType]],\n *  this is called on each component.\n */\nexport type ParamTypeWalkAsyncFunc = (type: string, value: any) => any | Promise<any>;\n\nconst internal = Symbol.for(\"_ethers_internal\");\n\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */\nexport class ParamType {\n\n    /**\n     *  The local name of the parameter (or ``\"\"`` if unbound)\n     */\n    readonly name!: string;\n\n    /**\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n     *  ``\"uint256[3][]\"``)\n     */\n    readonly type!: string;\n\n    /**\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n     */\n    readonly baseType!: string;\n\n    /**\n     *  True if the parameters is indexed.\n     *\n     *  For non-indexable types this is ``null``.\n     */\n    readonly indexed!: null | boolean;\n\n    /**\n     *  The components for the tuple.\n     *\n     *  For non-tuple types this is ``null``.\n     */\n    readonly components!: null | ReadonlyArray<ParamType>;\n\n    /**\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\n     *\n     *  For non-array types this is ``null``.\n     */\n    readonly arrayLength!: null | number;\n\n    /**\n     *  The type of each child in the array.\n     *\n     *  For non-array types this is ``null``.\n     */\n    readonly arrayChildren!: null | ParamType;\n\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, type: string, baseType: string, indexed: null | boolean, components: null | ReadonlyArray<ParamType>, arrayLength: null | number, arrayChildren: null | ParamType) {\n        assertPrivate(guard, _guard, \"ParamType\");\n        Object.defineProperty(this, internal, { value: ParamTypeInternal });\n\n        if (components) { components = Object.freeze(components.slice()); }\n\n        if (baseType === \"array\") {\n            if (arrayLength == null || arrayChildren == null) {\n                throw new Error(\"\");\n            }\n        } else if (arrayLength != null || arrayChildren != null) {\n            throw new Error(\"\");\n        }\n\n        if (baseType === \"tuple\") {\n            if (components == null) { throw new Error(\"\"); }\n        } else if (components != null) {\n            throw new Error(\"\");\n        }\n\n        defineProperties<ParamType>(this, {\n            name, type, baseType, indexed, components, arrayLength, arrayChildren\n        });\n    }\n\n    /**\n     *  Return a string representation of this type.\n     *\n     *  For example,\n     *\n     *  ``sighash\" => \"(uint256,address)\"``\n     *\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n     *\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n     */\n    format(format?: FormatType): string {\n        if (format == null) { format = \"sighash\"; }\n        if (format === \"json\") {\n            const name = this.name || \"\";\n\n            if (this.isArray()) {\n                const result = JSON.parse(this.arrayChildren.format(\"json\"));\n                result.name = name;\n                result.type += `[${ (this.arrayLength < 0 ? \"\": String(this.arrayLength)) }]`;\n                return JSON.stringify(result);\n            }\n\n            const result: any = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\n                name\n            };\n\n\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\n            if (this.isTuple()) {\n                result.components = this.components.map((c) => JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = \"\";\n\n        // Array\n        if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += `[${ (this.arrayLength < 0 ? \"\": String(this.arrayLength)) }]`;\n        } else {\n            if (this.isTuple()) {\n                result += \"(\" + this.components.map(\n                    (comp) => comp.format(format)\n                ).join((format === \"full\") ? \", \": \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== \"sighash\") {\n            if (this.indexed === true) { result += \" indexed\"; }\n            if (format === \"full\" && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  Returns true if %%this%% is an Array type.\n     *\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\n     *  and [[arrayLength]] are non-null.\n     */\n    isArray(): this is (ParamType & { arrayChildren: ParamType, arrayLength: number }) {\n        return (this.baseType === \"array\")\n    }\n\n    /**\n     *  Returns true if %%this%% is a Tuple type.\n     *\n     *  This provides a type gaurd ensuring that [[components]]\n     *  is non-null.\n     */\n    isTuple(): this is (ParamType & { components: ReadonlyArray<ParamType> }) {\n        return (this.baseType === \"tuple\");\n    }\n\n    /**\n     *  Returns true if %%this%% is an Indexable type.\n     *\n     *  This provides a type gaurd ensuring that [[indexed]]\n     *  is non-null.\n     */\n    isIndexable(): this is (ParamType & { indexed: boolean }) {\n        return (this.indexed != null);\n    }\n\n    /**\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\n     *  on each type, destructing the %%value%% recursively.\n     */\n    walk(value: any, process: ParamTypeWalkFunc): any {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) { throw new Error(\"invalid array value\"); }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v) => (_this.arrayChildren.walk(v, process)));\n        }\n\n        if (this.isTuple()) {\n            if (!Array.isArray(value)) { throw new Error(\"invalid tuple value\"); }\n            if (value.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v, i) => (_this.components[i].walk(v, process)));\n        }\n\n        return process(this.type, value);\n    }\n\n    #walkAsync(promises: Array<Promise<void>>, value: any, process: ParamTypeWalkAsyncFunc, setValue: (value: any) => void): void {\n\n        if (this.isArray()) {\n            if (!Array.isArray(value)) { throw new Error(\"invalid array value\"); }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const childType = this.arrayChildren;\n\n            const result = value.slice();\n            result.forEach((value, index) => {\n                childType.#walkAsync(promises, value, process, (value: any) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n\n        if (this.isTuple()) {\n            const components = this.components;\n\n            // Convert the object into an array\n            let result: Array<any>;\n            if (Array.isArray(value)) {\n                result = value.slice();\n\n            } else {\n                if (value == null || typeof(value) !== \"object\") {\n                    throw new Error(\"invalid tuple value\");\n                }\n\n                result = components.map((param) => {\n                    if (!param.name) { throw new Error(\"cannot use object value with unnamed components\"); }\n                    if (!(param.name in value)) {\n                        throw new Error(`missing value for component ${ param.name }`);\n                    }\n                    return value[param.name];\n                });\n            }\n\n            if (result.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n\n            result.forEach((value, index) => {\n                components[index].#walkAsync(promises, value, process, (value: any) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n\n        const result = process(this.type, value);\n        if (result.then) {\n            promises.push((async function() { setValue(await result); })());\n        } else {\n            setValue(result);\n        }\n    }\n\n    /**\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\n     *  %%process%% on each type, destructing the %%value%% recursively.\n     *\n     *  This can be used to resolve ENS naes by walking and resolving each\n     *  ``\"address\"`` type.\n     */\n    async walkAsync(value: any, process: ParamTypeWalkAsyncFunc): Promise<any> {\n        const promises: Array<Promise<void>> = [ ];\n        const result: [ any ] = [ value ];\n        this.#walkAsync(promises, value, process, (value: any) => {\n            result[0] = value;\n        });\n        if (promises.length) { await Promise.all(promises); }\n        return result[0];\n    }\n\n    /**\n     *  Creates a new **ParamType** for %%obj%%.\n     *\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n     *  otherwise the ``indexed`` keyword will throw an error.\n     */\n    static from(obj: any, allowIndexed?: boolean): ParamType {\n        if (ParamType.isParamType(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return ParamType.from(lex(obj), allowIndexed);\n            } catch (error) {\n                assertArgument(false, \"invalid param type\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            let type = \"\", baseType = \"\";\n            let comps: null | Array<ParamType> = null;\n\n            if (consumeKeywords(obj, setify([ \"tuple\" ])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n                // Tuple\n                baseType = \"tuple\";\n                comps = obj.popParams().map((t) => ParamType.from(t));\n                type = `tuple(${ comps.map((c) => c.format()).join(\",\") })`;\n            } else {\n                // Normal\n                type = verifyBasicType(obj.popType(\"TYPE\"));\n                baseType = type;\n            }\n\n            // Check for Array\n            let arrayChildren: null | ParamType  = null;\n            let arrayLength: null | number = null;\n\n            while (obj.length && obj.peekType(\"BRACKET\")) {\n                const bracket = obj.pop(); //arrays[i];\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n                arrayLength = bracket.value;\n                type += bracket.text;\n                baseType = \"array\";\n                comps = null;\n            }\n\n            let indexed: null | boolean = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has(\"indexed\")) {\n                if (!allowIndexed) { throw new Error(\"\"); }\n                indexed = true;\n            }\n\n            const name = (obj.peekType(\"ID\") ? obj.pop().text: \"\");\n\n            if (obj.length) { throw new Error(\"leftover tokens\"); }\n\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n        }\n\n        const name = obj.name;\n        assertArgument(!name || (typeof(name) === \"string\" && name.match(regexId)),\n            \"invalid name\", \"obj.name\", name);\n\n        let indexed = obj.indexed;\n        if (indexed != null) {\n            assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n            indexed = !!indexed;\n        }\n\n        let type = obj.type;\n\n        let arrayMatch = type.match(regexArrayType);\n        if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n            const arrayChildren = ParamType.from({\n                type: arrayMatch[1],\n                components: obj.components\n            });\n\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n        }\n\n        if (type === \"tuple\" || type.startsWith(\"tuple(\"/* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\n            const comps = (obj.components != null) ? obj.components.map((c: any) => ParamType.from(c)): null;\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n            // @TODO: use lexer to validate and normalize type\n            return tuple;\n        }\n\n        type = verifyBasicType(obj.type);\n\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n    }\n\n    /**\n     *  Returns true if %%value%% is a **ParamType**.\n     */\n    static isParamType(value: any): value is ParamType {\n        return (value && value[internal] === ParamTypeInternal);\n    }\n}\n\n/**\n *  The type of a [[Fragment]].\n */\nexport type FragmentType = \"constructor\" | \"error\" | \"event\" | \"fallback\" | \"function\" | \"struct\";\n\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */\nexport abstract class Fragment {\n    /**\n     *  The type of the fragment.\n     */\n    readonly type!: FragmentType;\n\n    /**\n     *  The inputs for the fragment.\n     */\n    readonly inputs!: ReadonlyArray<ParamType>;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, type: FragmentType, inputs: ReadonlyArray<ParamType>) {\n        assertPrivate(guard, _guard, \"Fragment\");\n        inputs = Object.freeze(inputs.slice());\n        defineProperties<Fragment>(this, { type, inputs });\n    }\n\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    abstract format(format?: FormatType): string;\n\n    /**\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n     *  ABI frgament type.\n     */\n    static from(obj: any): Fragment {\n        if (typeof(obj) === \"string\") {\n\n            // Try parsing JSON...\n            try {\n                Fragment.from(JSON.parse(obj));\n            } catch (e) { }\n\n            // ...otherwise, use the human-readable lexer\n            return Fragment.from(lex(obj));\n        }\n\n        if (obj instanceof TokenString) {\n            // Human-readable ABI (already lexed)\n\n            const type = obj.peekKeyword(KwTypes);\n\n            switch (type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\": case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n\n        } else if (typeof(obj) === \"object\") {\n            // JSON ABI\n\n            switch (obj.type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\": case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n\n            assert(false, `unsupported type: ${ obj.type }`, \"UNSUPPORTED_OPERATION\", {\n                operation: \"Fragment.from\"\n            });\n        }\n\n        assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n    }\n\n    /**\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\n     */\n    static isConstructor(value: any): value is ConstructorFragment {\n        return ConstructorFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is an [[ErrorFragment]].\n     */\n    static isError(value: any): value is ErrorFragment {\n        return ErrorFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is an [[EventFragment]].\n     */\n    static isEvent(value: any): value is EventFragment {\n        return EventFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is a [[FunctionFragment]].\n     */\n    static isFunction(value: any): value is FunctionFragment {\n        return FunctionFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is a [[StructFragment]].\n     */\n    static isStruct(value: any): value is StructFragment {\n        return StructFragment.isFragment(value);\n    }\n}\n\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */\nexport abstract class NamedFragment extends Fragment {\n    /**\n     *  The name of the fragment.\n     */\n    readonly name!: string;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, type: FragmentType, name: string, inputs: ReadonlyArray<ParamType>) {\n        super(guard, type, inputs);\n        assertArgument(typeof(name) === \"string\" && name.match(regexId),\n            \"invalid identifier\", \"name\", name);\n        inputs = Object.freeze(inputs.slice());\n        defineProperties<NamedFragment>(this, { name });\n    }\n}\n\nfunction joinParams(format: FormatType, params: ReadonlyArray<ParamType>): string { \n    return \"(\" + params.map((p) => p.format(format)).join((format === \"full\") ? \", \": \",\") + \")\";\n}\n\n/**\n *  A Fragment which represents a //Custom Error//.\n */\nexport class ErrorFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>) {\n        super(guard, \"error\", name, inputs);\n        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\n    }\n\n    /**\n     *  The Custom Error selector.\n     */\n    get selector(): string {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    format(format?: FormatType): string {\n        if (format == null) { format = \"sighash\"; }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        const result: Array<string> = [ ];\n        if (format !== \"sighash\") { result.push(\"error\"); }\n        result.push(this.name + joinParams(format, this.inputs));\n        return result.join(\" \");\n    }\n\n    /**\n     *  Returns a new **ErrorFragment** for %%obj%%.\n     */\n    static from(obj: any): ErrorFragment {\n        if (ErrorFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            return ErrorFragment.from(lex(obj));\n\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"error\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n\n            return new ErrorFragment(_guard, name, inputs);\n        }\n\n        return new ErrorFragment(_guard, obj.name,\n            obj.inputs ? obj.inputs.map(ParamType.from): [ ]);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **ErrorFragment**.\n     */\n    static isFragment(value: any): value is ErrorFragment {\n        return (value && value[internal] === ErrorFragmentInternal);\n    }\n}\n\n/**\n *  A Fragment which represents an Event.\n */\nexport class EventFragment extends NamedFragment {\n    /**\n     *  Whether this event is anonymous.\n     */\n    readonly anonymous!: boolean;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>, anonymous: boolean) {\n        super(guard, \"event\", name, inputs);\n        Object.defineProperty(this, internal, { value: EventFragmentInternal });\n        defineProperties<EventFragment>(this, { anonymous });\n    }\n\n    /**\n     *  The Event topic hash.\n     */\n    get topicHash(): string {\n        return id(this.format(\"sighash\"));\n    }\n\n    /**\n     *  Returns a string representation of this event as %%format%%.\n     */\n    format(format?: FormatType): string {\n        if (format == null) { format = \"sighash\"; }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n\n        const result: Array<string> = [ ];\n        if (format !== \"sighash\") { result.push(\"event\"); }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\" && this.anonymous) { result.push(\"anonymous\"); }\n        return result.join(\" \");\n    }\n\n    /**\n     *  Return the topic hash for an event with %%name%% and %%params%%.\n     */\n    static getTopicHash(name: string, params?: Array<any>): string {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new EventFragment(_guard, name, params, false);\n        return fragment.topicHash;\n    }\n\n    /**\n     *  Returns a new **EventFragment** for %%obj%%.\n     */\n    static from(obj: any): EventFragment {\n        if (EventFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return EventFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid event fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"event\", obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify([ \"anonymous\" ])).has(\"anonymous\");\n            consumeEoi(obj);\n\n            return new EventFragment(_guard, name, inputs, anonymous);\n        }\n\n        return new EventFragment(_guard, obj.name,\n            obj.inputs ? obj.inputs.map((p: any) => ParamType.from(p, true)): [ ], !!obj.anonymous);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **EventFragment**.\n     */\n    static isFragment(value: any): value is EventFragment {\n        return (value && value[internal] === EventFragmentInternal);\n    }\n}\n\n/**\n *  A Fragment which represents a constructor.\n */\nexport class ConstructorFragment extends Fragment {\n\n    /**\n     *  Whether the constructor can receive an endowment.\n     */\n    readonly payable!: boolean;\n\n    /**\n     *  The recommended gas limit for deployment or ``null``.\n     */\n    readonly gas!: null | bigint;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, type: FragmentType, inputs: ReadonlyArray<ParamType>, payable: boolean, gas: null | bigint) {\n        super(guard, type, inputs);\n        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });\n        defineProperties<ConstructorFragment>(this, { payable, gas });\n    }\n\n    /**\n     *  Returns a string representation of this constructor as %%format%%.\n     */\n    format(format?: FormatType): string {\n        assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"format(sighash)\" });\n\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: (this.payable ? \"payable\": \"undefined\"),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas: undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n\n        const result = [ `constructor${ joinParams(format, this.inputs) }` ];\n        if (this.payable) { result.push(\"payable\"); }\n        if (this.gas != null) { result.push(`@${ this.gas.toString() }`); }\n        return result.join(\" \");\n    }\n\n    /**\n     *  Returns a new **ConstructorFragment** for %%obj%%.\n     */\n    static from(obj: any): ConstructorFragment {\n        if (ConstructorFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return ConstructorFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify([ \"constructor\" ]));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n        }\n\n        return new ConstructorFragment(_guard, \"constructor\",\n            obj.inputs ? obj.inputs.map(ParamType.from): [ ],\n            !!obj.payable, (obj.gas != null) ? obj.gas: null);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **ConstructorFragment**.\n     */\n    static isFragment(value: any): value is ConstructorFragment {\n        return (value && value[internal] === ConstructorFragmentInternal);\n    }\n}\n\n/**\n *  A Fragment which represents a method.\n */\nexport class FallbackFragment extends Fragment {\n\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    readonly payable!: boolean;\n\n    constructor(guard: any, inputs: ReadonlyArray<ParamType>, payable: boolean) {\n        super(guard, \"fallback\", inputs);\n        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\n        defineProperties<FallbackFragment>(this, { payable });\n    }\n\n    /**\n     *  Returns a string representation of this fallback as %%format%%.\n     */\n    format(format?: FormatType): string {\n        const type = ((this.inputs.length === 0) ? \"receive\": \"fallback\");\n\n        if (format === \"json\") {\n            const stateMutability = (this.payable ? \"payable\": \"nonpayable\");\n            return JSON.stringify({ type, stateMutability });\n        }\n\n        return `${ type }()${ this.payable ? \" payable\": \"\" }`;\n    }\n\n    /**\n     *  Returns a new **FallbackFragment** for %%obj%%.\n     */\n    static from(obj: any): FallbackFragment {\n        if (FallbackFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return FallbackFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n\n            const topIsValid = obj.peekKeyword(setify([ \"fallback\", \"receive\" ]));\n            assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n\n            const type = obj.popKeyword(setify([ \"fallback\", \"receive\" ]));\n\n            // receive()\n            if (type === \"receive\") {\n                const inputs = consumeParams(obj);\n                assertArgument(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\n                consumeKeywords(obj, setify([ \"payable\" ]));\n                consumeEoi(obj);\n                return new FallbackFragment(_guard, [ ], true);\n            }\n\n            // fallback() [payable]\n            // fallback(bytes) [payable] returns (bytes)\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n                assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\",\n                    \"invalid fallback inputs\", \"obj.inputs\",\n                    inputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            } else {\n                inputs = [ ParamType.from(\"bytes\") ];\n            }\n\n            const mutability = consumeMutability(obj);\n            assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n\n            if (consumeKeywords(obj, setify([ \"returns\" ])).has(\"returns\")) {\n                const outputs = consumeParams(obj);\n                assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\",\n                    \"invalid fallback outputs\", \"obj.outputs\",\n                    outputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n\n            consumeEoi(obj);\n\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n        }\n\n        if (obj.type === \"receive\") {\n            return new FallbackFragment(_guard, [ ], true);\n        }\n\n        if (obj.type === \"fallback\") {\n            const inputs = [ ParamType.from(\"bytes\") ];\n            const payable = (obj.stateMutability === \"payable\");\n            return new FallbackFragment(_guard, inputs, payable);\n        }\n\n        assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FallbackFragment**.\n     */\n    static isFragment(value: any): value is FallbackFragment {\n        return (value && value[internal] === FallbackFragmentInternal);\n    }\n}\n\n\n/**\n *  A Fragment which represents a method.\n */\nexport class FunctionFragment extends NamedFragment {\n    /**\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n     */\n    readonly constant!: boolean;\n\n    /**\n     *  The returned types for the result of calling this function.\n     */\n    readonly outputs!: ReadonlyArray<ParamType>;\n\n    /**\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n     *  or ``pure``)\n     */\n    readonly stateMutability!: \"payable\" | \"nonpayable\" | \"view\" | \"pure\";\n\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    readonly payable!: boolean;\n\n    /**\n     *  The recommended gas limit to send when calling this function.\n     */\n    readonly gas!: null | bigint;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, stateMutability: \"payable\" | \"nonpayable\" | \"view\" | \"pure\", inputs: ReadonlyArray<ParamType>, outputs: ReadonlyArray<ParamType>, gas: null | bigint) {\n        super(guard, \"function\", name, inputs);\n        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\n        outputs = Object.freeze(outputs.slice());\n        const constant = (stateMutability === \"view\" || stateMutability === \"pure\");\n        const payable = (stateMutability === \"payable\");\n        defineProperties<FunctionFragment>(this, { constant, gas, outputs, payable, stateMutability });\n    }\n\n    /**\n     *  The Function selector.\n     */\n    get selector(): string {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n\n    /**\n     *  Returns a string representation of this function as %%format%%.\n     */\n    format(format?: FormatType): string {\n        if (format == null) { format = \"sighash\"; }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas: undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),\n            });\n        }\n\n        const result: Array<string> = [];\n\n        if (format !== \"sighash\") { result.push(\"function\"); }\n\n        result.push(this.name + joinParams(format, this.inputs));\n\n        if (format !== \"sighash\") {\n            if (this.stateMutability !== \"nonpayable\") {\n                result.push(this.stateMutability);\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result.push(\"returns\");\n                result.push(joinParams(format, this.outputs));\n            }\n\n            if (this.gas != null) { result.push(`@${ this.gas.toString() }`); }\n        }\n        return result.join(\" \");\n    }\n\n    /**\n     *  Return the selector for a function with %%name%% and %%params%%.\n     */\n    static getSelector(name: string, params?: Array<any>): string {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [ ], null);\n        return fragment.selector;\n    }\n\n    /**\n     *  Returns a new **FunctionFragment** for %%obj%%.\n     */\n    static from(obj: any): FunctionFragment {\n        if (FunctionFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return FunctionFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid function fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"function\", obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n\n            let outputs: Array<ParamType> = [ ];\n            if (consumeKeywords(obj, setify([ \"returns\" ])).has(\"returns\")) {\n                outputs = consumeParams(obj);\n            }\n\n            const gas = consumeGas(obj);\n\n            consumeEoi(obj);\n\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n        }\n\n        let stateMutability = obj.stateMutability;\n\n        // Use legacy Solidity ABI logic if stateMutability is missing\n        if (stateMutability == null) {\n            stateMutability = \"payable\";\n\n            if (typeof(obj.constant) === \"boolean\") {\n                stateMutability = \"view\";\n                if (!obj.constant) {\n                    stateMutability = \"payable\"\n                    if (typeof(obj.payable) === \"boolean\" && !obj.payable) {\n                        stateMutability = \"nonpayable\";\n                    }\n                }\n            } else if (typeof(obj.payable) === \"boolean\" && !obj.payable) {\n                stateMutability = \"nonpayable\";\n            }\n        }\n\n        // @TODO: verifyState for stateMutability (e.g. throw if\n        //        payable: false but stateMutability is \"nonpayable\")\n\n        return new FunctionFragment(_guard, obj.name, stateMutability,\n             obj.inputs ? obj.inputs.map(ParamType.from): [ ],\n             obj.outputs ? obj.outputs.map(ParamType.from): [ ],\n             (obj.gas != null) ? obj.gas: null);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FunctionFragment**.\n     */\n    static isFragment(value: any): value is FunctionFragment {\n        return (value && value[internal] === FunctionFragmentInternal);\n    }\n}\n\n/**\n *  A Fragment which represents a structure.\n */\nexport class StructFragment extends NamedFragment {\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>) {\n        super(guard, \"struct\", name, inputs);\n        Object.defineProperty(this, internal, { value: StructFragmentInternal });\n    }\n\n    /**\n     *  Returns a string representation of this struct as %%format%%.\n     */\n    format(): string {\n        throw new Error(\"@TODO\");\n    }\n\n    /**\n     *  Returns a new **StructFragment** for %%obj%%.\n     */\n    static from(obj: any): StructFragment {\n        if (typeof(obj) === \"string\") {\n            try {\n                return StructFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"struct\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new StructFragment(_guard, name, inputs);\n        }\n\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from): [ ]);\n    }\n\n// @TODO: fix this return type\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **StructFragment**.\n     */\n    static isFragment(value: any): value is FunctionFragment {\n        return (value && value[internal] === StructFragmentInternal);\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}