{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _assertClassBrand from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\n/**\n *  Fetching content from the web is environment-specific, so Ethers\n *  provides an abstraction that each environment can implement to provide\n *  this service.\n *\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\n *  create a request object, register event listeners and process data\n *  and populate the [[FetchResponse]].\n *\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\n *  ``Promise`` is waited on to retrieve the payload.\n *\n *  The [[FetchRequest]] is responsible for handling many common situations,\n *  such as redirects, server throttling, authentication, etc.\n *\n *  It also handles common gateways, such as IPFS and data URIs.\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nimport { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { defineProperties } from \"./properties.js\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8.js\";\nimport { createGetUrl } from \"./geturl.js\";\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n// The global FetchGetUrlFunc implementation.\nlet defaultGetUrlFunc = createGetUrl();\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n// If locked, new Gateways cannot be added\nlet locked = false;\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url, signal) {\n  try {\n    const match = url.match(reData);\n    if (!match) {\n      throw new Error(\"invalid data\");\n    }\n    return new FetchResponse(200, \"OK\", {\n      \"content-type\": match[1] || \"text/plain\"\n    }, match[2] ? decodeBase64(match[3]) : unpercent(match[3]));\n  } catch (error) {\n    return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\n  }\n}\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl) {\n  async function gatewayIpfs(url, signal) {\n    try {\n      const match = url.match(reIpfs);\n      if (!match) {\n        throw new Error(\"invalid link\");\n      }\n      return new FetchRequest(\"\".concat(baseUrl).concat(match[2]));\n    } catch (error) {\n      return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\n    }\n  }\n  return gatewayIpfs;\n}\nconst Gateways = {\n  \"data\": dataGatewayFunc,\n  \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\nconst fetchSignals = new WeakMap();\n/**\n *  @_ignore\n */\nvar _listeners = /*#__PURE__*/new WeakMap();\nvar _cancelled = /*#__PURE__*/new WeakMap();\nexport class FetchCancelSignal {\n  constructor(request) {\n    _classPrivateFieldInitSpec(this, _listeners, void 0);\n    _classPrivateFieldInitSpec(this, _cancelled, void 0);\n    _classPrivateFieldSet(_listeners, this, []);\n    _classPrivateFieldSet(_cancelled, this, false);\n    fetchSignals.set(request, () => {\n      if (_classPrivateFieldGet(_cancelled, this)) {\n        return;\n      }\n      _classPrivateFieldSet(_cancelled, this, true);\n      for (const listener of _classPrivateFieldGet(_listeners, this)) {\n        setTimeout(() => {\n          listener();\n        }, 0);\n      }\n      _classPrivateFieldSet(_listeners, this, []);\n    });\n  }\n  addListener(listener) {\n    assert(!_classPrivateFieldGet(_cancelled, this), \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchCancelSignal.addCancelListener\"\n    });\n    _classPrivateFieldGet(_listeners, this).push(listener);\n  }\n  get cancelled() {\n    return _classPrivateFieldGet(_cancelled, this);\n  }\n  checkSignal() {\n    assert(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n  }\n}\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal) {\n  if (signal == null) {\n    throw new Error(\"missing signal; should not happen\");\n  }\n  signal.checkSignal();\n  return signal;\n}\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nvar _allowInsecure = /*#__PURE__*/new WeakMap();\nvar _gzip = /*#__PURE__*/new WeakMap();\nvar _headers = /*#__PURE__*/new WeakMap();\nvar _method = /*#__PURE__*/new WeakMap();\nvar _timeout = /*#__PURE__*/new WeakMap();\nvar _url = /*#__PURE__*/new WeakMap();\nvar _body = /*#__PURE__*/new WeakMap();\nvar _bodyType = /*#__PURE__*/new WeakMap();\nvar _creds = /*#__PURE__*/new WeakMap();\nvar _preflight = /*#__PURE__*/new WeakMap();\nvar _process = /*#__PURE__*/new WeakMap();\nvar _retry = /*#__PURE__*/new WeakMap();\nvar _signal = /*#__PURE__*/new WeakMap();\nvar _throttle = /*#__PURE__*/new WeakMap();\nvar _getUrlFunc = /*#__PURE__*/new WeakMap();\nvar _FetchRequest_brand = /*#__PURE__*/new WeakSet();\nexport class FetchRequest {\n  /**\n   *  The fetch URL to request.\n   */\n  get url() {\n    return _classPrivateFieldGet(_url, this);\n  }\n  set url(url) {\n    _classPrivateFieldSet(_url, this, String(url));\n  }\n  /**\n   *  The fetch body, if any, to send as the request body. //(default: null)//\n   *\n   *  When setting a body, the intrinsic ``Content-Type`` is automatically\n   *  set and will be used if **not overridden** by setting a custom\n   *  header.\n   *\n   *  If %%body%% is null, the body is cleared (along with the\n   *  intrinsic ``Content-Type``).\n   *\n   *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to\n   *  ``text/plain``.\n   *\n   *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to\n   *  ``application/octet-stream``.\n   *\n   *  If %%body%% is any other object, the intrinsic ``Content-Type`` is\n   *  set to ``application/json``.\n   */\n  get body() {\n    if (_classPrivateFieldGet(_body, this) == null) {\n      return null;\n    }\n    return new Uint8Array(_classPrivateFieldGet(_body, this));\n  }\n  set body(body) {\n    if (body == null) {\n      _classPrivateFieldSet(_body, this, undefined);\n      _classPrivateFieldSet(_bodyType, this, undefined);\n    } else if (typeof body === \"string\") {\n      _classPrivateFieldSet(_body, this, toUtf8Bytes(body));\n      _classPrivateFieldSet(_bodyType, this, \"text/plain\");\n    } else if (body instanceof Uint8Array) {\n      _classPrivateFieldSet(_body, this, body);\n      _classPrivateFieldSet(_bodyType, this, \"application/octet-stream\");\n    } else if (typeof body === \"object\") {\n      _classPrivateFieldSet(_body, this, toUtf8Bytes(JSON.stringify(body)));\n      _classPrivateFieldSet(_bodyType, this, \"application/json\");\n    } else {\n      throw new Error(\"invalid body\");\n    }\n  }\n  /**\n   *  Returns true if the request has a body.\n   */\n  hasBody() {\n    return _classPrivateFieldGet(_body, this) != null;\n  }\n  /**\n   *  The HTTP method to use when requesting the URI. If no method\n   *  has been explicitly set, then ``GET`` is used if the body is\n   *  null and ``POST`` otherwise.\n   */\n  get method() {\n    if (_classPrivateFieldGet(_method, this)) {\n      return _classPrivateFieldGet(_method, this);\n    }\n    if (this.hasBody()) {\n      return \"POST\";\n    }\n    return \"GET\";\n  }\n  set method(method) {\n    if (method == null) {\n      method = \"\";\n    }\n    _classPrivateFieldSet(_method, this, String(method).toUpperCase());\n  }\n  /**\n   *  The headers that will be used when requesting the URI. All\n   *  keys are lower-case.\n   *\n   *  This object is a copy, so any changes will **NOT** be reflected\n   *  in the ``FetchRequest``.\n   *\n   *  To set a header entry, use the ``setHeader`` method.\n   */\n  get headers() {\n    const headers = Object.assign({}, _classPrivateFieldGet(_headers, this));\n    if (_classPrivateFieldGet(_creds, this)) {\n      headers[\"authorization\"] = \"Basic \".concat(encodeBase64(toUtf8Bytes(_classPrivateFieldGet(_creds, this))));\n    }\n    ;\n    if (this.allowGzip) {\n      headers[\"accept-encoding\"] = \"gzip\";\n    }\n    if (headers[\"content-type\"] == null && _classPrivateFieldGet(_bodyType, this)) {\n      headers[\"content-type\"] = _classPrivateFieldGet(_bodyType, this);\n    }\n    if (this.body) {\n      headers[\"content-length\"] = String(this.body.length);\n    }\n    return headers;\n  }\n  /**\n   *  Get the header for %%key%%, ignoring case.\n   */\n  getHeader(key) {\n    return this.headers[key.toLowerCase()];\n  }\n  /**\n   *  Set the header for %%key%% to %%value%%. All values are coerced\n   *  to a string.\n   */\n  setHeader(key, value) {\n    _classPrivateFieldGet(_headers, this)[String(key).toLowerCase()] = String(value);\n  }\n  /**\n   *  Clear all headers, resetting all intrinsic headers.\n   */\n  clearHeaders() {\n    _classPrivateFieldSet(_headers, this, {});\n  }\n  [Symbol.iterator]() {\n    const headers = this.headers;\n    const keys = Object.keys(headers);\n    let index = 0;\n    return {\n      next: () => {\n        if (index < keys.length) {\n          const key = keys[index++];\n          return {\n            value: [key, headers[key]],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   *  The value that will be sent for the ``Authorization`` header.\n   *\n   *  To set the credentials, use the ``setCredentials`` method.\n   */\n  get credentials() {\n    return _classPrivateFieldGet(_creds, this) || null;\n  }\n  /**\n   *  Sets an ``Authorization`` for %%username%% with %%password%%.\n   */\n  setCredentials(username, password) {\n    assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n    _classPrivateFieldSet(_creds, this, \"\".concat(username, \":\").concat(password));\n  }\n  /**\n   *  Enable and request gzip-encoded responses. The response will\n   *  automatically be decompressed. //(default: true)//\n   */\n  get allowGzip() {\n    return _classPrivateFieldGet(_gzip, this);\n  }\n  set allowGzip(value) {\n    _classPrivateFieldSet(_gzip, this, !!value);\n  }\n  /**\n   *  Allow ``Authentication`` credentials to be sent over insecure\n   *  channels. //(default: false)//\n   */\n  get allowInsecureAuthentication() {\n    return !!_classPrivateFieldGet(_allowInsecure, this);\n  }\n  set allowInsecureAuthentication(value) {\n    _classPrivateFieldSet(_allowInsecure, this, !!value);\n  }\n  /**\n   *  The timeout (in milliseconds) to wait for a complete response.\n   *  //(default: 5 minutes)//\n   */\n  get timeout() {\n    return _classPrivateFieldGet(_timeout, this);\n  }\n  set timeout(timeout) {\n    assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n    _classPrivateFieldSet(_timeout, this, timeout);\n  }\n  /**\n   *  This function is called prior to each request, for example\n   *  during a redirection or retry in case of server throttling.\n   *\n   *  This offers an opportunity to populate headers or update\n   *  content before sending a request.\n   */\n  get preflightFunc() {\n    return _classPrivateFieldGet(_preflight, this) || null;\n  }\n  set preflightFunc(preflight) {\n    _classPrivateFieldSet(_preflight, this, preflight);\n  }\n  /**\n   *  This function is called after each response, offering an\n   *  opportunity to provide client-level throttling or updating\n   *  response data.\n   *\n   *  Any error thrown in this causes the ``send()`` to throw.\n   *\n   *  To schedule a retry attempt (assuming the maximum retry limit\n   *  has not been reached), use [[response.throwThrottleError]].\n   */\n  get processFunc() {\n    return _classPrivateFieldGet(_process, this) || null;\n  }\n  set processFunc(process) {\n    _classPrivateFieldSet(_process, this, process);\n  }\n  /**\n   *  This function is called on each retry attempt.\n   */\n  get retryFunc() {\n    return _classPrivateFieldGet(_retry, this) || null;\n  }\n  set retryFunc(retry) {\n    _classPrivateFieldSet(_retry, this, retry);\n  }\n  /**\n   *  This function is called to fetch content from HTTP and\n   *  HTTPS URLs and is platform specific (e.g. nodejs vs\n   *  browsers).\n   *\n   *  This is by default the currently registered global getUrl\n   *  function, which can be changed using [[registerGetUrl]].\n   *  If this has been set, setting is to ``null`` will cause\n   *  this FetchRequest (and any future clones) to revert back to\n   *  using the currently registered global getUrl function.\n   *\n   *  Setting this is generally not necessary, but may be useful\n   *  for developers that wish to intercept requests or to\n   *  configurege a proxy or other agent.\n   */\n  get getUrlFunc() {\n    return _classPrivateFieldGet(_getUrlFunc, this) || defaultGetUrlFunc;\n  }\n  set getUrlFunc(value) {\n    _classPrivateFieldSet(_getUrlFunc, this, value);\n  }\n  /**\n   *  Create a new FetchRequest instance with default values.\n   *\n   *  Once created, each property may be set before issuing a\n   *  ``.send()`` to make the request.\n   */\n  constructor(url) {\n    _classPrivateMethodInitSpec(this, _FetchRequest_brand);\n    _classPrivateFieldInitSpec(this, _allowInsecure, void 0);\n    _classPrivateFieldInitSpec(this, _gzip, void 0);\n    _classPrivateFieldInitSpec(this, _headers, void 0);\n    _classPrivateFieldInitSpec(this, _method, void 0);\n    _classPrivateFieldInitSpec(this, _timeout, void 0);\n    _classPrivateFieldInitSpec(this, _url, void 0);\n    _classPrivateFieldInitSpec(this, _body, void 0);\n    _classPrivateFieldInitSpec(this, _bodyType, void 0);\n    _classPrivateFieldInitSpec(this, _creds, void 0);\n    // Hooks\n    _classPrivateFieldInitSpec(this, _preflight, void 0);\n    _classPrivateFieldInitSpec(this, _process, void 0);\n    _classPrivateFieldInitSpec(this, _retry, void 0);\n    _classPrivateFieldInitSpec(this, _signal, void 0);\n    _classPrivateFieldInitSpec(this, _throttle, void 0);\n    _classPrivateFieldInitSpec(this, _getUrlFunc, void 0);\n    _classPrivateFieldSet(_url, this, String(url));\n    _classPrivateFieldSet(_allowInsecure, this, false);\n    _classPrivateFieldSet(_gzip, this, true);\n    _classPrivateFieldSet(_headers, this, {});\n    _classPrivateFieldSet(_method, this, \"\");\n    _classPrivateFieldSet(_timeout, this, 300000);\n    _classPrivateFieldSet(_throttle, this, {\n      slotInterval: SLOT_INTERVAL,\n      maxAttempts: MAX_ATTEMPTS\n    });\n    _classPrivateFieldSet(_getUrlFunc, this, null);\n  }\n  toString() {\n    return \"<FetchRequest method=\".concat(JSON.stringify(this.method), \" url=\").concat(JSON.stringify(this.url), \" headers=\").concat(JSON.stringify(this.headers), \" body=\").concat(_classPrivateFieldGet(_body, this) ? hexlify(_classPrivateFieldGet(_body, this)) : \"null\", \">\");\n  }\n  /**\n   *  Update the throttle parameters used to determine maximum\n   *  attempts and exponential-backoff properties.\n   */\n  setThrottleParams(params) {\n    if (params.slotInterval != null) {\n      _classPrivateFieldGet(_throttle, this).slotInterval = params.slotInterval;\n    }\n    if (params.maxAttempts != null) {\n      _classPrivateFieldGet(_throttle, this).maxAttempts = params.maxAttempts;\n    }\n  }\n  /**\n   *  Resolves to the response by sending the request.\n   */\n  send() {\n    assert(_classPrivateFieldGet(_signal, this) == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchRequest.send\"\n    });\n    _classPrivateFieldSet(_signal, this, new FetchCancelSignal(this));\n    return _assertClassBrand(_FetchRequest_brand, this, _send).call(this, 0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n  }\n  /**\n   *  Cancels the inflight response, causing a ``CANCELLED``\n   *  error to be rejected from the [[send]].\n   */\n  cancel() {\n    assert(_classPrivateFieldGet(_signal, this) != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchRequest.cancel\"\n    });\n    const signal = fetchSignals.get(this);\n    if (!signal) {\n      throw new Error(\"missing signal; should not happen\");\n    }\n    signal();\n  }\n  /**\n   *  Returns a new [[FetchRequest]] that represents the redirection\n   *  to %%location%%.\n   */\n  redirect(location) {\n    // Redirection; for now we only support absolute locations\n    const current = this.url.split(\":\")[0].toLowerCase();\n    const target = location.split(\":\")[0].toLowerCase();\n    // Don't allow redirecting:\n    // - non-GET requests\n    // - downgrading the security (e.g. https => http)\n    // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n    assert(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), \"unsupported redirect\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"redirect(\".concat(this.method, \" \").concat(JSON.stringify(this.url), \" => \").concat(JSON.stringify(location), \")\")\n    });\n    // Create a copy of this request, with a new URL\n    const req = new FetchRequest(location);\n    req.method = \"GET\";\n    req.allowGzip = this.allowGzip;\n    req.timeout = this.timeout;\n    _classPrivateFieldSet(_headers, req, Object.assign({}, _classPrivateFieldGet(_headers, this)));\n    if (_classPrivateFieldGet(_body, this)) {\n      _classPrivateFieldSet(_body, req, new Uint8Array(_classPrivateFieldGet(_body, this)));\n    }\n    _classPrivateFieldSet(_bodyType, req, _classPrivateFieldGet(_bodyType, this));\n    // Do not forward credentials unless on the same domain; only absolute\n    //req.allowInsecure = false;\n    // paths are currently supported; may want a way to specify to forward?\n    //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n    return req;\n  }\n  /**\n   *  Create a new copy of this request.\n   */\n  clone() {\n    const clone = new FetchRequest(this.url);\n    // Preserve \"default method\" (i.e. null)\n    _classPrivateFieldSet(_method, clone, _classPrivateFieldGet(_method, this));\n    // Preserve \"default body\" with type, copying the Uint8Array is present\n    if (_classPrivateFieldGet(_body, this)) {\n      _classPrivateFieldSet(_body, clone, _classPrivateFieldGet(_body, this));\n    }\n    _classPrivateFieldSet(_bodyType, clone, _classPrivateFieldGet(_bodyType, this));\n    // Preserve \"default headers\"\n    _classPrivateFieldSet(_headers, clone, Object.assign({}, _classPrivateFieldGet(_headers, this)));\n    // Credentials is readonly, so we copy internally\n    _classPrivateFieldSet(_creds, clone, _classPrivateFieldGet(_creds, this));\n    if (this.allowGzip) {\n      clone.allowGzip = true;\n    }\n    clone.timeout = this.timeout;\n    if (this.allowInsecureAuthentication) {\n      clone.allowInsecureAuthentication = true;\n    }\n    _classPrivateFieldSet(_preflight, clone, _classPrivateFieldGet(_preflight, this));\n    _classPrivateFieldSet(_process, clone, _classPrivateFieldGet(_process, this));\n    _classPrivateFieldSet(_retry, clone, _classPrivateFieldGet(_retry, this));\n    _classPrivateFieldSet(_throttle, clone, Object.assign({}, _classPrivateFieldGet(_throttle, this)));\n    _classPrivateFieldSet(_getUrlFunc, clone, _classPrivateFieldGet(_getUrlFunc, this));\n    return clone;\n  }\n  /**\n   *  Locks all static configuration for gateways and FetchGetUrlFunc\n   *  registration.\n   */\n  static lockConfig() {\n    locked = true;\n  }\n  /**\n   *  Get the current Gateway function for %%scheme%%.\n   */\n  static getGateway(scheme) {\n    return Gateways[scheme.toLowerCase()] || null;\n  }\n  /**\n   *  Use the %%func%% when fetching URIs using %%scheme%%.\n   *\n   *  This method affects all requests globally.\n   *\n   *  If [[lockConfig]] has been called, no change is made and this\n   *  throws.\n   */\n  static registerGateway(scheme, func) {\n    scheme = scheme.toLowerCase();\n    if (scheme === \"http\" || scheme === \"https\") {\n      throw new Error(\"cannot intercept \".concat(scheme, \"; use registerGetUrl\"));\n    }\n    if (locked) {\n      throw new Error(\"gateways locked\");\n    }\n    Gateways[scheme] = func;\n  }\n  /**\n   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n   *\n   *  This method affects all requests globally.\n   *\n   *  If [[lockConfig]] has been called, no change is made and this\n   *  throws.\n   */\n  static registerGetUrl(getUrl) {\n    if (locked) {\n      throw new Error(\"gateways locked\");\n    }\n    defaultGetUrlFunc = getUrl;\n  }\n  /**\n   *  Creates a getUrl function that fetches content from HTTP and\n   *  HTTPS URLs.\n   *\n   *  The available %%options%% are dependent on the platform\n   *  implementation of the default getUrl function.\n   *\n   *  This is not generally something that is needed, but is useful\n   *  when trying to customize simple behaviour when fetching HTTP\n   *  content.\n   */\n  static createGetUrlFunc(options) {\n    return createGetUrl(options);\n  }\n  /**\n   *  Creates a function that can \"fetch\" data URIs.\n   *\n   *  Note that this is automatically done internally to support\n   *  data URIs, so it is not necessary to register it.\n   *\n   *  This is not generally something that is needed, but may\n   *  be useful in a wrapper to perfom custom data URI functionality.\n   */\n  static createDataGateway() {\n    return dataGatewayFunc;\n  }\n  /**\n   *  Creates a function that will fetch IPFS (unvalidated) from\n   *  a custom gateway baseUrl.\n   *\n   *  The default IPFS gateway used internally is\n   *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n   */\n  static createIpfsGatewayFunc(baseUrl) {\n    return getIpfsGatewayFunc(baseUrl);\n  }\n}\nasync function _send(attempt, expires, delay, _request, _response) {\n  if (attempt >= _classPrivateFieldGet(_throttle, this).maxAttempts) {\n    return _response.makeServerError(\"exceeded maximum retry limit\");\n  }\n  assert(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n    operation: \"request.send\",\n    reason: \"timeout\",\n    request: _request\n  });\n  if (delay > 0) {\n    await wait(delay);\n  }\n  let req = this.clone();\n  const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n  // Process any Gateways\n  if (scheme in Gateways) {\n    const result = await Gateways[scheme](req.url, checkSignal(_classPrivateFieldGet(_signal, _request)));\n    if (result instanceof FetchResponse) {\n      let response = result;\n      if (this.processFunc) {\n        checkSignal(_classPrivateFieldGet(_signal, _request));\n        try {\n          response = await this.processFunc(req, response);\n        } catch (error) {\n          // Something went wrong during processing; throw a 5xx server error\n          if (error.throttle == null || typeof error.stall !== \"number\") {\n            response.makeServerError(\"error in post-processing function\", error).assertOk();\n          }\n          // Ignore throttling\n        }\n      }\n      return response;\n    }\n    req = result;\n  }\n  // We have a preflight function; update the request\n  if (this.preflightFunc) {\n    req = await this.preflightFunc(req);\n  }\n  const resp = await this.getUrlFunc(req, checkSignal(_classPrivateFieldGet(_signal, _request)));\n  let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n  if (response.statusCode === 301 || response.statusCode === 302) {\n    // Redirect\n    try {\n      var _req$redirect;\n      const location = response.headers.location || \"\";\n      return _assertClassBrand(_FetchRequest_brand, _req$redirect = req.redirect(location), _send).call(_req$redirect, attempt + 1, expires, 0, _request, response);\n    } catch (error) {}\n    // Things won't get any better on another attempt; abort\n    return response;\n  } else if (response.statusCode === 429) {\n    // Throttle\n    if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n      var _req$clone;\n      const retryAfter = response.headers[\"retry-after\"];\n      let delay = _classPrivateFieldGet(_throttle, this).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n      if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n        delay = parseInt(retryAfter);\n      }\n      return _assertClassBrand(_FetchRequest_brand, _req$clone = req.clone(), _send).call(_req$clone, attempt + 1, expires, delay, _request, response);\n    }\n  }\n  if (this.processFunc) {\n    checkSignal(_classPrivateFieldGet(_signal, _request));\n    try {\n      response = await this.processFunc(req, response);\n    } catch (error) {\n      var _req$clone2;\n      // Something went wrong during processing; throw a 5xx server error\n      if (error.throttle == null || typeof error.stall !== \"number\") {\n        response.makeServerError(\"error in post-processing function\", error).assertOk();\n      }\n      // Throttle\n      let delay = _classPrivateFieldGet(_throttle, this).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n      ;\n      if (error.stall >= 0) {\n        delay = error.stall;\n      }\n      return _assertClassBrand(_FetchRequest_brand, _req$clone2 = req.clone(), _send).call(_req$clone2, attempt + 1, expires, delay, _request, response);\n    }\n  }\n  return response;\n}\n;\n/**\n *  The response for a FetchRequest.\n */\nvar _statusCode = /*#__PURE__*/new WeakMap();\nvar _statusMessage = /*#__PURE__*/new WeakMap();\nvar _headers2 = /*#__PURE__*/new WeakMap();\nvar _body2 = /*#__PURE__*/new WeakMap();\nvar _request2 = /*#__PURE__*/new WeakMap();\nvar _error = /*#__PURE__*/new WeakMap();\nexport class FetchResponse {\n  toString() {\n    return \"<FetchResponse status=\".concat(this.statusCode, \" body=\").concat(_classPrivateFieldGet(_body2, this) ? hexlify(_classPrivateFieldGet(_body2, this)) : \"null\", \">\");\n  }\n  /**\n   *  The response status code.\n   */\n  get statusCode() {\n    return _classPrivateFieldGet(_statusCode, this);\n  }\n  /**\n   *  The response status message.\n   */\n  get statusMessage() {\n    return _classPrivateFieldGet(_statusMessage, this);\n  }\n  /**\n   *  The response headers. All keys are lower-case.\n   */\n  get headers() {\n    return Object.assign({}, _classPrivateFieldGet(_headers2, this));\n  }\n  /**\n   *  The response body, or ``null`` if there was no body.\n   */\n  get body() {\n    return _classPrivateFieldGet(_body2, this) == null ? null : new Uint8Array(_classPrivateFieldGet(_body2, this));\n  }\n  /**\n   *  The response body as a UTF-8 encoded string, or the empty\n   *  string (i.e. ``\"\"``) if there was no body.\n   *\n   *  An error is thrown if the body is invalid UTF-8 data.\n   */\n  get bodyText() {\n    try {\n      return _classPrivateFieldGet(_body2, this) == null ? \"\" : toUtf8String(_classPrivateFieldGet(_body2, this));\n    } catch (error) {\n      assert(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"bodyText\",\n        info: {\n          response: this\n        }\n      });\n    }\n  }\n  /**\n   *  The response body, decoded as JSON.\n   *\n   *  An error is thrown if the body is invalid JSON-encoded data\n   *  or if there was no body.\n   */\n  get bodyJson() {\n    try {\n      return JSON.parse(this.bodyText);\n    } catch (error) {\n      assert(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"bodyJson\",\n        info: {\n          response: this\n        }\n      });\n    }\n  }\n  [Symbol.iterator]() {\n    const headers = this.headers;\n    const keys = Object.keys(headers);\n    let index = 0;\n    return {\n      next: () => {\n        if (index < keys.length) {\n          const key = keys[index++];\n          return {\n            value: [key, headers[key]],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  constructor(statusCode, statusMessage, headers, body, request) {\n    _classPrivateFieldInitSpec(this, _statusCode, void 0);\n    _classPrivateFieldInitSpec(this, _statusMessage, void 0);\n    _classPrivateFieldInitSpec(this, _headers2, void 0);\n    _classPrivateFieldInitSpec(this, _body2, void 0);\n    _classPrivateFieldInitSpec(this, _request2, void 0);\n    _classPrivateFieldInitSpec(this, _error, void 0);\n    _classPrivateFieldSet(_statusCode, this, statusCode);\n    _classPrivateFieldSet(_statusMessage, this, statusMessage);\n    _classPrivateFieldSet(_headers2, this, Object.keys(headers).reduce((accum, k) => {\n      accum[k.toLowerCase()] = String(headers[k]);\n      return accum;\n    }, {}));\n    _classPrivateFieldSet(_body2, this, body == null ? null : new Uint8Array(body));\n    _classPrivateFieldSet(_request2, this, request || null);\n    _classPrivateFieldSet(_error, this, {\n      message: \"\"\n    });\n  }\n  /**\n   *  Return a Response with matching headers and body, but with\n   *  an error status code (i.e. 599) and %%message%% with an\n   *  optional %%error%%.\n   */\n  makeServerError(message, error) {\n    let statusMessage;\n    if (!message) {\n      message = \"\".concat(this.statusCode, \" \").concat(this.statusMessage);\n      statusMessage = \"CLIENT ESCALATED SERVER ERROR (\".concat(message, \")\");\n    } else {\n      statusMessage = \"CLIENT ESCALATED SERVER ERROR (\".concat(this.statusCode, \" \").concat(this.statusMessage, \"; \").concat(message, \")\");\n    }\n    const response = new FetchResponse(599, statusMessage, this.headers, this.body, _classPrivateFieldGet(_request2, this) || undefined);\n    _classPrivateFieldSet(_error, response, {\n      message,\n      error\n    });\n    return response;\n  }\n  /**\n   *  If called within a [request.processFunc](FetchRequest-processFunc)\n   *  call, causes the request to retry as if throttled for %%stall%%\n   *  milliseconds.\n   */\n  throwThrottleError(message, stall) {\n    if (stall == null) {\n      stall = -1;\n    } else {\n      assertArgument(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n    }\n    const error = new Error(message || \"throttling requests\");\n    defineProperties(error, {\n      stall,\n      throttle: true\n    });\n    throw error;\n  }\n  /**\n   *  Get the header value for %%key%%, ignoring case.\n   */\n  getHeader(key) {\n    return this.headers[key.toLowerCase()];\n  }\n  /**\n   *  Returns true if the response has a body.\n   */\n  hasBody() {\n    return _classPrivateFieldGet(_body2, this) != null;\n  }\n  /**\n   *  The request made for this response.\n   */\n  get request() {\n    return _classPrivateFieldGet(_request2, this);\n  }\n  /**\n   *  Returns true if this response was a success statusCode.\n   */\n  ok() {\n    return _classPrivateFieldGet(_error, this).message === \"\" && this.statusCode >= 200 && this.statusCode < 300;\n  }\n  /**\n   *  Throws a ``SERVER_ERROR`` if this response is not ok.\n   */\n  assertOk() {\n    if (this.ok()) {\n      return;\n    }\n    let {\n      message,\n      error\n    } = _classPrivateFieldGet(_error, this);\n    if (message === \"\") {\n      message = \"server response \".concat(this.statusCode, \" \").concat(this.statusMessage);\n    }\n    let requestUrl = null;\n    if (this.request) {\n      requestUrl = this.request.url;\n    }\n    let responseBody = null;\n    try {\n      if (_classPrivateFieldGet(_body2, this)) {\n        responseBody = toUtf8String(_classPrivateFieldGet(_body2, this));\n      }\n    } catch (e) {}\n    assert(false, message, \"SERVER_ERROR\", {\n      request: this.request || \"unknown request\",\n      response: this,\n      error,\n      info: {\n        requestUrl,\n        responseBody,\n        responseStatus: \"\".concat(this.statusCode, \" \").concat(this.statusMessage)\n      }\n    });\n  }\n}\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction unpercent(value) {\n  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n}\nfunction wait(delay) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}","map":{"version":3,"names":["decodeBase64","encodeBase64","hexlify","assert","assertArgument","defineProperties","toUtf8Bytes","toUtf8String","createGetUrl","MAX_ATTEMPTS","SLOT_INTERVAL","defaultGetUrlFunc","reData","RegExp","reIpfs","locked","dataGatewayFunc","url","signal","match","Error","FetchResponse","unpercent","error","FetchRequest","getIpfsGatewayFunc","baseUrl","gatewayIpfs","concat","Gateways","fetchSignals","WeakMap","_listeners","_cancelled","FetchCancelSignal","constructor","request","_classPrivateFieldInitSpec","_classPrivateFieldSet","set","_classPrivateFieldGet","listener","setTimeout","addListener","operation","push","cancelled","checkSignal","_allowInsecure","_gzip","_headers","_method","_timeout","_url","_body","_bodyType","_creds","_preflight","_process","_retry","_signal","_throttle","_getUrlFunc","_FetchRequest_brand","WeakSet","String","body","Uint8Array","undefined","JSON","stringify","hasBody","method","toUpperCase","headers","Object","assign","allowGzip","length","getHeader","key","toLowerCase","setHeader","value","clearHeaders","Symbol","iterator","keys","index","next","done","credentials","setCredentials","username","password","allowInsecureAuthentication","timeout","preflightFunc","preflight","processFunc","process","retryFunc","retry","getUrlFunc","_classPrivateMethodInitSpec","slotInterval","maxAttempts","toString","setThrottleParams","params","send","_assertClassBrand","_send","call","getTime","cancel","get","redirect","location","current","split","target","req","clone","lockConfig","getGateway","scheme","registerGateway","func","registerGetUrl","getUrl","createGetUrlFunc","options","createDataGateway","createIpfsGatewayFunc","attempt","expires","delay","_request","_response","makeServerError","reason","wait","result","response","throttle","stall","assertOk","resp","statusCode","statusMessage","_req$redirect","_req$clone","retryAfter","Math","trunc","random","pow","parseInt","_req$clone2","_statusCode","_statusMessage","_headers2","_body2","_request2","_error","bodyText","info","bodyJson","parse","reduce","accum","k","message","throwThrottleError","Number","isInteger","ok","requestUrl","responseBody","e","responseStatus","Date","replace","all","code","fromCharCode","Promise","resolve"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/ethers/src.ts/utils/fetch.ts"],"sourcesContent":["/**\n *  Fetching content from the web is environment-specific, so Ethers\n *  provides an abstraction that each environment can implement to provide\n *  this service.\n *\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\n *  create a request object, register event listeners and process data\n *  and populate the [[FetchResponse]].\n *\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\n *  ``Promise`` is waited on to retrieve the payload.\n *\n *  The [[FetchRequest]] is responsible for handling many common situations,\n *  such as redirects, server throttling, authentication, etc.\n *\n *  It also handles common gateways, such as IPFS and data URIs.\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nimport { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { defineProperties } from \"./properties.js\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8.js\";\n\nimport { createGetUrl } from \"./geturl.js\";\n\n/**\n *  An environment's implementation of ``getUrl`` must return this type.\n */\nexport type GetUrlResponse = {\n    statusCode: number,\n    statusMessage: string,\n    headers: Record<string, string>,\n    body: null | Uint8Array\n};\n\n/**\n *  This can be used to control how throttling is handled in\n *  [[FetchRequest-setThrottleParams]].\n */\nexport type FetchThrottleParams = {\n    maxAttempts?: number;\n    slotInterval?: number;\n};\n\n/**\n *  Called before any network request, allowing updated headers (e.g. Bearer tokens), etc.\n */\nexport type FetchPreflightFunc = (req: FetchRequest) => Promise<FetchRequest>;\n\n/**\n *  Called on the response, allowing client-based throttling logic or post-processing.\n */\nexport type FetchProcessFunc = (req: FetchRequest, resp: FetchResponse) => Promise<FetchResponse>;\n\n/**\n *  Called prior to each retry; return true to retry, false to abort.\n */\nexport type FetchRetryFunc = (req: FetchRequest, resp: FetchResponse, attempt: number) => Promise<boolean>;\n\n/**\n *  Called on Gateway URLs.\n */\nexport type FetchGatewayFunc = (url: string, signal?: FetchCancelSignal) => Promise<FetchRequest | FetchResponse>;\n\n/**\n *  Used to perform a fetch; use this to override the underlying network\n *  fetch layer. In NodeJS, the default uses the \"http\" and \"https\" libraries\n *  and in the browser ``fetch`` is used. If you wish to use Axios, this is\n *  how you would register it.\n */\nexport type FetchGetUrlFunc = (req: FetchRequest, signal?: FetchCancelSignal) => Promise<GetUrlResponse>;\n\n\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n\n// The global FetchGetUrlFunc implementation.\nlet defaultGetUrlFunc: FetchGetUrlFunc = createGetUrl();\n\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n\n// If locked, new Gateways cannot be added\nlet locked = false;\n\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url: string, signal?: FetchCancelSignal): Promise<FetchResponse> {\n    try {\n        const match = url.match(reData);\n        if (!match) { throw new Error(\"invalid data\"); }\n        return new FetchResponse(200, \"OK\", {\n            \"content-type\": (match[1] || \"text/plain\"),\n        }, (match[2] ? decodeBase64(match[3]): unpercent(match[3])));\n    } catch (error) {\n        return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", { }, null, new FetchRequest(url));\n    }\n}\n\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl: string): FetchGatewayFunc {\n    async function gatewayIpfs(url: string, signal?: FetchCancelSignal): Promise<FetchRequest | FetchResponse> {\n        try {\n            const match = url.match(reIpfs);\n            if (!match) { throw new Error(\"invalid link\"); }\n            return new FetchRequest(`${ baseUrl }${ match[2] }`);\n        } catch (error) {\n            return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", { }, null, new FetchRequest(url));\n        }\n    }\n\n    return gatewayIpfs;\n}\n\nconst Gateways: Record<string, FetchGatewayFunc> = {\n    \"data\": dataGatewayFunc,\n    \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\n\nconst fetchSignals: WeakMap<FetchRequest, () => void> = new WeakMap();\n\n/**\n *  @_ignore\n */\nexport class FetchCancelSignal {\n    #listeners: Array<() => void>;\n    #cancelled: boolean;\n\n    constructor(request: FetchRequest) {\n        this.#listeners = [ ];\n        this.#cancelled = false;\n\n        fetchSignals.set(request, () => {\n            if (this.#cancelled) { return; }\n            this.#cancelled = true;\n\n            for (const listener of this.#listeners) {\n                setTimeout(() => { listener(); }, 0);\n            }\n            this.#listeners = [ ];\n        });\n    }\n\n    addListener(listener: () => void): void {\n        assert(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchCancelSignal.addCancelListener\"\n        });\n        this.#listeners.push(listener);\n    }\n\n    get cancelled(): boolean { return this.#cancelled; }\n\n    checkSignal(): void {\n        assert(!this.cancelled, \"cancelled\", \"CANCELLED\", { });\n    }\n}\n\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal?: FetchCancelSignal): FetchCancelSignal {\n    if (signal == null) { throw new Error(\"missing signal; should not happen\"); }\n    signal.checkSignal();\n    return signal;\n}\n\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nexport class FetchRequest implements Iterable<[ key: string, value: string ]> {\n    #allowInsecure: boolean;\n    #gzip: boolean;\n    #headers: Record<string, string>;\n    #method: string;\n    #timeout: number;\n    #url: string;\n\n    #body?: Uint8Array;\n    #bodyType?: string;\n    #creds?: string;\n\n    // Hooks\n    #preflight?: null | FetchPreflightFunc;\n    #process?: null | FetchProcessFunc;\n    #retry?: null | FetchRetryFunc;\n\n    #signal?: FetchCancelSignal;\n\n    #throttle: Required<FetchThrottleParams>;\n\n    #getUrlFunc: null | FetchGetUrlFunc;\n\n    /**\n     *  The fetch URL to request.\n     */\n    get url(): string { return this.#url; }\n    set url(url: string) {\n        this.#url = String(url);\n    }\n\n    /**\n     *  The fetch body, if any, to send as the request body. //(default: null)//\n     *\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\n     *  set and will be used if **not overridden** by setting a custom\n     *  header.\n     *\n     *  If %%body%% is null, the body is cleared (along with the\n     *  intrinsic ``Content-Type``).\n     *\n     *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to\n     *  ``text/plain``.\n     *\n     *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to\n     *  ``application/octet-stream``.\n     *\n     *  If %%body%% is any other object, the intrinsic ``Content-Type`` is\n     *  set to ``application/json``.\n     */\n    get body(): null | Uint8Array {\n        if (this.#body == null) { return null; }\n        return new Uint8Array(this.#body);\n    }\n    set body(body: null | string | Readonly<object> | Readonly<Uint8Array>) {\n        if (body == null) {\n            this.#body = undefined;\n            this.#bodyType = undefined;\n        } else if (typeof(body) === \"string\") {\n            this.#body = toUtf8Bytes(body);\n            this.#bodyType = \"text/plain\";\n        } else if (body instanceof Uint8Array) {\n            this.#body = body;\n            this.#bodyType = \"application/octet-stream\";\n        } else if (typeof(body) === \"object\") {\n            this.#body = toUtf8Bytes(JSON.stringify(body));\n            this.#bodyType = \"application/json\";\n        } else {\n            throw new Error(\"invalid body\");\n        }\n    }\n\n    /**\n     *  Returns true if the request has a body.\n     */\n    hasBody(): this is (FetchRequest & { body: Uint8Array }) {\n        return (this.#body != null);\n    }\n\n    /**\n     *  The HTTP method to use when requesting the URI. If no method\n     *  has been explicitly set, then ``GET`` is used if the body is\n     *  null and ``POST`` otherwise.\n     */\n    get method(): string {\n        if (this.#method) { return this.#method; }\n        if (this.hasBody()) { return \"POST\"; }\n        return \"GET\";\n    }\n    set method(method: null | string) {\n        if (method == null) { method = \"\"; }\n        this.#method = String(method).toUpperCase();\n    }\n\n    /**\n     *  The headers that will be used when requesting the URI. All\n     *  keys are lower-case.\n     *\n     *  This object is a copy, so any changes will **NOT** be reflected\n     *  in the ``FetchRequest``.\n     *\n     *  To set a header entry, use the ``setHeader`` method.\n     */\n    get headers(): Record<string, string> {\n        const headers = Object.assign({ }, this.#headers);\n\n        if (this.#creds) {\n            headers[\"authorization\"] = `Basic ${ encodeBase64(toUtf8Bytes(this.#creds)) }`;\n        };\n\n        if (this.allowGzip) {\n            headers[\"accept-encoding\"] = \"gzip\";\n        }\n\n        if (headers[\"content-type\"] == null && this.#bodyType) {\n            headers[\"content-type\"] = this.#bodyType;\n        }\n        if (this.body) { headers[\"content-length\"] = String(this.body.length); }\n\n        return headers;\n    }\n\n    /**\n     *  Get the header for %%key%%, ignoring case.\n     */\n    getHeader(key: string): string {\n        return this.headers[key.toLowerCase()];\n    }\n\n    /**\n     *  Set the header for %%key%% to %%value%%. All values are coerced\n     *  to a string.\n     */\n    setHeader(key: string, value: string | number): void {\n        this.#headers[String(key).toLowerCase()] = String(value);\n    }\n\n    /**\n     *  Clear all headers, resetting all intrinsic headers.\n     */\n    clearHeaders(): void {\n        this.#headers = { };\n    }\n\n    [Symbol.iterator](): Iterator<[ key: string, value: string ]> {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [ key, headers[key] ], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The value that will be sent for the ``Authorization`` header.\n     *\n     *  To set the credentials, use the ``setCredentials`` method.\n     */\n    get credentials(): null | string {\n        return this.#creds || null;\n    }\n\n    /**\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\n     */\n    setCredentials(username: string, password: string): void {\n        assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n        this.#creds = `${ username }:${ password }`;\n    }\n\n    /**\n     *  Enable and request gzip-encoded responses. The response will\n     *  automatically be decompressed. //(default: true)//\n     */\n    get allowGzip(): boolean {\n        return this.#gzip;\n    }\n    set allowGzip(value: boolean) {\n        this.#gzip = !!value;\n    }\n\n    /**\n     *  Allow ``Authentication`` credentials to be sent over insecure\n     *  channels. //(default: false)//\n     */\n    get allowInsecureAuthentication(): boolean {\n        return !!this.#allowInsecure;\n    }\n    set allowInsecureAuthentication(value: boolean) {\n        this.#allowInsecure = !!value;\n    }\n\n    /**\n     *  The timeout (in milliseconds) to wait for a complete response.\n     *  //(default: 5 minutes)//\n     */\n    get timeout(): number { return this.#timeout; }\n    set timeout(timeout: number) {\n        assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n        this.#timeout = timeout;\n    }\n\n    /**\n     *  This function is called prior to each request, for example\n     *  during a redirection or retry in case of server throttling.\n     *\n     *  This offers an opportunity to populate headers or update\n     *  content before sending a request.\n     */\n    get preflightFunc(): null | FetchPreflightFunc {\n        return this.#preflight || null;\n    }\n    set preflightFunc(preflight: null | FetchPreflightFunc) {\n        this.#preflight = preflight;\n    }\n\n    /**\n     *  This function is called after each response, offering an\n     *  opportunity to provide client-level throttling or updating\n     *  response data.\n     *\n     *  Any error thrown in this causes the ``send()`` to throw.\n     *\n     *  To schedule a retry attempt (assuming the maximum retry limit\n     *  has not been reached), use [[response.throwThrottleError]].\n     */\n    get processFunc(): null | FetchProcessFunc {\n        return this.#process || null;\n    }\n    set processFunc(process: null | FetchProcessFunc) {\n        this.#process = process;\n    }\n\n    /**\n     *  This function is called on each retry attempt.\n     */\n    get retryFunc(): null | FetchRetryFunc {\n        return this.#retry || null;\n    }\n    set retryFunc(retry: null | FetchRetryFunc) {\n        this.#retry = retry;\n    }\n\n    /**\n     *  This function is called to fetch content from HTTP and\n     *  HTTPS URLs and is platform specific (e.g. nodejs vs\n     *  browsers).\n     *\n     *  This is by default the currently registered global getUrl\n     *  function, which can be changed using [[registerGetUrl]].\n     *  If this has been set, setting is to ``null`` will cause\n     *  this FetchRequest (and any future clones) to revert back to\n     *  using the currently registered global getUrl function.\n     *\n     *  Setting this is generally not necessary, but may be useful\n     *  for developers that wish to intercept requests or to\n     *  configurege a proxy or other agent.\n     */\n    get getUrlFunc(): FetchGetUrlFunc {\n        return this.#getUrlFunc || defaultGetUrlFunc;\n    }\n    set getUrlFunc(value: null | FetchGetUrlFunc) {\n        this.#getUrlFunc = value;\n    }\n\n    /**\n     *  Create a new FetchRequest instance with default values.\n     *\n     *  Once created, each property may be set before issuing a\n     *  ``.send()`` to make the request.\n     */\n    constructor(url: string) {\n        this.#url = String(url);\n\n        this.#allowInsecure = false;\n        this.#gzip = true;\n        this.#headers = { };\n        this.#method = \"\";\n        this.#timeout = 300000;\n\n        this.#throttle = {\n            slotInterval: SLOT_INTERVAL,\n            maxAttempts: MAX_ATTEMPTS\n        };\n\n        this.#getUrlFunc = null;\n    }\n\n    toString(): string {\n        return `<FetchRequest method=${ JSON.stringify(this.method) } url=${ JSON.stringify(this.url) } headers=${ JSON.stringify(this.headers) } body=${ this.#body ? hexlify(this.#body): \"null\" }>`;\n    }\n\n    /**\n     *  Update the throttle parameters used to determine maximum\n     *  attempts and exponential-backoff properties.\n     */\n    setThrottleParams(params: FetchThrottleParams): void {\n        if (params.slotInterval != null) {\n            this.#throttle.slotInterval = params.slotInterval;\n        }\n        if (params.maxAttempts != null) {\n            this.#throttle.maxAttempts = params.maxAttempts;\n        }\n    }\n\n    async #send(attempt: number, expires: number, delay: number, _request: FetchRequest, _response: FetchResponse): Promise<FetchResponse> {\n        if (attempt >= this.#throttle.maxAttempts) {\n            return _response.makeServerError(\"exceeded maximum retry limit\");\n        }\n\n        assert(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n            operation: \"request.send\", reason: \"timeout\", request: _request\n        });\n\n        if (delay > 0) { await wait(delay); }\n\n        let req = this.clone();\n        const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n\n        // Process any Gateways\n        if (scheme in Gateways) {\n            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n            if (result instanceof FetchResponse) {\n                let response = result;\n\n                if (this.processFunc) {\n                    checkSignal(_request.#signal);\n                    try {\n                        response = await this.processFunc(req, response);\n                    } catch (error: any) {\n\n                        // Something went wrong during processing; throw a 5xx server error\n                        if (error.throttle == null || typeof(error.stall) !== \"number\") {\n                            response.makeServerError(\"error in post-processing function\", error).assertOk();\n                        }\n\n                        // Ignore throttling\n                    }\n                }\n\n                return response;\n            }\n            req = result;\n        }\n\n        // We have a preflight function; update the request\n        if (this.preflightFunc) { req = await this.preflightFunc(req); }\n\n        const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));\n        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n\n        if (response.statusCode === 301 || response.statusCode === 302) {\n\n            // Redirect\n            try {\n                const location = response.headers.location || \"\";\n                return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n            } catch (error) { }\n\n            // Things won't get any better on another attempt; abort\n            return response;\n\n        } else if (response.statusCode === 429) {\n\n            // Throttle\n            if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n                const retryAfter = response.headers[\"retry-after\"];\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                    delay = parseInt(retryAfter);\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n\n        if (this.processFunc) {\n            checkSignal(_request.#signal);\n            try {\n                response = await this.processFunc(req, response);\n            } catch (error: any) {\n\n                // Something went wrong during processing; throw a 5xx server error\n                if (error.throttle == null || typeof(error.stall) !== \"number\") {\n                    response.makeServerError(\"error in post-processing function\", error).assertOk();\n                }\n\n                // Throttle\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));;\n                if (error.stall >= 0) { delay = error.stall; }\n\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n\n        return response;\n    }\n\n    /**\n     *  Resolves to the response by sending the request.\n     */\n    send(): Promise<FetchResponse> {\n        assert(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.send\" });\n        this.#signal = new FetchCancelSignal(this);\n        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", { }, null, this));\n    }\n\n    /**\n     *  Cancels the inflight response, causing a ``CANCELLED``\n     *  error to be rejected from the [[send]].\n     */\n    cancel(): void {\n        assert(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.cancel\" });\n        const signal = fetchSignals.get(this);\n        if (!signal) { throw new Error(\"missing signal; should not happen\"); }\n        signal();\n    }\n\n    /**\n     *  Returns a new [[FetchRequest]] that represents the redirection\n     *  to %%location%%.\n     */\n    redirect(location: string): FetchRequest {\n        // Redirection; for now we only support absolute locations\n        const current = this.url.split(\":\")[0].toLowerCase();\n        const target = location.split(\":\")[0].toLowerCase();\n\n        // Don't allow redirecting:\n        // - non-GET requests\n        // - downgrading the security (e.g. https => http)\n        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n        assert(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n            operation: `redirect(${ this.method } ${ JSON.stringify(this.url) } => ${ JSON.stringify(location) })`\n        });\n\n        // Create a copy of this request, with a new URL\n        const req = new FetchRequest(location);\n        req.method = \"GET\";\n        req.allowGzip = this.allowGzip;\n        req.timeout = this.timeout;\n        req.#headers = Object.assign({ }, this.#headers);\n        if (this.#body) { req.#body = new Uint8Array(this.#body); }\n        req.#bodyType = this.#bodyType;\n\n        // Do not forward credentials unless on the same domain; only absolute\n        //req.allowInsecure = false;\n        // paths are currently supported; may want a way to specify to forward?\n        //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n\n        return req;\n    }\n\n    /**\n     *  Create a new copy of this request.\n     */\n    clone(): FetchRequest {\n        const clone = new FetchRequest(this.url);\n\n        // Preserve \"default method\" (i.e. null)\n        clone.#method = this.#method;\n\n        // Preserve \"default body\" with type, copying the Uint8Array is present\n        if (this.#body) { clone.#body = this.#body; }\n        clone.#bodyType = this.#bodyType;\n\n        // Preserve \"default headers\"\n        clone.#headers = Object.assign({ }, this.#headers);\n\n        // Credentials is readonly, so we copy internally\n        clone.#creds = this.#creds;\n\n        if (this.allowGzip) { clone.allowGzip = true; }\n\n        clone.timeout = this.timeout;\n        if (this.allowInsecureAuthentication) { clone.allowInsecureAuthentication = true; }\n\n        clone.#preflight = this.#preflight;\n        clone.#process = this.#process;\n        clone.#retry = this.#retry;\n\n        clone.#throttle = Object.assign({ }, this.#throttle);\n\n        clone.#getUrlFunc = this.#getUrlFunc;\n\n        return clone;\n    }\n\n    /**\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\n     *  registration.\n     */\n    static lockConfig(): void {\n        locked = true;\n    }\n\n    /**\n     *  Get the current Gateway function for %%scheme%%.\n     */\n    static getGateway(scheme: string): null | FetchGatewayFunc {\n        return Gateways[scheme.toLowerCase()] || null;\n    }\n\n    /**\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGateway(scheme: string, func: FetchGatewayFunc): void {\n        scheme = scheme.toLowerCase();\n        if (scheme === \"http\" || scheme === \"https\") {\n            throw new Error(`cannot intercept ${ scheme }; use registerGetUrl`);\n        }\n        if (locked) { throw new Error(\"gateways locked\"); }\n        Gateways[scheme] = func;\n    }\n\n    /**\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGetUrl(getUrl: FetchGetUrlFunc): void {\n        if (locked) { throw new Error(\"gateways locked\"); }\n        defaultGetUrlFunc = getUrl;\n    }\n\n    /**\n     *  Creates a getUrl function that fetches content from HTTP and\n     *  HTTPS URLs.\n     *\n     *  The available %%options%% are dependent on the platform\n     *  implementation of the default getUrl function.\n     *\n     *  This is not generally something that is needed, but is useful\n     *  when trying to customize simple behaviour when fetching HTTP\n     *  content.\n     */\n    static createGetUrlFunc(options?: Record<string, any>): FetchGetUrlFunc {\n        return createGetUrl(options);\n    }\n\n    /**\n     *  Creates a function that can \"fetch\" data URIs.\n     *\n     *  Note that this is automatically done internally to support\n     *  data URIs, so it is not necessary to register it.\n     *\n     *  This is not generally something that is needed, but may\n     *  be useful in a wrapper to perfom custom data URI functionality.\n     */\n    static createDataGateway(): FetchGatewayFunc {\n        return dataGatewayFunc;\n    }\n\n    /**\n     *  Creates a function that will fetch IPFS (unvalidated) from\n     *  a custom gateway baseUrl.\n     *\n     *  The default IPFS gateway used internally is\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n     */\n    static createIpfsGatewayFunc(baseUrl: string): FetchGatewayFunc {\n        return getIpfsGatewayFunc(baseUrl);\n    }\n}\n\n\ninterface ThrottleError extends Error {\n    stall: number;\n    throttle: true;\n};\n\n/**\n *  The response for a FetchRequest.\n */\nexport class FetchResponse implements Iterable<[ key: string, value: string ]> {\n    #statusCode: number;\n    #statusMessage: string;\n    #headers: Record<string, string>;\n    #body: null | Readonly<Uint8Array>;\n    #request: null | FetchRequest;\n\n    #error: { error?: Error, message: string };\n\n    toString(): string {\n        return `<FetchResponse status=${ this.statusCode } body=${ this.#body ? hexlify(this.#body): \"null\" }>`;\n    }\n\n    /**\n     *  The response status code.\n     */\n    get statusCode(): number { return this.#statusCode; }\n\n    /**\n     *  The response status message.\n     */\n    get statusMessage(): string { return this.#statusMessage; }\n\n    /**\n     *  The response headers. All keys are lower-case.\n     */\n    get headers(): Record<string, string> { return Object.assign({ }, this.#headers); }\n\n    /**\n     *  The response body, or ``null`` if there was no body.\n     */\n    get body(): null | Readonly<Uint8Array> {\n        return (this.#body == null) ? null: new Uint8Array(this.#body);\n    }\n\n    /**\n     *  The response body as a UTF-8 encoded string, or the empty\n     *  string (i.e. ``\"\"``) if there was no body.\n     *\n     *  An error is thrown if the body is invalid UTF-8 data.\n     */\n    get bodyText(): string {\n        try {\n            return (this.#body == null) ? \"\": toUtf8String(this.#body);\n        } catch (error) {\n            assert(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyText\", info: { response: this }\n            });\n        }\n    }\n\n    /**\n     *  The response body, decoded as JSON.\n     *\n     *  An error is thrown if the body is invalid JSON-encoded data\n     *  or if there was no body.\n     */\n    get bodyJson(): any {\n        try {\n            return JSON.parse(this.bodyText);\n        } catch (error) {\n            assert(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyJson\", info: { response: this }\n            });\n        }\n    }\n\n    [Symbol.iterator](): Iterator<[ key: string, value: string ]> {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [ key, headers[key] ], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    constructor(statusCode: number, statusMessage: string, headers: Readonly<Record<string, string>>, body: null | Uint8Array, request?: FetchRequest) {\n        this.#statusCode = statusCode;\n        this.#statusMessage = statusMessage;\n        this.#headers = Object.keys(headers).reduce((accum, k) => {\n            accum[k.toLowerCase()] = String(headers[k]);\n            return accum;\n        }, <Record<string, string>>{ });\n        this.#body = ((body == null) ? null: new Uint8Array(body));\n        this.#request = (request || null);\n\n        this.#error = { message: \"\" };\n    }\n\n    /**\n     *  Return a Response with matching headers and body, but with\n     *  an error status code (i.e. 599) and %%message%% with an\n     *  optional %%error%%.\n     */\n    makeServerError(message?: string, error?: Error): FetchResponse {\n        let statusMessage: string;\n        if (!message) {\n            message = `${ this.statusCode } ${ this.statusMessage }`;\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${ message })`;\n        } else {\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${ this.statusCode } ${ this.statusMessage }; ${ message })`;\n        }\n        const response = new FetchResponse(599, statusMessage, this.headers,\n            this.body, this.#request || undefined);\n        response.#error = { message, error };\n        return response;\n    }\n\n    /**\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\n     *  call, causes the request to retry as if throttled for %%stall%%\n     *  milliseconds.\n     */\n    throwThrottleError(message?: string, stall?: number): never {\n        if (stall == null) {\n            stall = -1;\n        } else {\n            assertArgument(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n        }\n\n        const error = new Error(message || \"throttling requests\");\n\n        defineProperties(<ThrottleError>error, { stall, throttle: true });\n\n        throw error;\n    }\n\n    /**\n     *  Get the header value for %%key%%, ignoring case.\n     */\n    getHeader(key: string): string {\n        return this.headers[key.toLowerCase()];\n    }\n\n    /**\n     *  Returns true if the response has a body.\n     */\n    hasBody(): this is (FetchResponse & { body: Uint8Array }) {\n        return (this.#body != null);\n    }\n\n    /**\n     *  The request made for this response.\n     */\n    get request(): null | FetchRequest { return this.#request; }\n\n    /**\n     *  Returns true if this response was a success statusCode.\n     */\n    ok(): boolean {\n        return (this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300);\n    }\n\n    /**\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\n     */\n    assertOk(): void {\n        if (this.ok()) { return; }\n        let { message, error } = this.#error;\n        if (message === \"\") {\n            message = `server response ${ this.statusCode } ${ this.statusMessage }`;\n        }\n\n        let requestUrl: null | string = null;\n        if (this.request) { requestUrl = this.request.url; }\n\n        let responseBody: null | string = null;\n        try {\n            if (this.#body) { responseBody = toUtf8String(this.#body); }\n        } catch (e) { }\n\n        assert(false, message, \"SERVER_ERROR\", {\n            request: (this.request || \"unknown request\"), response: this, error,\n            info: {\n                requestUrl, responseBody,\n                responseStatus: `${ this.statusCode } ${ this.statusMessage }` }\n        });\n    }\n}\n\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\nfunction wait(delay: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, delay));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}