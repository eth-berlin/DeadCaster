{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _defineProperty from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldGet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nvar _noncePromise = /*#__PURE__*/new WeakMap();\nvar _delta = /*#__PURE__*/new WeakMap();\nexport class NonceManager extends AbstractSigner {\n  /**\n   *  Creates a new **NonceManager** to manage %%signer%%.\n   */\n  constructor(signer) {\n    super(signer.provider);\n    /**\n     *  The Signer being managed.\n     */\n    _defineProperty(this, \"signer\", void 0);\n    _classPrivateFieldInitSpec(this, _noncePromise, void 0);\n    _classPrivateFieldInitSpec(this, _delta, void 0);\n    defineProperties(this, {\n      signer\n    });\n    _classPrivateFieldSet(_noncePromise, this, null);\n    _classPrivateFieldSet(_delta, this, 0);\n  }\n  async getAddress() {\n    return this.signer.getAddress();\n  }\n  connect(provider) {\n    return new NonceManager(this.signer.connect(provider));\n  }\n  async getNonce(blockTag) {\n    if (blockTag === \"pending\") {\n      if (_classPrivateFieldGet(_noncePromise, this) == null) {\n        _classPrivateFieldSet(_noncePromise, this, super.getNonce(\"pending\"));\n      }\n      const delta = _classPrivateFieldGet(_delta, this);\n      return (await _classPrivateFieldGet(_noncePromise, this)) + delta;\n    }\n    return super.getNonce(blockTag);\n  }\n  /**\n   *  Manually increment the nonce. This may be useful when managng\n   *  offline transactions.\n   */\n  increment() {\n    var _this$delta, _this$delta2;\n    _classPrivateFieldSet(_delta, this, (_this$delta = _classPrivateFieldGet(_delta, this), _this$delta2 = _this$delta++, _this$delta)), _this$delta2;\n  }\n  /**\n   *  Resets the nonce, causing the **NonceManager** to reload the current\n   *  nonce from the blockchain on the next transaction.\n   */\n  reset() {\n    _classPrivateFieldSet(_delta, this, 0);\n    _classPrivateFieldSet(_noncePromise, this, null);\n  }\n  async sendTransaction(tx) {\n    const noncePromise = this.getNonce(\"pending\");\n    this.increment();\n    tx = await this.signer.populateTransaction(tx);\n    tx.nonce = await noncePromise;\n    // @TODO: Maybe handle interesting/recoverable errors?\n    // Like don't increment if the tx was certainly not sent\n    return await this.signer.sendTransaction(tx);\n  }\n  signTransaction(tx) {\n    return this.signer.signTransaction(tx);\n  }\n  signMessage(message) {\n    return this.signer.signMessage(message);\n  }\n  signTypedData(domain, types, value) {\n    return this.signer.signTypedData(domain, types, value);\n  }\n}","map":{"version":3,"names":["defineProperties","AbstractSigner","_noncePromise","WeakMap","_delta","NonceManager","constructor","signer","provider","_defineProperty","_classPrivateFieldInitSpec","_classPrivateFieldSet","getAddress","connect","getNonce","blockTag","_classPrivateFieldGet","delta","increment","_this$delta","_this$delta2","reset","sendTransaction","tx","noncePromise","populateTransaction","nonce","signTransaction","signMessage","message","signTypedData","domain","types","value"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/ethers/src.ts/providers/signer-noncemanager.ts"],"sourcesContent":["import { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\n\nimport type {\n    BlockTag, Provider, TransactionRequest, TransactionResponse\n} from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\n\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nexport class NonceManager extends AbstractSigner {\n    /**\n     *  The Signer being managed.\n     */\n    signer!: Signer;\n\n    #noncePromise: null | Promise<number>;\n    #delta: number;\n\n    /**\n     *  Creates a new **NonceManager** to manage %%signer%%.\n     */\n    constructor(signer: Signer) {\n        super(signer.provider);\n        defineProperties<NonceManager>(this, { signer });\n\n        this.#noncePromise = null;\n        this.#delta = 0;\n    }\n\n    async getAddress(): Promise<string> {\n        return this.signer.getAddress();\n    }\n\n    connect(provider: null | Provider): NonceManager {\n        return new NonceManager(this.signer.connect(provider));\n    }\n\n    async getNonce(blockTag?: BlockTag): Promise<number> {\n        if (blockTag === \"pending\") {\n            if (this.#noncePromise == null) {\n                this.#noncePromise = super.getNonce(\"pending\");\n            }\n\n            const delta = this.#delta;\n            return (await this.#noncePromise) + delta;\n        }\n\n        return super.getNonce(blockTag);\n    }\n\n    /**\n     *  Manually increment the nonce. This may be useful when managng\n     *  offline transactions.\n     */\n    increment(): void {\n        this.#delta++;\n    }\n\n    /**\n     *  Resets the nonce, causing the **NonceManager** to reload the current\n     *  nonce from the blockchain on the next transaction.\n     */\n    reset(): void {\n        this.#delta = 0;\n        this.#noncePromise = null;\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        const noncePromise = this.getNonce(\"pending\");\n        this.increment();\n\n        tx = await this.signer.populateTransaction(tx);\n        tx.nonce = await noncePromise;\n\n        // @TODO: Maybe handle interesting/recoverable errors?\n        // Like don't increment if the tx was certainly not sent\n        return await this.signer.sendTransaction(tx);\n    }\n\n    signTransaction(tx: TransactionRequest): Promise<string> {\n        return this.signer.signTransaction(tx);\n    }\n\n    signMessage(message: string | Uint8Array): Promise<string> {\n        return this.signer.signMessage(message);\n    }\n\n    signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        return this.signer.signTypedData(domain, types, value);\n    }\n}\n"],"mappings":";;;;AAAA,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,cAAc,QAAQ,sBAAsB;AAUrD;;;;;AAAA,IAAAC,aAAA,oBAAAC,OAAA;AAAA,IAAAC,MAAA,oBAAAD,OAAA;AAKA,OAAM,MAAOE,YAAa,SAAQJ,cAAc;EAS5C;;;EAGAK,YAAYC,MAAc;IACtB,KAAK,CAACA,MAAM,CAACC,QAAQ,CAAC;IAZ1B;;;IAAAC,eAAA;IAKAC,0BAAA,OAAAR,aAAa;IACbQ,0BAAA,OAAAN,MAAM;IAOFJ,gBAAgB,CAAe,IAAI,EAAE;MAAEO;IAAM,CAAE,CAAC;IAEhDI,qBAAA,CAAKT,aAAa,EAAlB,IAAI,EAAiB,IAAhB,CAAa;IAClBS,qBAAA,CAAKP,MAAM,EAAX,IAAI,EAAU,CAAT,CAAM;EACf;EAEA,MAAMQ,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACL,MAAM,CAACK,UAAU,EAAE;EACnC;EAEAC,OAAOA,CAACL,QAAyB;IAC7B,OAAO,IAAIH,YAAY,CAAC,IAAI,CAACE,MAAM,CAACM,OAAO,CAACL,QAAQ,CAAC,CAAC;EAC1D;EAEA,MAAMM,QAAQA,CAACC,QAAmB;IAC9B,IAAIA,QAAQ,KAAK,SAAS,EAAE;MACxB,IAAIC,qBAAA,CAAKd,aAAa,EAAlB,IAAK,CAAa,IAAI,IAAI,EAAE;QAC5BS,qBAAA,CAAKT,aAAa,EAAlB,IAAI,EAAiB,KAAK,CAACY,QAAQ,CAAC,SAAS,CAAxC,CAAa;;MAGtB,MAAMG,KAAK,GAAGD,qBAAA,CAAKZ,MAAM,EAAX,IAAK,CAAM;MACzB,OAAO,CAAC,MAAMY,qBAAA,CAAKd,aAAa,EAAlB,IAAK,CAAa,IAAIe,KAAK;;IAG7C,OAAO,KAAK,CAACH,QAAQ,CAACC,QAAQ,CAAC;EACnC;EAEA;;;;EAIAG,SAASA,CAAA;IAAA,IAAAC,WAAA,EAAAC,YAAA;IACLT,qBAAA,CAAKP,MAAM,EAAX,IAAI,GAAAe,WAAA,GAAJH,qBAAA,CAAKZ,MAAM,EAAX,IAAK,CAAM,EAAAgB,YAAA,GAAAD,WAAA,IAAAA,WAAA,CAAN,CAAM,EAAAC,YAAA;EACf;EAEA;;;;EAIAC,KAAKA,CAAA;IACDV,qBAAA,CAAKP,MAAM,EAAX,IAAI,EAAU,CAAT,CAAM;IACXO,qBAAA,CAAKT,aAAa,EAAlB,IAAI,EAAiB,IAAhB,CAAa;EACtB;EAEA,MAAMoB,eAAeA,CAACC,EAAsB;IACxC,MAAMC,YAAY,GAAG,IAAI,CAACV,QAAQ,CAAC,SAAS,CAAC;IAC7C,IAAI,CAACI,SAAS,EAAE;IAEhBK,EAAE,GAAG,MAAM,IAAI,CAAChB,MAAM,CAACkB,mBAAmB,CAACF,EAAE,CAAC;IAC9CA,EAAE,CAACG,KAAK,GAAG,MAAMF,YAAY;IAE7B;IACA;IACA,OAAO,MAAM,IAAI,CAACjB,MAAM,CAACe,eAAe,CAACC,EAAE,CAAC;EAChD;EAEAI,eAAeA,CAACJ,EAAsB;IAClC,OAAO,IAAI,CAAChB,MAAM,CAACoB,eAAe,CAACJ,EAAE,CAAC;EAC1C;EAEAK,WAAWA,CAACC,OAA4B;IACpC,OAAO,IAAI,CAACtB,MAAM,CAACqB,WAAW,CAACC,OAAO,CAAC;EAC3C;EAEAC,aAAaA,CAACC,MAAuB,EAAEC,KAA4C,EAAEC,KAA0B;IAC3G,OAAO,IAAI,CAAC1B,MAAM,CAACuB,aAAa,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,CAAC;EAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}