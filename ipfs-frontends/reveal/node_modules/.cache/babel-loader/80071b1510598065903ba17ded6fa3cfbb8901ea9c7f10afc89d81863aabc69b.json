{"ast":null,"code":"import { alloc, concat, slice } from './byte-utils.js';\nconst defaultChunkSize = 256;\nexport class Bl {\n  constructor(chunkSize = defaultChunkSize) {\n    this.chunkSize = chunkSize;\n    this.cursor = 0;\n    this.maxCursor = -1;\n    this.chunks = [];\n    this._initReuseChunk = null;\n  }\n  reset() {\n    this.cursor = 0;\n    this.maxCursor = -1;\n    if (this.chunks.length) {\n      this.chunks = [];\n    }\n    if (this._initReuseChunk !== null) {\n      this.chunks.push(this._initReuseChunk);\n      this.maxCursor = this._initReuseChunk.length - 1;\n    }\n  }\n  push(bytes) {\n    let topChunk = this.chunks[this.chunks.length - 1];\n    const newMax = this.cursor + bytes.length;\n    if (newMax <= this.maxCursor + 1) {\n      const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n      topChunk.set(bytes, chunkPos);\n    } else {\n      if (topChunk) {\n        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n        if (chunkPos < topChunk.length) {\n          this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);\n          this.maxCursor = this.cursor - 1;\n        }\n      }\n      if (bytes.length < 64 && bytes.length < this.chunkSize) {\n        topChunk = alloc(this.chunkSize);\n        this.chunks.push(topChunk);\n        this.maxCursor += topChunk.length;\n        if (this._initReuseChunk === null) {\n          this._initReuseChunk = topChunk;\n        }\n        topChunk.set(bytes, 0);\n      } else {\n        this.chunks.push(bytes);\n        this.maxCursor += bytes.length;\n      }\n    }\n    this.cursor += bytes.length;\n  }\n  toBytes(reset = false) {\n    let byts;\n    if (this.chunks.length === 1) {\n      const chunk = this.chunks[0];\n      if (reset && this.cursor > chunk.length / 2) {\n        byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);\n        this._initReuseChunk = null;\n        this.chunks = [];\n      } else {\n        byts = slice(chunk, 0, this.cursor);\n      }\n    } else {\n      byts = concat(this.chunks, this.cursor);\n    }\n    if (reset) {\n      this.reset();\n    }\n    return byts;\n  }\n}","map":{"version":3,"names":["alloc","concat","slice","defaultChunkSize","Bl","constructor","chunkSize","cursor","maxCursor","chunks","_initReuseChunk","reset","length","push","bytes","topChunk","newMax","chunkPos","set","subarray","toBytes","byts","chunk"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/cborg/esm/lib/bl.js"],"sourcesContent":["import {\n  alloc,\n  concat,\n  slice\n} from './byte-utils.js';\nconst defaultChunkSize = 256;\nexport class Bl {\n  constructor(chunkSize = defaultChunkSize) {\n    this.chunkSize = chunkSize;\n    this.cursor = 0;\n    this.maxCursor = -1;\n    this.chunks = [];\n    this._initReuseChunk = null;\n  }\n  reset() {\n    this.cursor = 0;\n    this.maxCursor = -1;\n    if (this.chunks.length) {\n      this.chunks = [];\n    }\n    if (this._initReuseChunk !== null) {\n      this.chunks.push(this._initReuseChunk);\n      this.maxCursor = this._initReuseChunk.length - 1;\n    }\n  }\n  push(bytes) {\n    let topChunk = this.chunks[this.chunks.length - 1];\n    const newMax = this.cursor + bytes.length;\n    if (newMax <= this.maxCursor + 1) {\n      const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n      topChunk.set(bytes, chunkPos);\n    } else {\n      if (topChunk) {\n        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n        if (chunkPos < topChunk.length) {\n          this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);\n          this.maxCursor = this.cursor - 1;\n        }\n      }\n      if (bytes.length < 64 && bytes.length < this.chunkSize) {\n        topChunk = alloc(this.chunkSize);\n        this.chunks.push(topChunk);\n        this.maxCursor += topChunk.length;\n        if (this._initReuseChunk === null) {\n          this._initReuseChunk = topChunk;\n        }\n        topChunk.set(bytes, 0);\n      } else {\n        this.chunks.push(bytes);\n        this.maxCursor += bytes.length;\n      }\n    }\n    this.cursor += bytes.length;\n  }\n  toBytes(reset = false) {\n    let byts;\n    if (this.chunks.length === 1) {\n      const chunk = this.chunks[0];\n      if (reset && this.cursor > chunk.length / 2) {\n        byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);\n        this._initReuseChunk = null;\n        this.chunks = [];\n      } else {\n        byts = slice(chunk, 0, this.cursor);\n      }\n    } else {\n      byts = concat(this.chunks, this.cursor);\n    }\n    if (reset) {\n      this.reset();\n    }\n    return byts;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}