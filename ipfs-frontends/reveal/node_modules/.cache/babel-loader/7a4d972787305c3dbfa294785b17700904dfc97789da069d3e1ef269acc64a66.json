{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _defineProperty from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { Log, TransactionReceipt, TransactionResponse } from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n  /**\n   * @_ignore:\n   */\n  constructor(log, iface, fragment) {\n    super(log, log.provider);\n    /**\n     *  The Contract Interface.\n     */\n    _defineProperty(this, \"interface\", void 0);\n    /**\n     *  The matching event.\n     */\n    _defineProperty(this, \"fragment\", void 0);\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    _defineProperty(this, \"args\", void 0);\n    const args = iface.decodeEventLog(fragment, log.data, log.topics);\n    defineProperties(this, {\n      args,\n      fragment,\n      interface: iface\n    });\n  }\n  /**\n   *  The name of the event.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The signature of the event.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n  /**\n   * @_ignore:\n   */\n  constructor(log, error) {\n    super(log, log.provider);\n    /**\n     *  The error encounted when trying to decode the log.\n     */\n    _defineProperty(this, \"error\", void 0);\n    defineProperties(this, {\n      error\n    });\n  }\n}\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nvar _iface = /*#__PURE__*/new WeakMap();\nexport class ContractTransactionReceipt extends TransactionReceipt {\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    _classPrivateFieldInitSpec(this, _iface, void 0);\n    _classPrivateFieldSet(_iface, this, iface);\n  }\n  /**\n   *  The parsed logs for any [[Log]] which has a matching event in the\n   *  Contract ABI.\n   */\n  get logs() {\n    return super.logs.map(log => {\n      const fragment = log.topics.length ? _classPrivateFieldGet(_iface, this).getEvent(log.topics[0]) : null;\n      if (fragment) {\n        try {\n          return new EventLog(log, _classPrivateFieldGet(_iface, this), fragment);\n        } catch (error) {\n          return new UndecodedEventLog(log, error);\n        }\n      }\n      return log;\n    });\n  }\n}\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nvar _iface2 = /*#__PURE__*/new WeakMap();\nexport class ContractTransactionResponse extends TransactionResponse {\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    _classPrivateFieldInitSpec(this, _iface2, void 0);\n    _classPrivateFieldSet(_iface2, this, iface);\n  }\n  /**\n   *  Resolves once this transaction has been mined and has\n   *  %%confirms%% blocks including it (default: ``1``) with an\n   *  optional %%timeout%%.\n   *\n   *  This can resolve to ``null`` only if %%confirms%% is ``0``\n   *  and the transaction has not been mined, otherwise this will\n   *  wait until enough confirmations have completed.\n   */\n  async wait(confirms, timeout) {\n    const receipt = await super.wait(confirms, timeout);\n    if (receipt == null) {\n      return null;\n    }\n    return new ContractTransactionReceipt(_classPrivateFieldGet(_iface2, this), this.provider, receipt);\n  }\n}\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport class ContractUnknownEventPayload extends EventPayload {\n  /**\n   *  @_event:\n   */\n  constructor(contract, listener, filter, log) {\n    super(contract, listener, filter);\n    /**\n     *  The log with no matching events.\n     */\n    _defineProperty(this, \"log\", void 0);\n    defineProperties(this, {\n      log\n    });\n  }\n  /**\n   *  Resolves to the block the event occured in.\n   */\n  async getBlock() {\n    return await this.log.getBlock();\n  }\n  /**\n   *  Resolves to the transaction the event occured in.\n   */\n  async getTransaction() {\n    return await this.log.getTransaction();\n  }\n  /**\n   *  Resolves to the transaction receipt the event occured in.\n   */\n  async getTransactionReceipt() {\n    return await this.log.getTransactionReceipt();\n  }\n}\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n  /**\n   *  @_ignore:\n   */\n  constructor(contract, listener, filter, fragment, _log) {\n    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n    defineProperties(this, {\n      args,\n      fragment\n    });\n  }\n  /**\n   *  The event name.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The event signature.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}","map":{"version":3,"names":["Log","TransactionReceipt","TransactionResponse","defineProperties","EventPayload","EventLog","constructor","log","iface","fragment","provider","_defineProperty","args","decodeEventLog","data","topics","interface","eventName","name","eventSignature","format","UndecodedEventLog","error","_iface","WeakMap","ContractTransactionReceipt","tx","_classPrivateFieldInitSpec","_classPrivateFieldSet","logs","map","length","_classPrivateFieldGet","getEvent","_iface2","ContractTransactionResponse","wait","confirms","timeout","receipt","ContractUnknownEventPayload","contract","listener","filter","getBlock","getTransaction","getTransactionReceipt","ContractEventPayload","_log"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/ethers/src.ts/contract/wrappers.ts"],"sourcesContent":["// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport {\n    Block, Log, TransactionReceipt, TransactionResponse\n} from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n\nimport type { EventFragment, Interface, Result } from \"../abi/index.js\";\nimport type { Listener } from \"../utils/index.js\";\nimport type {\n    Provider\n} from \"../providers/index.js\";\n\nimport type { BaseContract } from \"./contract.js\";\nimport type { ContractEventName } from \"./types.js\";\n\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n    /**\n     *  The Contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The matching event.\n     */\n    readonly fragment!: EventFragment;\n\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    readonly args!: Result;\n\n    /**\n     * @_ignore:\n     */\n    constructor(log: Log, iface: Interface, fragment: EventFragment) {\n        super(log, log.provider);\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\n        defineProperties<EventLog>(this, { args, fragment, interface: iface });\n    }\n\n    /**\n     *  The name of the event.\n     */\n    get eventName(): string { return this.fragment.name; }\n\n    /**\n     *  The signature of the event.\n     */\n    get eventSignature(): string { return this.fragment.format(); }\n}\n\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n\n    /**\n     *  The error encounted when trying to decode the log.\n     */\n    readonly error!: Error;\n\n    /**\n     * @_ignore:\n     */\n    constructor(log: Log, error: Error) {\n        super(log, log.provider);\n        defineProperties<UndecodedEventLog>(this, { error });\n    }\n}\n\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nexport class ContractTransactionReceipt extends TransactionReceipt {\n    readonly #iface: Interface;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(iface: Interface, provider: Provider, tx: TransactionReceipt) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n\n    /**\n     *  The parsed logs for any [[Log]] which has a matching event in the\n     *  Contract ABI.\n     */\n    get logs(): Array<EventLog | Log> {\n        return super.logs.map((log) => {\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]): null;\n            if (fragment) {\n                try {\n                    return new EventLog(log, this.#iface, fragment)\n                } catch (error: any) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n\n            return log;\n        });\n    }\n\n}\n\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nexport class ContractTransactionResponse extends TransactionResponse {\n    readonly #iface: Interface;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(iface: Interface, provider: Provider, tx: TransactionResponse) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(confirms?: number, timeout?: number): Promise<null | ContractTransactionReceipt> {\n        const receipt = await super.wait(confirms, timeout);\n        if (receipt == null) { return null; }\n        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n    }\n}\n\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport  class ContractUnknownEventPayload extends EventPayload<ContractEventName> {\n    /**\n     *  The log with no matching events.\n     */\n    readonly log!: Log;\n\n    /**\n     *  @_event:\n     */\n    constructor(contract: BaseContract, listener: null | Listener, filter: ContractEventName, log: Log) {\n        super(contract, listener, filter);\n        defineProperties<ContractUnknownEventPayload>(this, { log });\n    }\n\n    /**\n     *  Resolves to the block the event occured in.\n     */\n    async getBlock(): Promise<Block> {\n        return await this.log.getBlock();\n    }\n\n    /**\n     *  Resolves to the transaction the event occured in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        return await this.log.getTransaction();\n    }\n\n    /**\n     *  Resolves to the transaction receipt the event occured in.\n     */\n    async getTransactionReceipt(): Promise<TransactionReceipt> {\n        return await this.log.getTransactionReceipt();\n    }\n}\n\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n\n    /**\n     *  The matching event.\n     */\n    declare readonly fragment: EventFragment;\n\n    /**\n     *  The log, with parsed properties.\n     */\n    declare readonly log: EventLog;\n\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    declare readonly args: Result;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(contract: BaseContract, listener: null | Listener, filter: ContractEventName, fragment: EventFragment, _log: Log) {\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n        defineProperties<ContractEventPayload>(this, { args, fragment });\n    }\n\n    /**\n     *  The event name.\n     */\n    get eventName(): string {\n        return this.fragment.name;\n    }\n\n    /**\n     *  The event signature.\n     */\n    get eventSignature(): string {\n        return this.fragment.format();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}