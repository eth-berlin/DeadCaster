{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _assertClassBrand from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _defineProperty from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport { defineProperties, concat, getBytesCopy, getNumber, hexlify, toBeArray, toBigInt, toNumber, assert, assertArgument } from \"../../utils/index.js\";\n/**\n * @_ignore:\n */\nexport const WordSize = 32;\nconst Padding = new Uint8Array(WordSize);\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [\"then\"];\nconst _guard = {};\nfunction throwError(name, error) {\n  const wrapped = new Error(\"deferred error during ABI decoding triggered accessing \".concat(name));\n  wrapped.error = error;\n  throw wrapped;\n}\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nvar _names = /*#__PURE__*/new WeakMap();\nexport class Result extends Array {\n  /**\n   *  @private\n   */\n  constructor() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    // To properly sub-class Array so the other built-in\n    // functions work, the constructor has to behave fairly\n    // well. So, in the event we are created via fromItems()\n    // we build the read-only Result object we want, but on\n    // any other input, we use the default constructor\n    // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n    const guard = args[0];\n    let items = args[1];\n    let names = (args[2] || []).slice();\n    let wrap = true;\n    if (guard !== _guard) {\n      items = args;\n      names = [];\n      wrap = false;\n    }\n    // Can't just pass in ...items since an array of length 1\n    // is a special case in the super.\n    super(items.length);\n    _classPrivateFieldInitSpec(this, _names, void 0);\n    items.forEach((item, index) => {\n      this[index] = item;\n    });\n    // Find all unique keys\n    const nameCounts = names.reduce((accum, name) => {\n      if (typeof name === \"string\") {\n        accum.set(name, (accum.get(name) || 0) + 1);\n      }\n      return accum;\n    }, new Map());\n    // Remove any key thats not unique\n    _classPrivateFieldSet(_names, this, Object.freeze(items.map((item, index) => {\n      const name = names[index];\n      if (name != null && nameCounts.get(name) === 1) {\n        return name;\n      }\n      return null;\n    })));\n    if (!wrap) {\n      return;\n    }\n    // A wrapped Result is immutable\n    Object.freeze(this);\n    // Proxy indices and names so we can trap deferred errors\n    return new Proxy(this, {\n      get: (target, prop, receiver) => {\n        if (typeof prop === \"string\") {\n          // Index accessor\n          if (prop.match(/^[0-9]+$/)) {\n            const index = getNumber(prop, \"%index\");\n            if (index < 0 || index >= this.length) {\n              throw new RangeError(\"out of result range\");\n            }\n            const item = target[index];\n            if (item instanceof Error) {\n              throwError(\"index \".concat(index), item);\n            }\n            return item;\n          }\n          // Pass important checks (like `then` for Promise) through\n          if (passProperties.indexOf(prop) >= 0) {\n            return Reflect.get(target, prop, receiver);\n          }\n          const value = target[prop];\n          if (value instanceof Function) {\n            // Make sure functions work with private variables\n            // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n            return function () {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n              return value.apply(this === receiver ? target : this, args);\n            };\n          } else if (!(prop in target)) {\n            // Possible name accessor\n            return target.getValue.apply(this === receiver ? target : this, [prop]);\n          }\n        }\n        return Reflect.get(target, prop, receiver);\n      }\n    });\n  }\n  /**\n   *  Returns the Result as a normal Array. If %%deep%%, any children\n   *  which are Result objects are also converted to a normal Array.\n   *\n   *  This will throw if there are any outstanding deferred\n   *  errors.\n   */\n  toArray(deep) {\n    const result = [];\n    this.forEach((item, index) => {\n      if (item instanceof Error) {\n        throwError(\"index \".concat(index), item);\n      }\n      if (deep && item instanceof Result) {\n        item = item.toArray(deep);\n      }\n      result.push(item);\n    });\n    return result;\n  }\n  /**\n   *  Returns the Result as an Object with each name-value pair. If\n   *  %%deep%%, any children which are Result objects are also\n   *  converted to an Object.\n   *\n   *  This will throw if any value is unnamed, or if there are\n   *  any outstanding deferred errors.\n   */\n  toObject(deep) {\n    return _classPrivateFieldGet(_names, this).reduce((accum, name, index) => {\n      assert(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"toObject()\"\n      });\n      // Add values for names that don't conflict\n      if (!(name in accum)) {\n        let child = this.getValue(name);\n        if (deep && child instanceof Result) {\n          child = child.toObject(deep);\n        }\n        accum[name] = child;\n      }\n      return accum;\n    }, {});\n  }\n  /**\n   *  @_ignore\n   */\n  slice(start, end) {\n    if (start == null) {\n      start = 0;\n    }\n    if (start < 0) {\n      start += this.length;\n      if (start < 0) {\n        start = 0;\n      }\n    }\n    if (end == null) {\n      end = this.length;\n    }\n    if (end < 0) {\n      end += this.length;\n      if (end < 0) {\n        end = 0;\n      }\n    }\n    if (end > this.length) {\n      end = this.length;\n    }\n    const result = [],\n      names = [];\n    for (let i = start; i < end; i++) {\n      result.push(this[i]);\n      names.push(_classPrivateFieldGet(_names, this)[i]);\n    }\n    return new Result(_guard, result, names);\n  }\n  /**\n   *  @_ignore\n   */\n  filter(callback, thisArg) {\n    const result = [],\n      names = [];\n    for (let i = 0; i < this.length; i++) {\n      const item = this[i];\n      if (item instanceof Error) {\n        throwError(\"index \".concat(i), item);\n      }\n      if (callback.call(thisArg, item, i, this)) {\n        result.push(item);\n        names.push(_classPrivateFieldGet(_names, this)[i]);\n      }\n    }\n    return new Result(_guard, result, names);\n  }\n  /**\n   *  @_ignore\n   */\n  map(callback, thisArg) {\n    const result = [];\n    for (let i = 0; i < this.length; i++) {\n      const item = this[i];\n      if (item instanceof Error) {\n        throwError(\"index \".concat(i), item);\n      }\n      result.push(callback.call(thisArg, item, i, this));\n    }\n    return result;\n  }\n  /**\n   *  Returns the value for %%name%%.\n   *\n   *  Since it is possible to have a key whose name conflicts with\n   *  a method on a [[Result]] or its superclass Array, or any\n   *  JavaScript keyword, this ensures all named values are still\n   *  accessible by name.\n   */\n  getValue(name) {\n    const index = _classPrivateFieldGet(_names, this).indexOf(name);\n    if (index === -1) {\n      return undefined;\n    }\n    const value = this[index];\n    if (value instanceof Error) {\n      throwError(\"property \".concat(JSON.stringify(name)), value.error);\n    }\n    return value;\n  }\n  /**\n   *  Creates a new [[Result]] for %%items%% with each entry\n   *  also accessible by its corresponding name in %%keys%%.\n   */\n  static fromItems(items, keys) {\n    return new Result(_guard, items, keys);\n  }\n}\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nexport function checkResultErrors(result) {\n  // Find the first error (if any)\n  const errors = [];\n  const checkErrors = function (path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n    for (let key in object) {\n      const childPath = path.slice();\n      childPath.push(key);\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n  checkErrors([], result);\n  return errors;\n}\nfunction getValue(value) {\n  let bytes = toBeArray(value);\n  assert(bytes.length <= WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", {\n    buffer: bytes,\n    length: WordSize,\n    offset: bytes.length\n  });\n  if (bytes.length !== WordSize) {\n    bytes = getBytesCopy(concat([Padding.slice(bytes.length % WordSize), bytes]));\n  }\n  return bytes;\n}\n/**\n *  @_ignore\n */\nexport class Coder {\n  constructor(name, type, localName, dynamic) {\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    _defineProperty(this, \"name\", void 0);\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    _defineProperty(this, \"type\", void 0);\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    _defineProperty(this, \"localName\", void 0);\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    _defineProperty(this, \"dynamic\", void 0);\n    defineProperties(this, {\n      name,\n      type,\n      localName,\n      dynamic\n    }, {\n      name: \"string\",\n      type: \"string\",\n      localName: \"string\",\n      dynamic: \"boolean\"\n    });\n  }\n  _throwError(message, value) {\n    assertArgument(false, message, this.localName, value);\n  }\n}\n/**\n *  @_ignore\n */\nvar _data = /*#__PURE__*/new WeakMap();\nvar _dataLength = /*#__PURE__*/new WeakMap();\nvar _Writer_brand = /*#__PURE__*/new WeakSet();\nexport class Writer {\n  constructor() {\n    _classPrivateMethodInitSpec(this, _Writer_brand);\n    // An array of WordSize lengthed objects to concatenation\n    _classPrivateFieldInitSpec(this, _data, void 0);\n    _classPrivateFieldInitSpec(this, _dataLength, void 0);\n    _classPrivateFieldSet(_data, this, []);\n    _classPrivateFieldSet(_dataLength, this, 0);\n  }\n  get data() {\n    return concat(_classPrivateFieldGet(_data, this));\n  }\n  get length() {\n    return _classPrivateFieldGet(_dataLength, this);\n  }\n  appendWriter(writer) {\n    return _assertClassBrand(_Writer_brand, this, _writeData).call(this, getBytesCopy(writer.data));\n  }\n  // Arrayish item; pad on the right to *nearest* WordSize\n  writeBytes(value) {\n    let bytes = getBytesCopy(value);\n    const paddingOffset = bytes.length % WordSize;\n    if (paddingOffset) {\n      bytes = getBytesCopy(concat([bytes, Padding.slice(paddingOffset)]));\n    }\n    return _assertClassBrand(_Writer_brand, this, _writeData).call(this, bytes);\n  }\n  // Numeric item; pad on the left *to* WordSize\n  writeValue(value) {\n    return _assertClassBrand(_Writer_brand, this, _writeData).call(this, getValue(value));\n  }\n  // Inserts a numeric place-holder, returning a callback that can\n  // be used to asjust the value later\n  writeUpdatableValue() {\n    const offset = _classPrivateFieldGet(_data, this).length;\n    _classPrivateFieldGet(_data, this).push(Padding);\n    _classPrivateFieldSet(_dataLength, this, _classPrivateFieldGet(_dataLength, this) + WordSize);\n    return value => {\n      _classPrivateFieldGet(_data, this)[offset] = getValue(value);\n    };\n  }\n}\n/**\n *  @_ignore\n */\nfunction _writeData(data) {\n  _classPrivateFieldGet(_data, this).push(data);\n  _classPrivateFieldSet(_dataLength, this, _classPrivateFieldGet(_dataLength, this) + data.length);\n  return data.length;\n}\nvar _data2 = /*#__PURE__*/new WeakMap();\nvar _offset = /*#__PURE__*/new WeakMap();\nvar _bytesRead = /*#__PURE__*/new WeakMap();\nvar _parent = /*#__PURE__*/new WeakMap();\nvar _maxInflation = /*#__PURE__*/new WeakMap();\nvar _Reader_brand = /*#__PURE__*/new WeakSet();\nexport class Reader {\n  constructor(data, allowLoose, maxInflation) {\n    _classPrivateMethodInitSpec(this, _Reader_brand);\n    // Allows incomplete unpadded data to be read; otherwise an error\n    // is raised if attempting to overrun the buffer. This is required\n    // to deal with an old Solidity bug, in which event data for\n    // external (not public thoguh) was tightly packed.\n    _defineProperty(this, \"allowLoose\", void 0);\n    _classPrivateFieldInitSpec(this, _data2, void 0);\n    _classPrivateFieldInitSpec(this, _offset, void 0);\n    _classPrivateFieldInitSpec(this, _bytesRead, void 0);\n    _classPrivateFieldInitSpec(this, _parent, void 0);\n    _classPrivateFieldInitSpec(this, _maxInflation, void 0);\n    defineProperties(this, {\n      allowLoose: !!allowLoose\n    });\n    _classPrivateFieldSet(_data2, this, getBytesCopy(data));\n    _classPrivateFieldSet(_bytesRead, this, 0);\n    _classPrivateFieldSet(_parent, this, null);\n    _classPrivateFieldSet(_maxInflation, this, maxInflation != null ? maxInflation : 1024);\n    _classPrivateFieldSet(_offset, this, 0);\n  }\n  get data() {\n    return hexlify(_classPrivateFieldGet(_data2, this));\n  }\n  get dataLength() {\n    return _classPrivateFieldGet(_data2, this).length;\n  }\n  get consumed() {\n    return _classPrivateFieldGet(_offset, this);\n  }\n  get bytes() {\n    return new Uint8Array(_classPrivateFieldGet(_data2, this));\n  }\n  // Create a sub-reader with the same underlying data, but offset\n  subReader(offset) {\n    const reader = new Reader(_classPrivateFieldGet(_data2, this).slice(_classPrivateFieldGet(_offset, this) + offset), this.allowLoose, _classPrivateFieldGet(_maxInflation, this));\n    _classPrivateFieldSet(_parent, reader, this);\n    return reader;\n  }\n  // Read bytes\n  readBytes(length, loose) {\n    let bytes = _assertClassBrand(_Reader_brand, this, _peekBytes).call(this, 0, length, !!loose);\n    _assertClassBrand(_Reader_brand, this, _incrementBytesRead).call(this, length);\n    _classPrivateFieldSet(_offset, this, _classPrivateFieldGet(_offset, this) + bytes.length);\n    // @TODO: Make sure the length..end bytes are all 0?\n    return bytes.slice(0, length);\n  }\n  // Read a numeric values\n  readValue() {\n    return toBigInt(this.readBytes(WordSize));\n  }\n  readIndex() {\n    return toNumber(this.readBytes(WordSize));\n  }\n}\nfunction _incrementBytesRead(count) {\n  if (_classPrivateFieldGet(_parent, this)) {\n    var _classPrivateFieldGet2;\n    return _assertClassBrand(_Reader_brand, _classPrivateFieldGet2 = _classPrivateFieldGet(_parent, this), _incrementBytesRead).call(_classPrivateFieldGet2, count);\n  }\n  _classPrivateFieldSet(_bytesRead, this, _classPrivateFieldGet(_bytesRead, this) + count);\n  // Check for excessive inflation (see: #4537)\n  assert(_classPrivateFieldGet(_maxInflation, this) < 1 || _classPrivateFieldGet(_bytesRead, this) <= _classPrivateFieldGet(_maxInflation, this) * this.dataLength, \"compressed ABI data exceeds inflation ratio of \".concat(_classPrivateFieldGet(_maxInflation, this), \" ( see: https://github.com/ethers-io/ethers.js/issues/4537 )\"), \"BUFFER_OVERRUN\", {\n    buffer: getBytesCopy(_classPrivateFieldGet(_data2, this)),\n    offset: _classPrivateFieldGet(_offset, this),\n    length: count,\n    info: {\n      bytesRead: _classPrivateFieldGet(_bytesRead, this),\n      dataLength: this.dataLength\n    }\n  });\n}\nfunction _peekBytes(offset, length, loose) {\n  let alignedLength = Math.ceil(length / WordSize) * WordSize;\n  if (_classPrivateFieldGet(_offset, this) + alignedLength > _classPrivateFieldGet(_data2, this).length) {\n    if (this.allowLoose && loose && _classPrivateFieldGet(_offset, this) + length <= _classPrivateFieldGet(_data2, this).length) {\n      alignedLength = length;\n    } else {\n      assert(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n        buffer: getBytesCopy(_classPrivateFieldGet(_data2, this)),\n        length: _classPrivateFieldGet(_data2, this).length,\n        offset: _classPrivateFieldGet(_offset, this) + alignedLength\n      });\n    }\n  }\n  return _classPrivateFieldGet(_data2, this).slice(_classPrivateFieldGet(_offset, this), _classPrivateFieldGet(_offset, this) + alignedLength);\n}","map":{"version":3,"names":["defineProperties","concat","getBytesCopy","getNumber","hexlify","toBeArray","toBigInt","toNumber","assert","assertArgument","WordSize","Padding","Uint8Array","passProperties","_guard","throwError","name","error","wrapped","Error","_names","WeakMap","Result","Array","constructor","_len","arguments","length","args","_key","guard","items","names","slice","wrap","_classPrivateFieldInitSpec","forEach","item","index","nameCounts","reduce","accum","set","get","Map","_classPrivateFieldSet","Object","freeze","map","Proxy","target","prop","receiver","match","RangeError","indexOf","Reflect","value","Function","_len2","_key2","apply","getValue","toArray","deep","result","push","toObject","_classPrivateFieldGet","operation","child","start","end","i","filter","callback","thisArg","call","undefined","JSON","stringify","fromItems","keys","checkResultErrors","errors","checkErrors","path","object","isArray","key","childPath","bytes","buffer","offset","Coder","type","localName","dynamic","_defineProperty","_throwError","message","_data","_dataLength","_Writer_brand","WeakSet","Writer","_classPrivateMethodInitSpec","data","appendWriter","writer","_assertClassBrand","_writeData","writeBytes","paddingOffset","writeValue","writeUpdatableValue","_data2","_offset","_bytesRead","_parent","_maxInflation","_Reader_brand","Reader","allowLoose","maxInflation","dataLength","consumed","subReader","reader","readBytes","loose","_peekBytes","_incrementBytesRead","readValue","readIndex","count","_classPrivateFieldGet2","info","bytesRead","alignedLength","Math","ceil"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/ethers/src.ts/abi/coders/abstract-coder.ts"],"sourcesContent":["\nimport {\n    defineProperties, concat, getBytesCopy, getNumber, hexlify,\n    toBeArray, toBigInt, toNumber,\n    assert, assertArgument\n} from \"../../utils/index.js\";\n\nimport type { BigNumberish, BytesLike } from \"../../utils/index.js\";\n\n/**\n * @_ignore:\n */\nexport const WordSize: number = 32;\nconst Padding = new Uint8Array(WordSize);\n\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [ \"then\" ];\n\nconst _guard = { };\n\nfunction throwError(name: string, error: Error): never {\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${ name }`);\n    (<any>wrapped).error = error;\n    throw wrapped;\n}\n\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nexport class Result extends Array<any> {\n    readonly #names: ReadonlyArray<null | string>;\n\n    [ K: string | number ]: any\n\n    /**\n     *  @private\n     */\n    constructor(...args: Array<any>) {\n        // To properly sub-class Array so the other built-in\n        // functions work, the constructor has to behave fairly\n        // well. So, in the event we are created via fromItems()\n        // we build the read-only Result object we want, but on\n        // any other input, we use the default constructor\n\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n        const guard = args[0];\n        let items: Array<any> = args[1];\n        let names: Array<null | string> = (args[2] || [ ]).slice();\n\n        let wrap = true;\n        if (guard !== _guard) {\n            items = args;\n            names = [ ];\n            wrap = false;\n        }\n\n        // Can't just pass in ...items since an array of length 1\n        // is a special case in the super.\n        super(items.length);\n        items.forEach((item, index) => { this[index] = item; });\n\n        // Find all unique keys\n        const nameCounts = names.reduce((accum, name) => {\n            if (typeof(name) === \"string\") {\n                accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n        }, <Map<string, number>>(new Map()));\n\n        // Remove any key thats not unique\n        this.#names = Object.freeze(items.map((item, index) => {\n            const name = names[index];\n            if (name != null && nameCounts.get(name) === 1) {\n                return name;\n            }\n            return null;\n        }));\n\n        if (!wrap) { return; }\n\n        // A wrapped Result is immutable\n        Object.freeze(this);\n\n        // Proxy indices and names so we can trap deferred errors\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof(prop) === \"string\") {\n\n                    // Index accessor\n                    if (prop.match(/^[0-9]+$/)) {\n                        const index = getNumber(prop, \"%index\");\n                        if (index < 0 || index >= this.length) {\n                            throw new RangeError(\"out of result range\");\n                        }\n\n                        const item = target[index];\n                        if (item instanceof Error) {\n                            throwError(`index ${ index }`, item);\n                        }\n                        return item;\n                    }\n\n                    // Pass important checks (like `then` for Promise) through\n                    if (passProperties.indexOf(prop) >= 0) {\n                        return Reflect.get(target, prop, receiver);\n                    }\n\n                    const value = target[prop];\n                    if (value instanceof Function) {\n                        // Make sure functions work with private variables\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n                        return function(this: any, ...args: Array<any>) {\n                            return value.apply((this === receiver) ? target: this, args);\n                        };\n\n                    } else if (!(prop in target)) {\n                        // Possible name accessor\n                        return target.getValue.apply((this === receiver) ? target: this, [ prop ]);\n                    }\n                }\n\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n\n    /**\n     *  Returns the Result as a normal Array. If %%deep%%, any children\n     *  which are Result objects are also converted to a normal Array.\n     *\n     *  This will throw if there are any outstanding deferred\n     *  errors.\n     */\n    toArray(deep?: boolean): Array<any> {\n        const result: Array<any> = [ ];\n        this.forEach((item, index) => {\n            if (item instanceof Error) { throwError(`index ${ index }`, item); }\n            if (deep && item instanceof Result) {\n                item = item.toArray(deep);\n            }\n            result.push(item);\n        });\n        return result;\n    }\n\n    /**\n     *  Returns the Result as an Object with each name-value pair. If\n     *  %%deep%%, any children which are Result objects are also\n     *  converted to an Object.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */\n    toObject(deep?: boolean): Record<string, any> {\n        return this.#names.reduce((accum, name, index) => {\n            assert(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"toObject()\"\n            });\n\n            // Add values for names that don't conflict\n            if (!(name in accum)) {\n                let child = this.getValue(name);\n                if (deep && child instanceof Result) {\n                    child = child.toObject(deep);\n                }\n                accum[name] = child;\n            }\n\n            return accum;\n        }, <Record<string, any>>{});\n    }\n\n    /**\n     *  @_ignore\n     */\n    slice(start?: number | undefined, end?: number | undefined): Result {\n        if (start == null) { start = 0; }\n        if (start < 0) {\n            start += this.length;\n            if (start < 0) { start = 0; }\n        }\n\n        if (end == null) { end = this.length; }\n        if (end < 0) {\n            end += this.length;\n            if (end < 0) { end = 0; }\n        }\n        if (end > this.length) { end = this.length; }\n\n        const result: Array<any> = [ ], names: Array<null | string> = [ ];\n        for (let i = start; i < end; i++) {\n            result.push(this[i]);\n            names.push(this.#names[i]);\n        }\n\n        return new Result(_guard, result, names);\n    }\n\n    /**\n     *  @_ignore\n     */\n    filter(callback: (el: any, index: number, array: Result) => boolean, thisArg?: any): Result {\n        const result: Array<any> = [ ], names: Array<null | string> = [ ];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${ i }`, item);\n            }\n\n            if (callback.call(thisArg, item, i, this)) {\n                result.push(item);\n                names.push(this.#names[i]);\n            }\n        }\n\n        return new Result(_guard, result, names);\n    }\n\n    /**\n     *  @_ignore\n     */\n    map<T extends any = any>(callback: (el: any, index: number, array: Result) => T, thisArg?: any): Array<T> {\n        const result: Array<T> = [ ];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${ i }`, item);\n            }\n\n            result.push(callback.call(thisArg, item, i, this));\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */\n    getValue(name: string): any {\n        const index = this.#names.indexOf(name);\n        if (index === -1) { return undefined; }\n\n        const value = this[index];\n\n        if (value instanceof Error) {\n            throwError(`property ${ JSON.stringify(name) }`, (<any>value).error);\n        }\n\n        return value;\n    }\n\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */\n    static fromItems(items: Array<any>, keys?: Array<null | string>): Result {\n        return new Result(_guard, items, keys);\n    }\n}\n\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error: any) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nfunction getValue(value: BigNumberish): Uint8Array {\n    let bytes = toBeArray(value);\n\n    assert (bytes.length <= WordSize, \"value out-of-bounds\",\n        \"BUFFER_OVERRUN\", { buffer: bytes, length: WordSize, offset: bytes.length });\n\n    if (bytes.length !== WordSize) {\n        bytes = getBytesCopy(concat([ Padding.slice(bytes.length % WordSize), bytes ]));\n    }\n\n    return bytes;\n}\n\n/**\n *  @_ignore\n */\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name!: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type!: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName!: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic!: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        defineProperties<Coder>(this, { name, type, localName, dynamic }, {\n            name: \"string\", type: \"string\", localName: \"string\", dynamic: \"boolean\"\n        });\n    }\n\n    _throwError(message: string, value: any): never {\n        assertArgument(false, message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\n/**\n *  @_ignore\n */\nexport class Writer {\n    // An array of WordSize lengthed objects to concatenation\n    #data: Array<Uint8Array>;\n    #dataLength: number;\n\n    constructor() {\n        this.#data = [ ];\n        this.#dataLength = 0;\n    }\n\n    get data(): string {\n        return concat(this.#data);\n    }\n    get length(): number { return this.#dataLength; }\n\n    #writeData(data: Uint8Array): number {\n        this.#data.push(data);\n        this.#dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this.#writeData(getBytesCopy(writer.data));\n    }\n\n    // Arrayish item; pad on the right to *nearest* WordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = getBytesCopy(value);\n        const paddingOffset = bytes.length % WordSize;\n        if (paddingOffset) {\n            bytes = getBytesCopy(concat([ bytes, Padding.slice(paddingOffset) ]))\n        }\n        return this.#writeData(bytes);\n    }\n\n    // Numeric item; pad on the left *to* WordSize\n    writeValue(value: BigNumberish): number {\n        return this.#writeData(getValue(value));\n    }\n\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this.#data.length;\n        this.#data.push(Padding);\n        this.#dataLength += WordSize;\n        return (value: BigNumberish) => {\n            this.#data[offset] = getValue(value);\n        };\n    }\n}\n\n/**\n *  @_ignore\n */\nexport class Reader {\n    // Allows incomplete unpadded data to be read; otherwise an error\n    // is raised if attempting to overrun the buffer. This is required\n    // to deal with an old Solidity bug, in which event data for\n    // external (not public thoguh) was tightly packed.\n    readonly allowLoose!: boolean;\n\n    readonly #data: Uint8Array;\n    #offset: number;\n\n    #bytesRead: number;\n    #parent: null | Reader;\n    #maxInflation: number;\n\n    constructor(data: BytesLike, allowLoose?: boolean, maxInflation?: number) {\n        defineProperties<Reader>(this, { allowLoose: !!allowLoose });\n\n        this.#data = getBytesCopy(data);\n        this.#bytesRead = 0;\n        this.#parent = null;\n        this.#maxInflation = (maxInflation != null) ? maxInflation: 1024;\n\n        this.#offset = 0;\n    }\n\n    get data(): string { return hexlify(this.#data); }\n    get dataLength(): number { return this.#data.length; }\n    get consumed(): number { return this.#offset; }\n    get bytes(): Uint8Array { return new Uint8Array(this.#data); }\n\n    #incrementBytesRead(count: number): void {\n        if (this.#parent) { return this.#parent.#incrementBytesRead(count); }\n\n        this.#bytesRead += count;\n\n        // Check for excessive inflation (see: #4537)\n        assert(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${ this.#maxInflation } ( see: https:/\\/github.com/ethers-io/ethers.js/issues/4537 )`,  \"BUFFER_OVERRUN\", {\n            buffer: getBytesCopy(this.#data), offset: this.#offset,\n            length: count, info: {\n                bytesRead: this.#bytesRead,\n                dataLength: this.dataLength\n            }\n        });\n    }\n\n    #peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / WordSize) * WordSize;\n        if (this.#offset + alignedLength > this.#data.length) {\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n                alignedLength = length;\n            } else {\n                assert(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                    buffer: getBytesCopy(this.#data),\n                    length: this.#data.length,\n                    offset: this.#offset + alignedLength\n                });\n            }\n        }\n        return this.#data.slice(this.#offset, this.#offset + alignedLength)\n    }\n\n    // Create a sub-reader with the same underlying data, but offset\n    subReader(offset: number): Reader {\n        const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);\n        reader.#parent = this;\n        return reader;\n    }\n\n    // Read bytes\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this.#peekBytes(0, length, !!loose);\n        this.#incrementBytesRead(length);\n        this.#offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    // Read a numeric values\n    readValue(): bigint {\n        return toBigInt(this.readBytes(WordSize));\n    }\n\n    readIndex(): number {\n        return toNumber(this.readBytes(WordSize));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}