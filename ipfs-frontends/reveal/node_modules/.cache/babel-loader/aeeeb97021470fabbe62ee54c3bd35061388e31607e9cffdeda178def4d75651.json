{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _defineProperty from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _assertClassBrand from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\n/**\n *  A **FallbackProvider** provides resilience, security and performance\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport { assert, assertArgument, getBigInt, getNumber, isError } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n  }\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stringify(value) {\n  return JSON.stringify(value, (key, value) => {\n    if (typeof value === \"bigint\") {\n      return {\n        type: \"bigint\",\n        value: value.toString()\n      };\n    }\n    return value;\n  });\n}\n;\nconst defaultConfig = {\n  stallTimeout: 400,\n  priority: 1,\n  weight: 1\n};\nconst defaultState = {\n  blockNumber: -2,\n  requests: 0,\n  lateResponses: 0,\n  errorResponses: 0,\n  outOfSync: -1,\n  unsupportedEvents: 0,\n  rollingDuration: 0,\n  score: 0,\n  _network: null,\n  _updateNumber: null,\n  _totalTime: 0,\n  _lastFatalError: null,\n  _lastFatalErrorTimestamp: 0\n};\nasync function waitForSync(config, blockNumber) {\n  while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n    if (!config._updateNumber) {\n      config._updateNumber = (async () => {\n        try {\n          const blockNumber = await config.provider.getBlockNumber();\n          if (blockNumber > config.blockNumber) {\n            config.blockNumber = blockNumber;\n          }\n        } catch (error) {\n          config.blockNumber = -2;\n          config._lastFatalError = error;\n          config._lastFatalErrorTimestamp = getTime();\n        }\n        config._updateNumber = null;\n      })();\n    }\n    await config._updateNumber;\n    config.outOfSync++;\n    if (config._lastFatalError) {\n      break;\n    }\n  }\n}\nfunction _normalize(value) {\n  if (value == null) {\n    return \"null\";\n  }\n  if (Array.isArray(value)) {\n    return \"[\" + value.map(_normalize).join(\",\") + \"]\";\n  }\n  if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n    return _normalize(value.toJSON());\n  }\n  switch (typeof value) {\n    case \"boolean\":\n    case \"symbol\":\n      return value.toString();\n    case \"bigint\":\n    case \"number\":\n      return BigInt(value).toString();\n    case \"string\":\n      return JSON.stringify(value);\n    case \"object\":\n      {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map(k => \"\".concat(JSON.stringify(k), \":\").concat(_normalize(value[k]))).join(\",\") + \"}\";\n      }\n  }\n  console.log(\"Could not serialize\", value);\n  throw new Error(\"Hmm...\");\n}\nfunction normalizeResult(value) {\n  if (\"error\" in value) {\n    const error = value.error;\n    return {\n      tag: _normalize(error),\n      value: error\n    };\n  }\n  const result = value.result;\n  return {\n    tag: _normalize(result),\n    value: result\n  };\n}\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum, results) {\n  const tally = new Map();\n  for (const {\n    value,\n    tag,\n    weight\n  } of results) {\n    const t = tally.get(tag) || {\n      value,\n      weight: 0\n    };\n    t.weight += weight;\n    tally.set(tag, t);\n  }\n  let best = null;\n  for (const r of tally.values()) {\n    if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n      best = r;\n    }\n  }\n  if (best) {\n    return best.value;\n  }\n  return undefined;\n}\nfunction getMedian(quorum, results) {\n  let resultWeight = 0;\n  const errorMap = new Map();\n  let bestError = null;\n  const values = [];\n  for (const {\n    value,\n    tag,\n    weight\n  } of results) {\n    if (value instanceof Error) {\n      const e = errorMap.get(tag) || {\n        value,\n        weight: 0\n      };\n      e.weight += weight;\n      errorMap.set(tag, e);\n      if (bestError == null || e.weight > bestError.weight) {\n        bestError = e;\n      }\n    } else {\n      values.push(BigInt(value));\n      resultWeight += weight;\n    }\n  }\n  if (resultWeight < quorum) {\n    // We have quorum for an error\n    if (bestError && bestError.weight >= quorum) {\n      return bestError.value;\n    }\n    // We do not have quorum for a result\n    return undefined;\n  }\n  // Get the sorted values\n  values.sort((a, b) => a < b ? -1 : b > a ? 1 : 0);\n  const mid = Math.floor(values.length / 2);\n  // Odd-length; take the middle value\n  if (values.length % 2) {\n    return values[mid];\n  }\n  // Even length; take the ceiling of the mean of the center two values\n  return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\nfunction getAnyResult(quorum, results) {\n  // If any value or error meets quorum, that is our preferred result\n  const result = checkQuorum(quorum, results);\n  if (result !== undefined) {\n    return result;\n  }\n  // Otherwise, do we have any result?\n  for (const r of results) {\n    if (r.value) {\n      return r.value;\n    }\n  }\n  // Nope!\n  return undefined;\n}\nfunction getFuzzyMode(quorum, results) {\n  if (quorum === 1) {\n    return getNumber(getMedian(quorum, results), \"%internal\");\n  }\n  const tally = new Map();\n  const add = (result, weight) => {\n    const t = tally.get(result) || {\n      result,\n      weight: 0\n    };\n    t.weight += weight;\n    tally.set(result, t);\n  };\n  for (const {\n    weight,\n    value\n  } of results) {\n    const r = getNumber(value);\n    add(r - 1, weight);\n    add(r, weight);\n    add(r + 1, weight);\n  }\n  let bestWeight = 0;\n  let bestResult = undefined;\n  for (const {\n    weight,\n    result\n  } of tally.values()) {\n    // Use this result, if this result meets quorum and has either:\n    // - a better weight\n    // - or equal weight, but the result is larger\n    if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {\n      bestWeight = weight;\n      bestResult = result;\n    }\n  }\n  return bestResult;\n}\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resilience by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */\nvar _configs = /*#__PURE__*/new WeakMap();\nvar _height = /*#__PURE__*/new WeakMap();\nvar _initialSyncPromise = /*#__PURE__*/new WeakMap();\nvar _FallbackProvider_brand = /*#__PURE__*/new WeakSet();\nexport class FallbackProvider extends AbstractProvider {\n  /**\n   *  Creates a new **FallbackProvider** with %%providers%% connected to\n   *  %%network%%.\n   *\n   *  If a [[Provider]] is included in %%providers%%, defaults are used\n   *  for the configuration.\n   */\n  constructor(providers, _network, options) {\n    super(_network, options);\n    // Grab the next (random) config that is not already part of\n    // the running set\n    _classPrivateMethodInitSpec(this, _FallbackProvider_brand);\n    /**\n     *  The number of backends that must agree on a value before it is\n     *  accpeted.\n     */\n    _defineProperty(this, \"quorum\", void 0);\n    /**\n     *  @_ignore:\n     */\n    _defineProperty(this, \"eventQuorum\", void 0);\n    /**\n     *  @_ignore:\n     */\n    _defineProperty(this, \"eventWorkers\", void 0);\n    _classPrivateFieldInitSpec(this, _configs, void 0);\n    _classPrivateFieldInitSpec(this, _height, void 0);\n    _classPrivateFieldInitSpec(this, _initialSyncPromise, void 0);\n    _classPrivateFieldSet(_configs, this, providers.map(p => {\n      if (p instanceof AbstractProvider) {\n        return Object.assign({\n          provider: p\n        }, defaultConfig, defaultState);\n      } else {\n        return Object.assign({}, defaultConfig, p, defaultState);\n      }\n    }));\n    _classPrivateFieldSet(_height, this, -2);\n    _classPrivateFieldSet(_initialSyncPromise, this, null);\n    if (options && options.quorum != null) {\n      this.quorum = options.quorum;\n    } else {\n      this.quorum = Math.ceil(_classPrivateFieldGet(_configs, this).reduce((accum, config) => {\n        accum += config.weight;\n        return accum;\n      }, 0) / 2);\n    }\n    this.eventQuorum = 1;\n    this.eventWorkers = 1;\n    assertArgument(this.quorum <= _classPrivateFieldGet(_configs, this).reduce((a, c) => a + c.weight, 0), \"quorum exceed provider weight\", \"quorum\", this.quorum);\n  }\n  get providerConfigs() {\n    return _classPrivateFieldGet(_configs, this).map(c => {\n      const result = Object.assign({}, c);\n      for (const key in result) {\n        if (key[0] === \"_\") {\n          delete result[key];\n        }\n      }\n      return result;\n    });\n  }\n  async _detectNetwork() {\n    return Network.from(getBigInt(await this._perform({\n      method: \"chainId\"\n    })));\n  }\n  // @TODO: Add support to select providers to be the event subscriber\n  //_getSubscriber(sub: Subscription): Subscriber {\n  //    throw new Error(\"@TODO\");\n  //}\n  /**\n   *  Transforms a %%req%% into the correct method call on %%provider%%.\n   */\n  async _translatePerform(provider, req) {\n    switch (req.method) {\n      case \"broadcastTransaction\":\n        return await provider.broadcastTransaction(req.signedTransaction);\n      case \"call\":\n        return await provider.call(Object.assign({}, req.transaction, {\n          blockTag: req.blockTag\n        }));\n      case \"chainId\":\n        return (await provider.getNetwork()).chainId;\n      case \"estimateGas\":\n        return await provider.estimateGas(req.transaction);\n      case \"getBalance\":\n        return await provider.getBalance(req.address, req.blockTag);\n      case \"getBlock\":\n        {\n          const block = \"blockHash\" in req ? req.blockHash : req.blockTag;\n          return await provider.getBlock(block, req.includeTransactions);\n        }\n      case \"getBlockNumber\":\n        return await provider.getBlockNumber();\n      case \"getCode\":\n        return await provider.getCode(req.address, req.blockTag);\n      case \"getGasPrice\":\n        return (await provider.getFeeData()).gasPrice;\n      case \"getPriorityFee\":\n        return (await provider.getFeeData()).maxPriorityFeePerGas;\n      case \"getLogs\":\n        return await provider.getLogs(req.filter);\n      case \"getStorage\":\n        return await provider.getStorage(req.address, req.position, req.blockTag);\n      case \"getTransaction\":\n        return await provider.getTransaction(req.hash);\n      case \"getTransactionCount\":\n        return await provider.getTransactionCount(req.address, req.blockTag);\n      case \"getTransactionReceipt\":\n        return await provider.getTransactionReceipt(req.hash);\n      case \"getTransactionResult\":\n        return await provider.getTransactionResult(req.hash);\n    }\n  }\n  async _perform(req) {\n    // Broadcasting a transaction is rare (ish) and already incurs\n    // a cost on the user, so spamming is safe-ish. Just send it to\n    // every backend.\n    if (req.method === \"broadcastTransaction\") {\n      // Once any broadcast provides a positive result, use it. No\n      // need to wait for anyone else\n      const results = _classPrivateFieldGet(_configs, this).map(c => null);\n      const broadcasts = _classPrivateFieldGet(_configs, this).map(async (_ref, index) => {\n        let {\n          provider,\n          weight\n        } = _ref;\n        try {\n          const result = await provider._perform(req);\n          results[index] = Object.assign(normalizeResult({\n            result\n          }), {\n            weight\n          });\n        } catch (error) {\n          results[index] = Object.assign(normalizeResult({\n            error\n          }), {\n            weight\n          });\n        }\n      });\n      // As each promise finishes...\n      while (true) {\n        // Check for a valid broadcast result\n        const done = results.filter(r => r != null);\n        for (const {\n          value\n        } of done) {\n          if (!(value instanceof Error)) {\n            return value;\n          }\n        }\n        // Check for a legit broadcast error (one which we cannot\n        // recover from; some nodes may return the following red\n        // herring events:\n        // - alredy seend (UNKNOWN_ERROR)\n        // - NONCE_EXPIRED\n        // - REPLACEMENT_UNDERPRICED\n        const result = checkQuorum(this.quorum, results.filter(r => r != null));\n        if (isError(result, \"INSUFFICIENT_FUNDS\")) {\n          throw result;\n        }\n        // Kick off the next provider (if any)\n        const waiting = broadcasts.filter((b, i) => results[i] == null);\n        if (waiting.length === 0) {\n          break;\n        }\n        await Promise.race(waiting);\n      }\n      // Use standard quorum results; any result was returned above,\n      // so this will find any error that met quorum if any\n      const result = getAnyResult(this.quorum, results);\n      assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n        request: \"%sub-requests\",\n        info: {\n          request: req,\n          results: results.map(stringify)\n        }\n      });\n      if (result instanceof Error) {\n        throw result;\n      }\n      return result;\n    }\n    await _assertClassBrand(_FallbackProvider_brand, this, _initialSync).call(this);\n    // Bootstrap enough runners to meet quorum\n    const running = new Set();\n    let inflightQuorum = 0;\n    while (true) {\n      const runner = _assertClassBrand(_FallbackProvider_brand, this, _addRunner).call(this, running, req);\n      if (runner == null) {\n        break;\n      }\n      inflightQuorum += runner.config.weight;\n      if (inflightQuorum >= this.quorum) {\n        break;\n      }\n    }\n    const result = await _assertClassBrand(_FallbackProvider_brand, this, _waitForQuorum).call(this, running, req);\n    // Track requests sent to a provider that are still\n    // outstanding after quorum has been otherwise found\n    for (const runner of running) {\n      if (runner.perform && runner.result == null) {\n        runner.config.lateResponses++;\n      }\n    }\n    return result;\n  }\n  async destroy() {\n    for (const {\n      provider\n    } of _classPrivateFieldGet(_configs, this)) {\n      provider.destroy();\n    }\n    super.destroy();\n  }\n}\nfunction _getNextConfig(running) {\n  // @TODO: Maybe do a check here to favour (heavily) providers that\n  //        do not require waitForSync and disfavour providers that\n  //        seem down-ish or are behaving slowly\n  const configs = Array.from(running).map(r => r.config);\n  // Shuffle the states, sorted by priority\n  const allConfigs = _classPrivateFieldGet(_configs, this).slice();\n  shuffle(allConfigs);\n  allConfigs.sort((a, b) => a.priority - b.priority);\n  for (const config of allConfigs) {\n    if (config._lastFatalError) {\n      continue;\n    }\n    if (configs.indexOf(config) === -1) {\n      return config;\n    }\n  }\n  return null;\n}\n// Adds a new runner (if available) to running.\nfunction _addRunner(running, req) {\n  const config = _assertClassBrand(_FallbackProvider_brand, this, _getNextConfig).call(this, running);\n  // No runners available\n  if (config == null) {\n    return null;\n  }\n  // Create a new runner\n  const runner = {\n    config,\n    result: null,\n    didBump: false,\n    perform: null,\n    staller: null\n  };\n  const now = getTime();\n  // Start performing this operation\n  runner.perform = (async () => {\n    try {\n      config.requests++;\n      const result = await this._translatePerform(config.provider, req);\n      runner.result = {\n        result\n      };\n    } catch (error) {\n      config.errorResponses++;\n      runner.result = {\n        error\n      };\n    }\n    const dt = getTime() - now;\n    config._totalTime += dt;\n    config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n    runner.perform = null;\n  })();\n  // Start a staller; when this times out, it's time to force\n  // kicking off another runner because we are taking too long\n  runner.staller = (async () => {\n    await stall(config.stallTimeout);\n    runner.staller = null;\n  })();\n  running.add(runner);\n  return runner;\n}\n// Initializes the blockNumber and network for each runner and\n// blocks until initialized\nasync function _initialSync() {\n  let initialSync = _classPrivateFieldGet(_initialSyncPromise, this);\n  if (!initialSync) {\n    const promises = [];\n    _classPrivateFieldGet(_configs, this).forEach(config => {\n      promises.push((async () => {\n        await waitForSync(config, 0);\n        if (!config._lastFatalError) {\n          config._network = await config.provider.getNetwork();\n        }\n      })());\n    });\n    _classPrivateFieldSet(_initialSyncPromise, this, initialSync = (async () => {\n      // Wait for all providers to have a block number and network\n      await Promise.all(promises);\n      // Check all the networks match\n      let chainId = null;\n      for (const config of _classPrivateFieldGet(_configs, this)) {\n        if (config._lastFatalError) {\n          continue;\n        }\n        const network = config._network;\n        if (chainId == null) {\n          chainId = network.chainId;\n        } else if (network.chainId !== chainId) {\n          assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"new FallbackProvider\"\n          });\n        }\n      }\n    })());\n  }\n  await initialSync;\n}\nasync function _checkQuorum(running, req) {\n  // Get all the result objects\n  const results = [];\n  for (const runner of running) {\n    if (runner.result != null) {\n      const {\n        tag,\n        value\n      } = normalizeResult(runner.result);\n      results.push({\n        tag,\n        value,\n        weight: runner.config.weight\n      });\n    }\n  }\n  // Are there enough results to event meet quorum?\n  if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {\n    return undefined;\n  }\n  switch (req.method) {\n    case \"getBlockNumber\":\n      {\n        // We need to get the bootstrap block height\n        if (_classPrivateFieldGet(_height, this) === -2) {\n          _classPrivateFieldSet(_height, this, Math.ceil(getNumber(getMedian(this.quorum, _classPrivateFieldGet(_configs, this).filter(c => !c._lastFatalError).map(c => ({\n            value: c.blockNumber,\n            tag: getNumber(c.blockNumber).toString(),\n            weight: c.weight\n          }))))));\n        }\n        // Find the mode across all the providers, allowing for\n        // a little drift between block heights\n        const mode = getFuzzyMode(this.quorum, results);\n        if (mode === undefined) {\n          return undefined;\n        }\n        if (mode > _classPrivateFieldGet(_height, this)) {\n          _classPrivateFieldSet(_height, this, mode);\n        }\n        return _classPrivateFieldGet(_height, this);\n      }\n    case \"getGasPrice\":\n    case \"getPriorityFee\":\n    case \"estimateGas\":\n      return getMedian(this.quorum, results);\n    case \"getBlock\":\n      // Pending blocks are in the mempool and already\n      // quite untrustworthy; just grab anything\n      if (\"blockTag\" in req && req.blockTag === \"pending\") {\n        return getAnyResult(this.quorum, results);\n      }\n      return checkQuorum(this.quorum, results);\n    case \"call\":\n    case \"chainId\":\n    case \"getBalance\":\n    case \"getTransactionCount\":\n    case \"getCode\":\n    case \"getStorage\":\n    case \"getTransaction\":\n    case \"getTransactionReceipt\":\n    case \"getLogs\":\n      return checkQuorum(this.quorum, results);\n    case \"broadcastTransaction\":\n      return getAnyResult(this.quorum, results);\n  }\n  assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"_perform(\".concat(stringify(req.method), \")\")\n  });\n}\nasync function _waitForQuorum(running, req) {\n  if (running.size === 0) {\n    throw new Error(\"no runners?!\");\n  }\n  // Any promises that are interesting to watch for; an expired stall\n  // or a successful perform\n  const interesting = [];\n  let newRunners = 0;\n  for (const runner of running) {\n    // No responses, yet; keep an eye on it\n    if (runner.perform) {\n      interesting.push(runner.perform);\n    }\n    // Still stalling...\n    if (runner.staller) {\n      interesting.push(runner.staller);\n      continue;\n    }\n    // This runner has already triggered another runner\n    if (runner.didBump) {\n      continue;\n    }\n    // Got a response (result or error) or stalled; kick off another runner\n    runner.didBump = true;\n    newRunners++;\n  }\n  // Check if we have reached quorum on a result (or error)\n  const value = await _assertClassBrand(_FallbackProvider_brand, this, _checkQuorum).call(this, running, req);\n  if (value !== undefined) {\n    if (value instanceof Error) {\n      throw value;\n    }\n    return value;\n  }\n  // Add any new runners, because a staller timed out or a result\n  // or error response came in.\n  for (let i = 0; i < newRunners; i++) {\n    _assertClassBrand(_FallbackProvider_brand, this, _addRunner).call(this, running, req);\n  }\n  // All providers have returned, and we have no result\n  assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n    request: \"%sub-requests\",\n    info: {\n      request: req,\n      results: Array.from(running).map(r => stringify(r.result))\n    }\n  });\n  // Wait for someone to either complete its perform or stall out\n  await Promise.race(interesting);\n  // This is recursive, but at worst case the depth is 2x the\n  // number of providers (each has a perform and a staller)\n  return await _assertClassBrand(_FallbackProvider_brand, this, _waitForQuorum).call(this, running, req);\n}","map":{"version":3,"names":["assert","assertArgument","getBigInt","getNumber","isError","AbstractProvider","Network","BN_1","BigInt","BN_2","shuffle","array","i","length","j","Math","floor","random","tmp","stall","duration","Promise","resolve","setTimeout","getTime","Date","stringify","value","JSON","key","type","toString","defaultConfig","stallTimeout","priority","weight","defaultState","blockNumber","requests","lateResponses","errorResponses","outOfSync","unsupportedEvents","rollingDuration","score","_network","_updateNumber","_totalTime","_lastFatalError","_lastFatalErrorTimestamp","waitForSync","config","provider","getBlockNumber","error","_normalize","Array","isArray","map","join","toJSON","keys","Object","sort","k","concat","console","log","Error","normalizeResult","tag","result","checkQuorum","quorum","results","tally","Map","t","get","set","best","r","values","undefined","getMedian","resultWeight","errorMap","bestError","e","push","a","b","mid","getAnyResult","getFuzzyMode","add","bestWeight","bestResult","_configs","WeakMap","_height","_initialSyncPromise","_FallbackProvider_brand","WeakSet","FallbackProvider","constructor","providers","network","options","_classPrivateMethodInitSpec","_defineProperty","_classPrivateFieldInitSpec","_classPrivateFieldSet","p","assign","ceil","_classPrivateFieldGet","reduce","accum","eventQuorum","eventWorkers","c","providerConfigs","_detectNetwork","from","_perform","method","_translatePerform","req","broadcastTransaction","signedTransaction","call","transaction","blockTag","getNetwork","chainId","estimateGas","getBalance","address","block","blockHash","getBlock","includeTransactions","getCode","getFeeData","gasPrice","maxPriorityFeePerGas","getLogs","filter","getStorage","position","getTransaction","hash","getTransactionCount","getTransactionReceipt","getTransactionResult","broadcasts","_ref","index","done","waiting","race","request","info","_assertClassBrand","_initialSync","running","Set","inflightQuorum","runner","_addRunner","_waitForQuorum","perform","destroy","_getNextConfig","configs","allConfigs","slice","indexOf","didBump","staller","now","dt","initialSync","promises","forEach","all","operation","_checkQuorum","mode","size","interesting","newRunners"],"sources":["/Users/flo/DeadCaster/ipfs-frontends/onboard/node_modules/ethers/src.ts/providers/provider-fallback.ts"],"sourcesContent":["/**\n *  A **FallbackProvider** provides resilience, security and performance\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport {\n    assert, assertArgument, getBigInt, getNumber, isError\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\"\n\nimport type { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\"\n\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\n\nfunction shuffle<T = any>(array: Array<T>): void {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nfunction stringify(value: any): string {\n    return JSON.stringify(value, (key, value) => {\n        if (typeof(value) === \"bigint\") {\n            return { type: \"bigint\", value: value.toString() };\n        }\n        return value;\n    });\n}\n\n/**\n *  A configuration entry for how to use a [[Provider]].\n */\nexport interface FallbackProviderConfig {\n\n    /**\n     *  The provider.\n     */\n    provider: AbstractProvider;\n\n    /**\n     *  The amount of time to wait before kicking off the next provider.\n     *\n     *  Any providers that have not responded can still respond and be\n     *  counted, but this ensures new providers start.\n     */\n    stallTimeout?: number;\n\n    /**\n     *  The priority. Lower priority providers are dispatched first.\n     */\n    priority?: number;\n\n    /**\n     *  The amount of weight a provider is given against the quorum.\n     */\n    weight?: number;\n};\n\nconst defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };\n\n// We track a bunch of extra stuff that might help debug problems or\n// optimize infrastructure later on.\n/**\n *  The statistics and state maintained for a [[Provider]].\n */\nexport interface FallbackProviderState extends Required<FallbackProviderConfig> {\n\n    /**\n     *  The most recent blockNumber this provider has reported (-2 if none).\n     */\n    blockNumber: number;\n\n    /**\n     *  The number of total requests ever sent to this provider.\n     */\n    requests: number;\n\n    /**\n     *  The number of responses that errored.\n     */\n    errorResponses: number;\n\n    /**\n     *  The number of responses that occured after the result resolved.\n     */\n    lateResponses: number;\n\n    /**\n     *  How many times syncing was required to catch up the expected block.\n     */\n    outOfSync: number;\n\n    /**\n     *  The number of requests which reported unsupported operation.\n     */\n    unsupportedEvents: number;\n\n    /**\n     *  A rolling average (5% current duration) for response time.\n     */\n    rollingDuration: number;\n\n    /**\n     *  The ratio of quorum-agreed results to total.\n     */\n    score: number;\n}\n\ninterface Config extends FallbackProviderState {\n    _updateNumber: null | Promise<any>;\n    _network: null | Network;\n    _totalTime: number;\n    _lastFatalError: null | Error;\n    _lastFatalErrorTimestamp: number;\n}\n\nconst defaultState = {\n    blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,\n    outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,\n    _network: null, _updateNumber: null, _totalTime: 0,\n    _lastFatalError: null, _lastFatalErrorTimestamp: 0\n};\n\n\nasync function waitForSync(config: Config, blockNumber: number): Promise<void> {\n    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n        if (!config._updateNumber) {\n            config._updateNumber = (async () => {\n                try {\n                    const blockNumber = await config.provider.getBlockNumber();\n                    if (blockNumber > config.blockNumber) {\n                        config.blockNumber = blockNumber;\n                    }\n                } catch (error: any) {\n                    config.blockNumber = -2;\n                    config._lastFatalError = error;\n                    config._lastFatalErrorTimestamp = getTime();\n                }\n                config._updateNumber = null;\n            })();\n        }\n        await config._updateNumber;\n        config.outOfSync++;\n        if (config._lastFatalError) { break; }\n    }\n}\n\n/**\n *  Additional options to configure a [[FallbackProvider]].\n */\nexport type FallbackProviderOptions = {\n    // How many providers must agree on a value before reporting\n    // back the response\n    quorum?: number;\n\n    // How many providers must have reported the same event\n    // for it to be emitted (currently unimplmented)\n    eventQuorum?: number;\n\n    // How many providers to dispatch each event to simultaneously.\n    // Set this to 0 to use getLog polling, which implies eventQuorum\n    // is equal to quorum. (currently unimplemented)\n    eventWorkers?: number;\n\n    cacheTimeout?: number;\n\n    pollingInterval?: number;\n};\n\ntype RunnerResult = { result: any } | { error: Error };\n\ntype RunnerState = {\n    config: Config;\n    staller: null | Promise<void>;\n    didBump: boolean;\n    perform: null | Promise<any>;\n    result: null | RunnerResult;\n}\n\nfunction _normalize(value: any): string {\n    if (value == null) { return \"null\"; }\n\n    if (Array.isArray(value)) {\n        return \"[\" + (value.map(_normalize)).join(\",\") + \"]\";\n    }\n\n    if (typeof(value) === \"object\" && typeof(value.toJSON) === \"function\") {\n        return _normalize(value.toJSON());\n    }\n\n    switch (typeof(value)) {\n        case \"boolean\": case \"symbol\":\n            return value.toString();\n        case \"bigint\": case \"number\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{\" + keys.map((k) => `${ JSON.stringify(k) }:${ _normalize(value[k]) }`).join(\",\") + \"}\";\n        }\n    }\n\n    console.log(\"Could not serialize\", value);\n    throw new Error(\"Hmm...\");\n}\n\nfunction normalizeResult(value: RunnerResult): { tag: string, value: any } {\n\n    if (\"error\" in value) {\n        const error = value.error;\n        return { tag: _normalize(error), value: error };\n    }\n\n    const result = value.result;\n    return { tag: _normalize(result), value: result };\n}\n\ntype TallyResult = {\n    tag: string;\n    value: any;\n    weight: number;\n};\n\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum: number, results: Array<TallyResult>): any | Error {\n    const tally: Map<string, { value: any, weight: number }> = new Map();\n    for (const { value, tag, weight } of results) {\n        const t = tally.get(tag) || { value, weight: 0 };\n        t.weight += weight;\n        tally.set(tag, t);\n    }\n\n    let best: null | { value: any, weight: number } = null;\n\n    for (const r of tally.values()) {\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n            best = r;\n        }\n    }\n\n    if (best) { return best.value; }\n\n    return undefined;\n}\n\nfunction getMedian(quorum: number, results: Array<TallyResult>): undefined | bigint | Error {\n    let resultWeight = 0;\n\n    const errorMap: Map<string, { weight: number, value: Error }> = new Map();\n    let bestError: null | { weight: number, value: Error } = null;\n\n    const values: Array<bigint> = [ ];\n    for (const { value, tag, weight } of results) {\n        if (value instanceof Error) {\n            const e = errorMap.get(tag) || { value, weight: 0 };\n            e.weight += weight;\n            errorMap.set(tag, e);\n\n            if (bestError == null || e.weight > bestError.weight) { bestError = e; }\n        } else {\n            values.push(BigInt(value));\n            resultWeight += weight;\n        }\n    }\n\n    if (resultWeight < quorum) {\n        // We have quorum for an error\n        if (bestError && bestError.weight >= quorum) { return bestError.value; }\n\n        // We do not have quorum for a result\n        return undefined;\n    }\n\n    // Get the sorted values\n    values.sort((a, b) => ((a < b) ? -1: (b > a) ? 1: 0));\n\n    const mid = Math.floor(values.length / 2);\n\n    // Odd-length; take the middle value\n    if (values.length % 2) { return values[mid]; }\n\n    // Even length; take the ceiling of the mean of the center two values\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\n\nfunction getAnyResult(quorum: number, results: Array<TallyResult>): undefined | any | Error {\n    // If any value or error meets quorum, that is our preferred result\n    const result = checkQuorum(quorum, results);\n    if (result !== undefined) { return result; }\n\n    // Otherwise, do we have any result?\n    for (const r of results) {\n        if (r.value) { return r.value; }\n    }\n\n    // Nope!\n    return undefined;\n}\n\nfunction getFuzzyMode(quorum: number, results: Array<TallyResult>): undefined | number {\n    if (quorum === 1) { return getNumber(<bigint>getMedian(quorum, results), \"%internal\"); }\n\n    const tally: Map<number, { result: number, weight: number }> = new Map();\n    const add = (result: number, weight: number) => {\n        const t = tally.get(result) || { result, weight: 0 };\n        t.weight += weight;\n        tally.set(result, t);\n    };\n\n    for (const { weight, value } of results) {\n        const r = getNumber(value);\n        add(r - 1, weight);\n        add(r, weight);\n        add(r + 1, weight);\n    }\n\n    let bestWeight = 0;\n    let bestResult: undefined | number = undefined;\n\n    for (const { weight, result } of tally.values()) {\n        // Use this result, if this result meets quorum and has either:\n        // - a better weight\n        // - or equal weight, but the result is larger\n        if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {\n            bestWeight = weight;\n            bestResult = result;\n        }\n    }\n\n    return bestResult;\n}\n\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resilience by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */\nexport class FallbackProvider extends AbstractProvider {\n\n    /**\n     *  The number of backends that must agree on a value before it is\n     *  accpeted.\n     */\n    readonly quorum: number;\n\n    /**\n     *  @_ignore:\n     */\n    readonly eventQuorum: number;\n\n    /**\n     *  @_ignore:\n     */\n    readonly eventWorkers: number;\n\n    readonly #configs: Array<Config>;\n\n    #height: number;\n    #initialSyncPromise: null | Promise<void>;\n\n    /**\n     *  Creates a new **FallbackProvider** with %%providers%% connected to\n     *  %%network%%.\n     *\n     *  If a [[Provider]] is included in %%providers%%, defaults are used\n     *  for the configuration.\n     */\n    constructor(providers: Array<AbstractProvider | FallbackProviderConfig>, network?: Networkish, options?: FallbackProviderOptions) {\n        super(network, options);\n\n        this.#configs = providers.map((p) => {\n            if (p instanceof AbstractProvider) {\n                return Object.assign({ provider: p }, defaultConfig, defaultState );\n            } else {\n                return Object.assign({ }, defaultConfig, p, defaultState );\n            }\n        });\n\n        this.#height = -2;\n        this.#initialSyncPromise = null;\n\n        if (options && options.quorum != null) {\n            this.quorum = options.quorum;\n        } else {\n            this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {\n                accum += config.weight;\n                return accum;\n            }, 0) / 2);\n        }\n\n        this.eventQuorum = 1;\n        this.eventWorkers = 1;\n\n        assertArgument(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0),\n            \"quorum exceed provider weight\", \"quorum\", this.quorum);\n    }\n\n    get providerConfigs(): Array<FallbackProviderState> {\n        return this.#configs.map((c) => {\n            const result: any = Object.assign({ }, c);\n            for (const key in result) {\n                if (key[0] === \"_\") { delete result[key]; }\n            }\n            return result;\n        });\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return Network.from(getBigInt(await this._perform({ method: \"chainId\" })));\n    }\n\n    // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n\n    /**\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\n     */\n    async _translatePerform(provider: AbstractProvider, req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"broadcastTransaction\":\n                return await provider.broadcastTransaction(req.signedTransaction);\n            case \"call\":\n                return await provider.call(Object.assign({ }, req.transaction, { blockTag: req.blockTag }));\n            case \"chainId\":\n                return (await provider.getNetwork()).chainId;\n            case \"estimateGas\":\n                return await provider.estimateGas(req.transaction);\n            case \"getBalance\":\n                return await provider.getBalance(req.address, req.blockTag);\n            case \"getBlock\": {\n                const block = (\"blockHash\" in req) ? req.blockHash: req.blockTag;\n                return await provider.getBlock(block, req.includeTransactions);\n            }\n            case \"getBlockNumber\":\n                return await provider.getBlockNumber();\n            case \"getCode\":\n                return await provider.getCode(req.address, req.blockTag);\n            case \"getGasPrice\":\n                return (await provider.getFeeData()).gasPrice;\n            case \"getPriorityFee\":\n                return (await provider.getFeeData()).maxPriorityFeePerGas;\n            case \"getLogs\":\n                return await provider.getLogs(req.filter);\n            case \"getStorage\":\n                return await provider.getStorage(req.address, req.position, req.blockTag);\n            case \"getTransaction\":\n                return await provider.getTransaction(req.hash);\n            case \"getTransactionCount\":\n                return await provider.getTransactionCount(req.address, req.blockTag);\n            case \"getTransactionReceipt\":\n                return await provider.getTransactionReceipt(req.hash);\n            case \"getTransactionResult\":\n                return await provider.getTransactionResult(req.hash);\n        }\n    }\n\n    // Grab the next (random) config that is not already part of\n    // the running set\n    #getNextConfig(running: Set<RunnerState>): null | Config {\n        // @TODO: Maybe do a check here to favour (heavily) providers that\n        //        do not require waitForSync and disfavour providers that\n        //        seem down-ish or are behaving slowly\n\n        const configs = Array.from(running).map((r) => r.config)\n\n        // Shuffle the states, sorted by priority\n        const allConfigs = this.#configs.slice();\n        shuffle(allConfigs);\n        allConfigs.sort((a, b) => (a.priority - b.priority));\n\n        for (const config of allConfigs) {\n            if (config._lastFatalError) { continue; }\n            if (configs.indexOf(config) === -1) { return config; }\n        }\n\n        return null;\n    }\n\n    // Adds a new runner (if available) to running.\n    #addRunner(running: Set<RunnerState>, req: PerformActionRequest): null | RunnerState {\n        const config = this.#getNextConfig(running);\n\n        // No runners available\n        if (config == null) { return null; }\n\n        // Create a new runner\n        const runner: RunnerState = {\n            config, result: null, didBump: false,\n            perform: null, staller: null\n        };\n\n        const now = getTime();\n\n        // Start performing this operation\n        runner.perform = (async () => {\n            try {\n                config.requests++;\n                const result = await this._translatePerform(config.provider, req);\n                runner.result = { result };\n            } catch (error: any) {\n                config.errorResponses++;\n                runner.result = { error };\n            }\n\n            const dt = (getTime() - now);\n            config._totalTime += dt;\n\n            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n\n            runner.perform = null;\n        })();\n\n        // Start a staller; when this times out, it's time to force\n        // kicking off another runner because we are taking too long\n        runner.staller = (async () => {\n            await stall(config.stallTimeout);\n            runner.staller = null;\n        })();\n\n        running.add(runner);\n        return runner;\n    }\n\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    async #initialSync(): Promise<void> {\n        let initialSync = this.#initialSyncPromise;\n        if (!initialSync) {\n            const promises: Array<Promise<any>> = [ ];\n            this.#configs.forEach((config) => {\n                promises.push((async () => {\n                    await waitForSync(config, 0);\n                    if (!config._lastFatalError) {\n                        config._network = await config.provider.getNetwork();\n                    }\n                })());\n            });\n\n            this.#initialSyncPromise = initialSync = (async () => {\n                // Wait for all providers to have a block number and network\n                await Promise.all(promises);\n\n                // Check all the networks match\n                let chainId: null | bigint = null;\n                for (const config of this.#configs) {\n                    if (config._lastFatalError) { continue; }\n                    const network = <Network>(config._network);\n                    if (chainId == null) {\n                        chainId = network.chainId;\n                    } else if (network.chainId !== chainId) {\n                        assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"new FallbackProvider\"\n                        });\n                    }\n                }\n            })();\n        }\n\n        await initialSync\n    }\n\n\n    async #checkQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        // Get all the result objects\n        const results: Array<TallyResult> = [ ];\n        for (const runner of running) {\n            if (runner.result != null) {\n                const { tag, value } = normalizeResult(runner.result);\n                results.push({ tag, value, weight: runner.config.weight });\n            }\n        }\n\n        // Are there enough results to event meet quorum?\n        if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {\n            return undefined;\n        }\n\n        switch (req.method) {\n            case \"getBlockNumber\": {\n                // We need to get the bootstrap block height\n                if (this.#height === -2) {\n                    this.#height = Math.ceil(getNumber(<bigint>getMedian(this.quorum, this.#configs.filter((c) => (!c._lastFatalError)).map((c) => ({\n                        value: c.blockNumber,\n                        tag: getNumber(c.blockNumber).toString(),\n                        weight: c.weight\n                    })))));\n                }\n\n                // Find the mode across all the providers, allowing for\n                // a little drift between block heights\n                const mode = getFuzzyMode(this.quorum, results);\n                if (mode === undefined) { return undefined; }\n                if (mode > this.#height) { this.#height = mode; }\n                return this.#height;\n            }\n\n            case \"getGasPrice\":\n            case \"getPriorityFee\":\n            case \"estimateGas\":\n                return getMedian(this.quorum, results);\n\n            case \"getBlock\":\n                // Pending blocks are in the mempool and already\n                // quite untrustworthy; just grab anything\n                if (\"blockTag\" in req && req.blockTag === \"pending\") {\n                    return getAnyResult(this.quorum, results);\n                }\n                return checkQuorum(this.quorum, results);\n\n            case \"call\":\n            case \"chainId\":\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n            case \"getStorage\":\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n            case \"getLogs\":\n                return checkQuorum(this.quorum, results);\n\n            case \"broadcastTransaction\":\n                return getAnyResult(this.quorum, results);\n        }\n\n        assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: `_perform(${ stringify((<any>req).method) })`\n        });\n    }\n\n    async #waitForQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        if (running.size === 0) { throw new Error(\"no runners?!\"); }\n\n        // Any promises that are interesting to watch for; an expired stall\n        // or a successful perform\n        const interesting: Array<Promise<void>> = [ ];\n\n        let newRunners = 0;\n        for (const runner of running) {\n\n            // No responses, yet; keep an eye on it\n            if (runner.perform) {\n                interesting.push(runner.perform);\n            }\n\n            // Still stalling...\n            if (runner.staller) {\n                interesting.push(runner.staller);\n                continue;\n            }\n\n            // This runner has already triggered another runner\n            if (runner.didBump) { continue; }\n\n            // Got a response (result or error) or stalled; kick off another runner\n            runner.didBump = true;\n            newRunners++;\n        }\n\n        // Check if we have reached quorum on a result (or error)\n        const value = await this.#checkQuorum(running, req);\n        if (value !== undefined) {\n            if (value instanceof Error) { throw value; }\n            return value;\n        }\n\n        // Add any new runners, because a staller timed out or a result\n        // or error response came in.\n        for (let i = 0; i < newRunners; i++) {\n            this.#addRunner(running, req);\n        }\n\n        // All providers have returned, and we have no result\n\n        assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }\n        });\n\n        // Wait for someone to either complete its perform or stall out\n        await Promise.race(interesting);\n\n        // This is recursive, but at worst case the depth is 2x the\n        // number of providers (each has a perform and a staller)\n        return await this.#waitForQuorum(running, req);\n    }\n\n    async _perform<T = any>(req: PerformActionRequest): Promise<T> {\n        // Broadcasting a transaction is rare (ish) and already incurs\n        // a cost on the user, so spamming is safe-ish. Just send it to\n        // every backend.\n        if (req.method === \"broadcastTransaction\") {\n            // Once any broadcast provides a positive result, use it. No\n            // need to wait for anyone else\n            const results: Array<null | TallyResult> = this.#configs.map((c) => null);\n            const broadcasts = this.#configs.map(async ({ provider, weight }, index) => {\n                try {\n                    const result = await provider._perform(req);\n                    results[index] = Object.assign(normalizeResult({ result }), { weight });\n                } catch (error: any) {\n                    results[index] = Object.assign(normalizeResult({ error }), { weight });\n                }\n            });\n\n            // As each promise finishes...\n            while (true) {\n                // Check for a valid broadcast result\n                const done = <Array<any>>results.filter((r) => (r != null));\n                for (const { value } of done) {\n                    if (!(value instanceof Error)) { return value; }\n                }\n\n                // Check for a legit broadcast error (one which we cannot\n                // recover from; some nodes may return the following red\n                // herring events:\n                // - alredy seend (UNKNOWN_ERROR)\n                // - NONCE_EXPIRED\n                // - REPLACEMENT_UNDERPRICED\n                const result = checkQuorum(this.quorum, <Array<any>>results.filter((r) => (r != null)));\n                if (isError(result, \"INSUFFICIENT_FUNDS\")) {\n                    throw result;\n                }\n\n                // Kick off the next provider (if any)\n                const waiting = broadcasts.filter((b, i) => (results[i] == null));\n                if (waiting.length === 0) { break; }\n                await Promise.race(waiting);\n            }\n\n            // Use standard quorum results; any result was returned above,\n            // so this will find any error that met quorum if any\n            const result = getAnyResult(this.quorum, <Array<any>>results);\n            assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: { request: req, results: results.map(stringify) }\n            })\n            if (result instanceof Error) { throw result; }\n            return result;\n        }\n\n        await this.#initialSync();\n\n        // Bootstrap enough runners to meet quorum\n        const running: Set<RunnerState> = new Set();\n        let inflightQuorum = 0;\n        while (true) {\n            const runner = this.#addRunner(running, req);\n            if (runner == null) { break; }\n            inflightQuorum += runner.config.weight;\n            if (inflightQuorum >= this.quorum) { break; }\n        }\n\n        const result = await this.#waitForQuorum(running, req);\n\n        // Track requests sent to a provider that are still\n        // outstanding after quorum has been otherwise found\n        for (const runner of running) {\n            if (runner.perform && runner.result == null) {\n                runner.config.lateResponses++;\n            }\n        }\n\n        return result;\n    }\n\n    async destroy(): Promise<void> {\n        for (const { provider } of this.#configs) {\n            provider.destroy();\n        }\n        super.destroy();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}